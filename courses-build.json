{"C":{"1":["Introduction to C Programming","\n# Introduction to C Programming\n\n![](https://www.codingthai.com/wp-content/uploads/2022/07/wordpress-feature-image-c-programming.png)\n\nC is a powerful and general-purpose programming language that has been around for several decades. It was originally developed by Dennis Ritchie at Bell Labs in the early 1970s. \n\nOver the years, C has become one of the most widely used programming languages in the world, influencing many other languages and serving as the foundation for operating systems, compilers, and many software applications.\n\nC is a base for the programming. If you know ‘C,’ you can easily grasp the knowledge of the other programming languages that uses the concept of ‘C’.\n\n## Key Features of C :\n\n- **Efficiency**: C is known for its efficiency and high performance. It allows for low-level manipulation of memory and provides direct access to hardware, making it suitable for system programming and developing applications where performance is critical.\n\n- **Portability**: C programs can be compiled to run on different platforms with minimal or no modification. This portability is achieved through the use of standard libraries and adherence to certain programming practices.\n\n- **Structured Programming**: C supports structured programming techniques, such as functions and loops, which help in writing clear, organized, and maintainable code.\n\n- **Rich Library Support**: C comes with a rich set of standard libraries that provide functions for various tasks, including input/output operations, string manipulation, memory management, and mathematical computations.\n\n- **Flexibility**: C offers low-level features like pointers and manual memory management, allowing developers to have fine-grained control over the execution of their programs. This flexibility is essential for tasks like system programming and embedded systems development.\n\n- **Scalability**: C can be used for projects of various sizes, from small utility programs to large-scale applications. Its modular nature allows developers to break down complex problems into smaller, manageable components.\n\n- **Wide Usage**: C is used in a wide range of applications, including operating systems, device drivers, compilers, embedded systems, games, and applications software. Its versatility and efficiency make it a popular choice for many programmers and industries.\n\n## Structure of C Program :\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20221219163357/Structure-of-C-Program.png)\n\n### 1. Header Files Inclusion – `#include <stdio.h>`\n\nThe first and foremost component is the inclusion of the Header files in a C program. \n\nA header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files. \n\nAll lines that start with **#** are processed by a preprocessor which is a program invoked by the compiler. \n\nIn the above example, the preprocessor copies the preprocessed code of `stdio.h` to our file. The `.h` files are called header files in C. \n\nSome of the C Header files:\n\n* stddef.h – Defines several useful types and macros.\n* stdint.h – Defines exact width integer types.\n* stdio.h – Defines core input and output functions\n* stdlib.h – Defines numeric conversion functions, pseudo-random number generator, and memory allocation\n* string.h – Defines string handling functions\n* math.h – Defines common mathematical functions.\n\n### 2. Main Method Declaration – `int main()`\n\nThe next part of a C program is to declare the main() function. It is the entry point of a C program and the execution typically begins with the first line of the main(). \n\nThe empty brackets indicate that the main doesn’t take any parameter. The int that was written before the main indicates the return type of main(). The value returned by the main indicates the status of program termination.\n\n### 3. Body of Main Method – enclosed in `{}`\n\nThe body of a function in the C program refers to statements that are a part of that function. It can be anything like manipulations, searching, sorting, printing, etc. \n\nA pair of curly brackets define the body of a function. All functions must start and end with curly brackets.\n\n### 4. Statement – `printf(“Hello World”);`\n\nStatements are the instructions given to the compiler. In C, a statement is always terminated by a semicolon (`;`). In this particular case, we use `printf()` function to instruct the compiler to display “Hello World” text on the screen.\n\n### 5. Return Statement – `return 0;`\n\nThe last part of any C function is the return statement. The return statement refers to the return values from a function. \n\nThis return statement and return value depend upon the return type of the function. The return statement in our program returns the value from main(). \n\nThe returned value may be used by an operating system to know the termination status of your program. The value 0 typically means successful termination.\n\n## How C Programming Language Works?\n\n![](https://www.guru99.com/images/1/012419_1229_WhatisCProg4.png)\n\nC is a compiled language. A compiler is a special tool that compiles the program and converts it into the object file which is machine readable. \n\nAfter the compilation process, the linker will combine different object files and creates a single executable file to run the program. The following diagram shows the execution of a ‘C’ program,\n"],"2":["Declaration of Variables & Data Types","\n# Declaration of Variables and Data Types\n\nIn C programming, variables are symbolic names given to locations in memory that can hold data during program execution. When declaring variables, you specify their data types, which define the type of data the variables can hold and how much memory they occupy\n\nLet's say we need to calculate the area of a rectangle. To make this arithmetic calculation, we need to store the length and width of the rectangle. To store the length and width of the rectangle, we need to allocate some space in a memory location for the data, and the name given to that memory location is called Variable.\n\nVariable declaration in C typically consists of specifying the type of data the variable will hold, followed by its name. For each different data, we give different variable names to it for later use in the program.\n\nFor better understanding, let's look at the following image which shows the memory location where the data is stored with a variable name as `age` and value `20` to it.\n\n![](https://www.cs.mtsu.edu/~xyang/images/memoryAllocation.png)\n\n**Syntax:**\n\n```\ndatatype variable_name;\n```\n\n- **Datatype**: Specifies the type of data that the variable can hold, such as `int`, `float`, `char`, etc.\n- **Variable Name**: Identifier used to reference the variable in the program. Variable names must follow certain rules, such as starting with a letter or underscore, and can contain letters, digits, and underscores.\n\n**Example:**\n\n    int age;\n    float weight;\n    char grade;\n\nIn this example:\n- `age` is a variable of type `int`, which can store integer values like 10, -5, 100, etc.\n- `weight` is a variable of type `float`, which can store floating-point values like 3.14, 2.5, -0.75, etc.\n- `grade` is a variable of type `char`, which can store single character values like 'A', 'B', 'C', etc.\n\n### Explanation:\n\nVariable declaration is a crucial step in C programming as it informs the compiler about the type and name of the variable. This allows the compiler to allocate memory for the variable based on its data type and perform type checking during compilation.\n\n- **Type of Data**: By specifying the data type of a variable, you define what kind of values it can hold. For example, an `int` variable can hold integer values, a `float` variable can hold floating-point values, and a `char` variable can hold single characters.\n\n- **Name of the Variable**: The variable name serves as an identifier that allows you to refer to the data stored in the variable within your program. It's essential to choose meaningful and descriptive names for variables to enhance code readability and maintainability.\n\n- **Memory Allocation**: When you declare a variable, the compiler allocates memory space based on the data type of the variable. The amount of memory allocated depends on the size of the data type. For example, `int` typically requires 4 bytes of memory on most systems.\n\n- **Type Checking**: During compilation, the compiler performs type checking to ensure that variables are used correctly in the program. It checks whether the operations performed on variables are valid based on their data types, helping to catch potential errors before the program runs.\n\n### Data Types in C:\n\nData types in C define the type and size of data that can be stored in variables. By specifying appropriate data types during variable declaration, we can ensure that they can hold the required values and perform operations correctly\n\n![](https://files.codingninjas.in/article_images/data-types-in-c-0-1645006676.webp)\n\n| **Data Type** | **Explanation** | **Example** |\n|---|---|---|\n| **int** | Store integer values, typically occupying 4 bytes of memory. | `int age = 25;` |\n| **float** | Store floating-point values, providing approximate representation for real numbers. | `float weight = 65.5;` |\n| **char** | Store single character values, typically occupying 1 byte of memory. | `char grade = 'A';` |\n| **double** | Similar to float, but with higher precision, typically occupying 8 bytes of memory. | `double pi = 3.14159;` |\n| **void** | Denotes an empty data type or absence of any type, often used as a return type for functions that do not return any value. | `void function();` |\n"],"3":["Control Flow in C","\n# Control Flow in C\n\n![](https://static.vecteezy.com/system/resources/previews/023/478/889/original/coding-logical-flow-programming-flowchart-with-software-development-laptop-flat-concept-illustration-vector.jpg)\n\nIn simple words, Control statements in C help the computer execute a certain logical statement and decide whether to enable the control of the flow through a certain set of statements or not. Also, it is used to direct the execution of statements under certain conditions.\n\n## Types of Control Statements :\n\nThe primary types of control statements in C are:\n\n* Decision-making control statements  \n    1. Simple if statement  \n    2. If-else statements  \n    3. Nested if-else statements  \n    4. else-if ladder\n* Conditional statements\n* Goto statements in C\n* Loop control statements in C  \n    1. While Loop  \n    2. Do-while Loop  \n    3. For Loop\n\n## Decision-Making Control Statements :\n\n### Simple if Statement\n    \nSimple if statements are carried out to perform some operation when the condition is only true. If the condition of the if statement is true then the statements under the if block is executed else the control is transferred to the statements outside the if block.\n\nSyntax of the if statement is as given below:\n\n![Control_Statements_In_C_1](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_1.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_2](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_2.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_3](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_3.png)\n\n#### Output:\n\n![Control_Statements_In_C_4](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_4.jpg)\n\n### If-else Statement  \n\nIn some situations, you may have to execute statements based on true or false under certain conditions, therefore; you use if-else statements. \n\nIf the condition is true, then if block will be executed otherwise the else block is executed.\n\nSyntax of the if-else statement is as given below:\n\n![Control_Statements_In_C_5](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_5.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_6](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_6.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_7](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_7.png)\n\n#### Output:\n\n![Control_Statements_In_C_8](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_8.jpg)\n\n### Nested if-else Statements\n    \nThe nested if-else statements consist of another if or else. Therefore; if the condition of “if” is true (i.e., an outer if) then outer if’s if block is executed which contains another if (that is inner if) and if the condition of if block is true, statements under if block will be executed else the statements of inner if’s “else” block will be executed.\n\nIf the outer “if” condition is not true then the outer if’s “else” block is executed which consists of another if. The outer else’s inner if the condition is true then the statement under outer else’s inner if is executed else the outer else’s else block is executed.\n\nSyntax of the nested if-else statement is as given below:\n\n![Control_Statements_In_C_9](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_9.jpg)\n\n![Control_Statements_In_C_9_2](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_9_2.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_11](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_11.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_12](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_12.png)\n\n#### Output:\n\n![Control_Statements_In_C_13](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_13.jpg)\n\n### Else-if Ladder Statements\n    \nThe else-if ladder statements contain multiple else-if, when either of the condition is true the statements under that particular “if” will be executed otherwise the statements under the else block will be executed.\n\nSuppose the “if” condition is true, statements under “if” will be executed else the other “if” condition is tested, and if that condition is true statements under that particular “if” will be executed. This process will repeat as long as the else-if’s are present in the program.\n\nSyntax of the else-if ladder statement is as given below:\n\n![Control_Statements_In_C_14.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_14.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_15.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_15.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_16.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_16.png)\n\n#### Output:\n\n![Control_Statements_In_C_17.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_17.jpg)\n\nSo far, you have looked at the decision-making control statements in C. Now, go ahead and take the next step and learn conditional statements in C.\n\n## Conditional Control Statements :\n\nAs per the value of the switch expression, the switch statement will allow multi-way branching.\n\nDepending on the expression, the control is transferred to that particular case label and executed the statements under it. If none of the cases are matched with the switch expression, then the default statement is executed.\n\nThe syntax of the switch statement is as given below:\n\n![Control_Statements_In_C_18](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_18.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_19](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_19.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_20.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_20.png)\n\n#### Output:\n\n![Control_Statements_In_C_21](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_21.jpg)\n\nAfter the conditional statement, you have the goto statement in C.\n\n## Goto Statements in C\n\nThe goto statements are used to transfer the flow of control in a program, goto statement is also known as a jump control statement because it is used to jump to the specified part of the program. The label in goto statement is a name used to direct the branch to a specified point in the program.\n\nSyntax of the goto statement is as given below:\n\n![Control_Statements_In_C_22](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_22.jpg)\n\nAfter goto statements in C, you are now heading towards the loop control statements in C.\n\n## Loop Control Statements :\n\n### While Loop\n    \nA while loop is also known as an entry loop because in a while loop the condition is tested first then the statements underbody of the while loop will be executed.\n\nIf the while loop condition is false for the first time itself then the statements under the while loop will not be executed even once.\n\nThe syntax of the while loop is as given below:\n\n![Control_Statements_In_C_23](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_23.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_24](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_24.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_25](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_25.png)\n\n#### Output:\n\n![Control_Statements_In_C_26](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_26.jpg)\n\n### do-while Loop\n    \nThe do-while is also known as an exit loop because in the do-while loop, the statements will be executed first and then the condition is checked.\n\nIf the condition of the while loop is true then the body of the loop will be executed again and again until the condition is false. Once the condition is false, the control will transfer outside the do-while loop and execute statements followed soon after the do-while loop.\n\nThe syntax of the do-while loop is as given below:\n\n![Control_Statements_In_C_27](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_27.jpg)\n\n#### Flow Chart:\n\n![Control_Statements_In_C_28](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_28.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_29](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_29.png)\n\n#### Output:\n\n![Control_Statements_In_C_30](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_30.jpg)\n\nUp next, you have the for loop statement in C.\n\n### For Loop\n    \nThe for loop is also known as a pre-test loop. From the following syntax, expression1 is an initialization, expression2 is the conditional expression and expression3 is an updation. The variables can be initialized in for the statement itself.\n\nThe syntax of the do-while loop is as given below:\n\n![Control_Statements_In_C_31](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_31.jpg)\n\nIn the for loop, expression1 is used to initialize the variable, expression2 is evaluated and if the condition is true, then the body of for loop will be executed and then the statements under expression3 will be executed. This process is repeated as long as the for loop condition is true, once the condition is false control will return to the statements following the for loop and execute those statements.\n\n#### Flow Chart:\n\n![Control_Statements_In_C_32.](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_32.jpg)\n\n#### Example:\n\n![Control_Statements_In_C_33](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_33.png)\n\n#### Output:\n\n![Control_Statements_In_C_34](https://www.simplilearn.com/ice9/free_resources_article_thumb/Control_Statements_In_C_34.jpg)\n"],"4":["Functions and Modular Programming","\n# Functions and Modular Programming\n\n![](https://miro.medium.com/v2/1*1sIZ7jpk6CVOeK0uQvFGww.jpeg)\n\nA **function** is a block of code that performs a particular task.\n\nThere are many situations where we might need to write same line of code for more than once in a program. This may lead to unnecessary repetition of code, bugs and even becomes boring for the programmer. \n\nSo, C language provides an approach in which you can declare and define a group of statements once in the form of a function and it can be called and used whenever required.\n\nThese functions defined by the user are also know as **User-defined Functions**\n\nC functions can be classified into two categories,\n\n1. **Library functions**\n2. **User-defined functions**\n\n![types of functions in C](https://static.studytonight.com/c/images/types-of-function-in-c.gif)\n\n**Library functions** are those functions which are already defined in C library, example `printf()`, `scanf()`, `strcat()` etc. You just need to include appropriate header files to use these functions. These are already declared and defined in C libraries.\n\nA **User-defined functions** on the other hand, are those functions which are defined by the user at the time of writing program. These functions are made for code reusability and for saving time and space.\n\n## Benefits of Using Functions\n\n- It provides modularity to your program's structure.\n- It makes your code reusable. You just have to call the function by its name to use it, wherever required.\n- In case of large programs with thousands of code lines, debugging and editing becomes easier if you use functions.\n- It makes the program more readable and easy to understand.\n\n## Function Declaration\n\nGeneral syntax for function declaration is,\n\n```\nreturntype functionName(type1 parameter1, type2 parameter2,...);\n```\n\nLike any variable or an array, a function must also be declared before its used. Function declaration informs the compiler about the function name, parameters is accept, and its return type. The actual body of the function can be defined separately. It's also called as **Function Prototyping**. Function declaration consists of 4 parts.\n\n* `returntype`\n* `function name`\n* `parameter list`\n* `terminating semicolon`\n\n### returntype\n\nWhen a function is declared to perform some sort of calculation or any operation and is expected to provide with some result at the end, in such cases, a `return` statement is added at the end of function body. Return type specifies the type of value(`int`, `float`, `char`, `double`) that function is expected to return to the program which called the function.\n\n**Note:** In case your function doesn't return any value, the return type would be `void`.\n\n### functionName\n\nFunction name is an identifier and it specifies the name of the function. The function name is any valid C identifier and therefore must follow the same naming rules like other variables in C language.\n\n### parameter list\n\nThe parameter list declares the type and number of arguments that the function expects when it is called. Also, the parameters in the parameter list receives the argument values when the function is called. They are often referred as **formal parameters**.\n\n### Time for an Example\n\nLet's write a simple program with a `main()` function, and a user defined function to multiply two numbers, which will be called from the `main()` function.\n\n    #include<stdio.h>\n    \n    int multiply(int a, int b);     // function declaration\n    \n    int main() \n    {\n        int i, j, result;\n        printf(\"Please enter 2 numbers you want to multiply...\");\n        scanf(\"%d%d\", &i, &j);\n        \n        result = multiply(i, j);        // function call\n        printf(\"The result of muliplication is: %d\", result);\n        \n        return 0;\n    }\n    \n    int multiply(int a, int b)\n    {\n        return (a*b);       // function defintion, this can be done in one line\n    }\n\n\n### Function definition Syntax\n\nJust like in the example above, the general syntax of function definition is,\n\n```\nreturntype functionName(type1 parameter1, type2 parameter2,...)\n{\n    // function body goes here\n}\n```\n\nThe first line _returntype_ **functionName(type1 parameter1, type2 parameter2,...)** is known as **function header** and the statement(s) within curly braces is called **function body**.\n\n**Note:** While defining a function, there is no semicolon(`;`) after the parenthesis in the function header, unlike while declaring the function or calling the function.\n\n### functionbody\n\nThe function body contains the declarations and the statements(algorithm) necessary for performing the required task. The body is enclosed within curly braces `{ ... }` and consists of three parts.\n\n* **local** variable declaration(if required).\n* **function statements** to perform the task inside the function.\n* a **return** statement to return the result evaluated by the function(if return type is `void`, then no return statement is required).\n\n### Calling a function\n\nWhen a function is called, control of the program gets transferred to the function.\n\n    functionName(argument1, argument2,...);\n\nIn the example above, the statement `multiply(i, j);` inside the `main()` function is function call.\n\n### Passing Arguments to a function\n\nArguments are the values specified during the function call, for which the formal parameters are declared while defining the function.\n\n![passing arguments to functions in C](https://static.studytonight.com/c/images/functions-and-arguments.gif)\n\nIt is possible to have a function with parameters but no return type. It is not necessary, that if a function accepts parameter(s), it must return a result too.\n\n![Passing argument to function in C](https://static.studytonight.com/c/images/passing-argument-c-functions.jpg)\n\nWhile declaring the function, we have declared two parameters `a` and `b` of type `int`. Therefore, while calling that function, we need to pass two arguments, else we will get compilation error. And the two arguments passed should be received in the function definition, which means that the function header in the function definition should have the two parameters to hold the argument values. These received arguments are also known as **formal parameters**. The name of the variables while declaring, calling and defining a function can be different.\n\n### Returning a value from function\n\nA function may or may not return a result. But if it does, we must use the `return` statement to output the result. `return` statement also ends the function execution, hence it must be the last statement of any function. If you write any statement after the `return` statement, it won't be executed.\n\n![Return statement in C functions](https://static.studytonight.com/c/images/return-statement-c-functions.jpg)\n\nThe datatype of the value returned using the `return` statement should be same as the return type mentioned at function declaration and definition. If any of it mismatches, you will get compilation error.\n\n## What is Modular Programming?\n\n![](https://images.slideplayer.com/18/6168460/slides/slide_45.jpg)\n\nModular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules. Each module is a separate piece of software that handles a specific part of the application’s overall functionality.\n\nKey features of modular programming include:\n\n- **Separation of Concerns**: Each module is designed to perform a specific role within the system. This separation allows individual modules to be developed, tested, and debugged in isolation, improving productivity and error detection.\n- **Reusability**: Modules are often designed with the idea of reusability in mind. A well-designed module can be used in many different systems, reducing the need for code duplication.\n- **Maintainability**: Since each module is separate, changes to one module can be made with minimal impact on other parts of the system. This greatly simplifies maintenance and enhancements.\n- **Interchangeability**: If a module becomes outdated or needs to be upgraded, it can be swapped out for a new module with minimal impact on the rest of the system.\n\nThe concept of modular programming is not confined to a particular programming paradigm. It can be applied in procedural programming, object-oriented programming, and many other paradigms. There are even some programming languages, such as Modula-2 and Modula-3, that have been specifically designed to support modular programming.\n\nAt a higher level, similar principles are used in system design. \n\nFor example, the idea of microservices in software architecture is essentially a way of designing a system as a collection of independent modules, each running in its own process and communicating with the others through a well-defined interface.\n\nSome of the Benefits of Modular Programming are,\n\n### Enhanced Maintainability\n\nThe isolation of modules simplifies the process of updating and debugging software. Changes within a module typically don’t affect the operation of other modules. This level of isolation reduces the risk of creating new bugs when making changes or updates to a specific part of the software.\n\n### Promoting Reusability\n\nA well-constructed module is a reusable piece of software that can be used across different projects. This practice significantly reduces development time and promotes code consistency. Imagine having a collection of proven modules at your disposal, ready to be used whenever you’re tackling a problem that they can solve.\n\n### Improved Collaboration\n\nModular programming enables developers to work concurrently on different modules of a software project. This parallelism in development can drastically reduce the project’s overall development time. Furthermore, the encapsulation within a module can allow a developer to fully understand a specific aspect of the project without needing to comprehend the complete system.\n"],"5":["Arrays in C","\n# Arrays in C\n\n![](https://miro.medium.com/v2/resize:fit:1400/1*GKh4ZFrlIjLnPrWU4roMwQ.png)\n\n**Array** is one of the most used data structures in C programming. It is a simple and fast way of storing multiple values under a single name. \n\nIn this lesson, we will study the different aspects of array in C language such as array declaration, definition, initialization, types of arrays, array syntax, advantages and disadvantages, and many more.\n\n## What is an Array ?\n\nAn array in C is a fixed-size collection of similar data items stored in contiguous memory locations. It can be used to store the collection of primitive data types such as int, char, float, etc., and also derived and user-defined data types such as pointers, structures, etc.\n\n![arrays in c](https://media.geeksforgeeks.org/wp-content/uploads/20230302091959/Arrays-in-C.png)\n\n## C Array Declaration\n\nIn C, we have to declare the array like any other variable before using it. We can declare an array by specifying its name, the type of its elements, and the size of its dimensions. When we declare an array in C, the compiler allocates the memory block of the specified size to the array name.\n\n### Syntax of Array Declaration\n\n```\ndata_type array_name [size];\n          or\ndata_type array_name [size1] [size2]...[sizeN]; \n```  \n\nwhere N is the number of dimensions.\n\n![c array delcaration](https://media.geeksforgeeks.org/wp-content/uploads/20230302092603/c-array-declaration.png)\n\nThe C arrays are static in nature, i.e., they are allocated memory at the compile time.\n\n**Example of Array Declaration:**\n\n    // C Program to illustrate the array declaration\n    #include <stdio.h>\n      \n    int main()\n    {\n      \n        // declaring array of integers\n        int arr_int[5];\n        // declaring array of characters\n        char arr_char[5];\n      \n        return 0;\n    }\n\n## C Array Initialization\n\nInitialization in C is the process to assign some initial value to the variable. When the array is declared or allocated memory, the elements of the array contain some garbage value. So, we need to initialize the array to some meaningful value. There are multiple ways in which we can initialize an array in C.\n\n### 1. Array Initialization with Declaration\n\nIn this method, we initialize the array along with its declaration. We use an initializer list to initialize multiple elements of the array. An initializer list is the list of values enclosed within braces **{ }** separated b a comma.\n\n```\ndata_type array_name [size] = {value1, value2, ... valueN};\n```\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230302092653/C-array-initialization.png)\n\n### 2. Array Initialization with Declaration without Size\n\nIf we initialize an array using an initializer list, we can skip declaring the size of the array as the compiler can automatically deduce the size of the array in these cases. The size of the array in these cases is equal to the number of elements present in the initializer list as the compiler can automatically deduce the size of the array.\n\n```\ndata_type array_name[] = {1,2,3,4,5};\n```\n\nThe size of the above arrays is 5 which is automatically deduced by the compiler.\n\n### 3. Array Initialization after Declaration (Using Loops)\n\nWe initialize the array after the declaration by assigning the initial value to each element individually. We can use for loop, while loop, or do-while loop to assign the value to each element of the array.\n\n    for (int i = 0; i < N; i++) {\n        array_name[i] = valuei;\n    }\n\n### Example of Array Initialization in C\n\n    // C Program to demonstrate array initialization\n    #include <stdio.h>\n    \n    int main()\n    {\n    \n      // array initialization using initialier list\n      int arr[5] = { 10, 20, 30, 40, 50 };\n    \n      // array initialization using initializer list without\n      // specifying size\n      int arr1[] = { 1, 2, 3, 4, 5 };\n    \n      // array initialization using for loop\n      float arr2[5];\n      for (int i = 0; i < 5; i++) {\n        arr2[i] = (float)i * 2.1;\n      }\n      return 0;\n    }\n\n\n## Access Array Elements\n\nWe can access any element of an array in C using the array subscript operator `[]` and the index value `i` of the element.\n\n```\narray_name [index];\n```\n\nOne thing to note is that the indexing in the array always starts with 0, i.e., the **first element** is at index **0** and the **last element** is at **N – 1** where **N** is the number of elements in the array.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230302092738/access-array-elements.png)\n\nSee the below example for Accessing Array Elements using Array Subscript Operator\n\n**Example:**\n\n    #include <stdio.h>\n    \n    int main() {\n      // array declaration and initialization\n      int arr[5] = { 15, 25, 35, 45, 55 };\n    \n      // accessing element at index 2 i.e 3rd element\n      printf(\"Element at arr[2]: %d\\n\", arr[2]);\n    \n      // accessing element at index 4 i.e last element\n      printf(\"Element at arr[4]: %d\\n\", arr[4]);\n    \n      // accessing element at index 0 i.e first element\n      printf(\"Element at arr[0]: %d\", arr[0]);\n    \n      return 0;\n    }\n\n**Output**\n\n```\nElement at arr[2]: 35\nElement at arr[4]: 55\nElement at arr[0]: 15\n```\n\n## Update Array Element\n\nWe can update the value of an element at the given index i in a similar way to accessing an element by using the array subscript operator `[ ]` and assignment operator `=`.\n  \n```\narray_name[i] = new_value; \n```\n\n## Array Traversal\n\nTraversal is the process in which we visit every element of the data structure. For C array traversal, we use loops to iterate through each element of the array.\n\n### Array Traversal using for Loop\n\n    for (int i = 0; i < N; i++) {  \n        array_name[i];  \n    } \n  \n\n![c array traversal](https://media.geeksforgeeks.org/wp-content/uploads/20230302092847/C-array-traversal.png)\n\n## Types of Array in C\n\nThere are two types of arrays based on the number of dimensions it has. They are as follows:\n\n1. One Dimensional Arrays (1D Array)\n2. Two-Dimensional Arrays\n3. Three-Dimensional Arrays\n\n### 1. One Dimensional Array :\n\nThe One-dimensional arrays, also known as 1-D arrays in C are those arrays that have only one dimension.\n\nSyntax of 1D Array,\n\n```\narray_name [size]; \n``` \n\n![1d array in c](https://media.geeksforgeeks.org/wp-content/uploads/20230302093316/1d-array.png)\n\n### 2. Two-Dimensional Array :\n\nA Two-Dimensional array or 2D array in C is an array that has exactly two dimensions. They can be visualized in the form of rows and columns organized in a two-dimensional plane.\n\nSyntax of 2D Array,\n\n```\narray_name[size1] [size2];  \n```\n\nHere,\n\n* **size1:** Size of the first dimension.\n* **size2:** Size of the second dimension.\n\n![2d array in c](https://media.geeksforgeeks.org/wp-content/uploads/20230302093139/2d-array.png)\n\n### Example of 2D Array in C\n\n    // C Program to illustrate 2d array\n    #include <stdio.h>\n    \n    int main()\n    {\n    \n      // declaring and initializing 2d array\n      int arr[2][3] = { 10, 20, 30, 40, 50, 60 };\n    \n    printf(\"2D Array:\\n\");\n      // printing 2d array\n      for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 3; j++) {\n          printf(\"%d \",arr[i][j]);\n        }\n        printf(\"\\n\");\n      }\n    \n      return 0;\n    }\n\n**Output**\n\n```\n2D Array:\n10 20 30 \n40 50 60 \n```\n\n### 3. Three-Dimensional Array :\n\nAnother popular form of a multi-dimensional array is Three Dimensional Array or 3D Array. A 3D array has exactly three dimensions. It can be visualized as a collection of 2D arrays stacked on top of each other to create the third dimension.\n\nSyntax of 3D Array,\n\n```\narray_name [size1] [size2] [size3];\n```\n\n![3d array in c](https://media.geeksforgeeks.org/wp-content/uploads/20230302093224/3d-array.png)\n\n### Example of 3D Array\n\n    // C Program to illustrate the 3d array\n    #include <stdio.h>\n    \n    int main()\n    {\n    \n      // 3D array declaration\n      int arr[2][2][2] = { 10, 20, 30, 40, 50, 60 };\n    \n      // printing elements\n      for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n          for (int k = 0; k < 2; k++) {\n            printf(\"%d \", arr[i][j][k]);\n          }\n          printf(\"\\n\");\n        }\n        printf(\"\\n \\n\");\n      }\n      return 0;\n    }\n\n**Output**\n\n```\n10 20 \n30 40 \n\n50 60 \n0 0 \n```\n"],"6":["Introduction to Pointers","\n# Introduction to Pointers\n\n![](https://www.educative.io/v2api/editorpage/5298573028622336/image/6450568544387072)\n\nA Pointer in C language is a variable that holds a memory address. This memory address is the address of another variable(mostly) of same data type.\n\nIn simple words, if one variable stores the address of second variable then the first variable can be said to **point towards** the second variable.\n\nBefore we start understanding what pointers are and what they can do, let's start by understanding what does **\"Address of a memory location\"** means?\n\n## What is a Memory Address in C?\n\nWhenever a variable is defined in C language, a memory location is assigned for it, in which it's value gets stored. We can check this memory address, using the `&` symbol.\n\nIf `var` is the name of the variable, then `&var` will give it's address.\n\nLet's write a small program to see memory address of any variable that we define in our program.\n\n    #include<stdio.h>\n    \n    void main()\n    {\n        int var = 7;\n        printf(\"Value of the variable var is: %d\\n\", var);\n        printf(\"Memory address of the variable var is: %x\\n\", &var);\n    }\n\nValue of the variable var is: 7 Memory address of the variable var is: bcc7a00\n\nAlso while using the `scanf()` function, we mention `&var` to take user input for any variable `var`.\n\n    scanf(\"%d\", &var);\n\nThis is used to store the user input value to the memory address of the variable `var`.\n\n## What is a Pointer in C?\n\nLike we mentioned earlier, a Pointer in C language is a variable that holds a memory address.\n\nPointers are used to access memory of a variable and manipulate the value stored in it.\n\nPointers are one of the most distinct and exciting features of C language. It provides power and flexibility to the language. Although pointers may appear a little confusing and complicated in the beginning, but trust me, once you understand the concept, you will be able to do so much more with C language.\n\nWhenever a **variable** is declared in a program, system allocates a location i.e an address to that variable in the memory, to hold the assigned value. This location has its own address number, which we saw in the program above.\n\nLet us assume that system has allocated memory location `80F` for a variable `a`.\n\n    int a = 10;\n\n![storage of variable in C](https://static.studytonight.com/c/images/variable-storage-in-c.gif)\n\nWe can access the value `10` either by using the variable name `a` or by using its address `80F`.\n\nThe question is how we can access a variable using it's address? Since the memory addresses are also just numbers, they can also be assigned to some other variable. The variables which are used to hold memory addresses are called **Pointer variables**.\n\nA **pointer** variable is therefore nothing but a variable which holds an address of some other variable. And the value of a **pointer variable** gets stored in another memory location.\n\n![Pointer to a variable](https://static.studytonight.com/c/images/pointer-to-variable.gif)\n\n## Pointer Variable in C\n\nLike we mentioned above that a pointer is also a variable, but with a little twist, that is, it only stores address of other variables.\n\nSo if you have to define a pointer variable, the syntax is a little different.\n\nFollowing is the **syntax** for declaring a variable as a pointer:\n\n```\ntype *name;\n```\n\nHere, **type** is the data type of the pointer, and the **name** is the name of the pointer variable.\n\nAnd the `*` operator with the name, informs the compiler that the variable is a pointer.\n\nThe data type of the pointer variable should be the same as of the variable to which the pointer is pointing.\n\n## Pointer Operators in C\n\nThere are two pointer operators in C, they are:\n\n1. `*` operator\n2. `&` operator\n\nThe `&` operator returns the memory address of its operand. For example,\n\n```\na = &b;\n```\n\nIn the variable `a` the memory address of the variable `b` will get stored.\n\nThe `*` operators is the complement of `&`. Thiss operator returns the value located at the given address.\n\nFor example, if `a` contains the memory address of the variable `b`, then the code,\n\n```\nc = *a;\n```\n\nwill store the value of the variable `b` into `c`.\n\n## Pointers in C Example\n\nLet's see a basic code example where we will create a pointer and assign it a value.\n\n    #include<stdio.h>\n    \n    int main(void)\n    {\n        int x = 99;\n        // declare a pointer\n        int *ptr;\n        // assign value to pointer\n        ptr = &x;\n    \n        printf(\"Value at ptr is: %d \\n\", *ptr);\n    \n        printf(\"Address pointed by ptr is: %p \\n\", ptr);\n    \n        return 0;\n    }\n  \n**Output :**\n\n```\nValue at ptr is: 99  \nAddress pointed by ptr is: 0x7fff99c0e6c4\n```\n\nThe `%p` format specifier is used for pointer variable.\n\n## Benefits of using pointers in C\n\nBelow we have listed a few benefits of using pointers:\n\n1. Pointers are more efficient in handling Arrays in C and Structures in C.\n2. Pointers allow references to function and thereby helps in passing of function as arguments to other functions.\n3. Pointers also provide means by which a function in C can change its calling arguments.\n4. It reduces length of the program and its execution time as well.\n5. It allows C language to support Dynamic Memory management. \n"],"7":["File Handling in C","\n# File Handling\n\n![](https://i.ibb.co/8mYyZtS/file-handling.webp)\n\nA **file** represents a sequence of bytes on the disk where a group of related data is stored. File is created for permanent storage of data. It is a ready made structure.\n\n## Types of Files in C\n\nA file can be classified into two types based on the way the file stores the data. They are as follows:\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230503150409/Types-of-Files-in-C.webp)\n\n### 1. Text Files\n\nA text file contains data in the form of ASCII characters and is generally used to store a stream of characters.\n\n- Each line in a text file ends with a new line character (‘\\n’).\n- It can be read or written by any text editor.\n- They are generally stored with .txt file extension.\n- Text files can also be used to store the source code.\n\n### 2.Binary Files\n\nA binary file contains data in binary form (i.e. 0’s and 1’s) instead of ASCII characters. They contain data that is stored in a similar manner to how it is stored in the main memory.\n\n- The binary files can be created only from within a program and their contents can only be read by a program.\n- More secure as they are not easily readable.\n- They are generally stored with .bin file extension.\n\n## File Pointer in C\n\nIn C language, we use a structure **pointer of file type** to declare a file.\n\nA file pointer is a reference to a particular position in the opened file. It is used in file handling to perform all file operations such as read, write, close, etc. \n\nWe use the FILE macro to declare the file pointer variable. The FILE macro is defined inside <stdio.h> header file.\n\n**Syntax:**\n\n    FILE* pointer_name;\n\nFile Pointer is used in almost all the file operations in C. C provides a number of functions that helps to perform basic file operations. Following are the functions,\n\n| **Function** | **Description** |\n|---|---|\n| fopen() | create a new file or open a existing file |\n| fclose() | closes a file |\n| getc() | reads a character from a file |\n| putc() | writes a character to a file |\n| fscanf() | reads a set of data from a file |\n| fprintf() | writes a set of data to a file |\n| getw() | reads a integer from a file |\n| putw() | writes a integer to a file |\n| fseek() | set the position to desire point |\n| ftell() | gives current position in the file |\n| rewind() | set the position to the begining point |\n\n### Opening a File or Creating a File\n\nThe `fopen()` function is used to create a new file or to open an existing file.\n\n**General Syntax:**\n\n    *fp = FILE *fopen(const char *filename, const char *mode);\n\nHere, `*fp` is the FILE pointer (`FILE *fp`), which will hold the reference to the opened(or created) file.\n\n**filename** is the name of the file to be opened and **mode** specifies the purpose of opening the file. Mode can be of following types,\n\n| **Mode** | **Description** |\n|---|---|\n| r | opens a text file in reading mode |\n| w | opens or create a text file in writing mode. |\n| a | opens a text file in append mode |\n| r+ | opens a text file in both reading and writing mode |\n| w+ | opens a text file in both reading and writing mode |\n| a+ | opens a text file in both reading and writing mode |\n| rb | opens a binary file in reading mode |\n| wb | opens or create a binary file in writing mode |\n| ab | opens a binary file in append mode |\n| rb+ | opens a binary file in both reading and writing mode |\n| wb+ | opens a binary file in both reading and writing mode |\n| ab+ | opens a binary file in both reading and writing mode |\n\n### Closing a File\n\nThe `fclose()` function is used to close an already opened file.\n\n**General Syntax :**\n\n    int fclose( FILE *fp);\n\nHere `fclose()` function closes the file and returns **zero** on success, or **EOF** if there is an error in closing the file. This **EOF** is a constant defined in the header file **stdio.h**.\n\n### Input/Output operation on File\n\nIn the above table we have discussed about various file I/O functions to perform reading and writing on file. `getc()` and `putc()` are the simplest functions which can be used to read and write individual characters to a file.\n\n    #include<stdio.h>\n    \n    int main()\n    {\n        FILE *fp;\n        char ch;\n        fp = fopen(\"one.txt\", \"w\");\n        printf(\"Enter data...\");\n        while( (ch = getchar()) != EOF) {\n            putc(ch, fp);\n        }\n        fclose(fp);\n        fp = fopen(\"one.txt\", \"r\");\n      \n        while( (ch = getc(fp)! = EOF)\n        printf(\"%c\",ch);\n        \n        // closing the file pointer\n        fclose(fp);\n        \n        return 0;\n    }\n\n### Reading and Writing to File using `fprintf()` and `fscanf()`\n\n    #include<stdio.h>\n    \n    struct emp\n    {\n        char name[10];\n        int age;\n    };\n    \n    void main()\n    {\n        struct emp e;\n        FILE *p,*q;\n        p = fopen(\"one.txt\", \"a\");\n        q = fopen(\"one.txt\", \"r\");\n        printf(\"Enter Name and Age:\");\n        scanf(\"%s %d\", e.name, &e.age);\n        fprintf(p,\"%s %d\", e.name, e.age);\n        fclose(p);\n        do\n        {\n            fscanf(q,\"%s %d\", e.name, e.age);\n            printf(\"%s %d\", e.name, e.age);\n        }\n        while(!feof(q));\n    }\n\nIn this program, we have created two FILE pointers and both are refering to the same file but in different modes.\n\n`fprintf()` function directly writes into the file, while `fscanf()` reads from the file, which can then be printed on the console using standard `printf()` function.\n\n### Difference between Append and Write Mode\n\nWrite (w) mode and Append (a) mode, while opening a file are almost the same. Both are used to write in a file. In both the modes, new file is created if it doesn't exists already.\n\nThe only difference they have is, when you **open** a file in the **write** mode, the file is reset, resulting in deletion of any data already present in the file. While in **append** mode this will not happen. Append mode is used to append or add data to the existing data of file(if any). Hence, when you open a file in Append(a) mode, the cursor is positioned at the end of the present data in the file.\n\n### Reading and Writing in a Binary File\n\nA Binary file is similar to a text file, but it contains only large numerical data. The Opening modes are mentioned in the table for opening modes above.\n\n`fread()` and `fwrite()` functions are used to read and write is a binary file.\n\n```\nfwrite(data-element-to-be-written, size_of_elements, number_of_elements, pointer-to-file);\n```\n\n`fread()` is also used in the same way, with the same arguments like `fwrite()` function. Below mentioned is a simple example of writing into a binary file\n\n    const char *mytext = \"The quick brown fox jumps over the lazy dog\";   \n    FILE *bfp= fopen(\"test.txt\", \"wb\");   \n    if (bfp) \n    {     \n        fwrite(mytext, sizeof(char), strlen(mytext), bfp);     \n        fclose(bfp);   \n    }\n\n### `fseek()`, `ftell()` and `rewind()` functions\n\n* `fseek()`: It is used to move the reading control to different positions using fseek function.\n* `ftell()`: It tells the byte location of current position of cursor in file pointer.\n* `rewind()`: It moves the control to beginning of the file.\n"],"8":["Dynamic Memory Allocation","\n# Dynamic Memory Allocation\n\n![](https://i.ibb.co/PxxQ9WG/dma.webp)\n\nDynamic memory allocation in C allows programs to allocate memory dynamically during runtime. Unlike static memory allocation, where memory is allocated at compile time, dynamic memory allocation enables programs to request memory from the heap as needed. \n\nThis flexibility is especially useful when the amount of memory required is unknown at compile time or when memory needs to be allocated and deallocated dynamically during program execution.\n\n## Core Functions of Dynamic Memory Allocation\n- `malloc()`\n- `calloc()`\n- `free()`\n- `realloc()`\n\n### `malloc()`: Allocating Memory\n\n- Dynamic memory allocation is a key concept in the C programming language that enables developers to allocate and handle memory while a program runs. \n\n- Unlike static memory allocation, which happens during compilation and has a fixed memory size, dynamic memory allocation allows programs to ask the system for memory resources when necessary. \n\n- This dynamic nature of memory allocation enhances the flexibility and effectiveness of C programs.\n\n### `calloc()`: Contiguous Allocation\n\n- When you use the `malloc()` function to allocate memory, it does not initialize the content of the memory. However, if you use the `calloc()`,  which stands for \"contiguous allocation, \"it not only allocates memory for arrays of elements but also ensures that the memory is initialized to zero. \n\n- This Zero-initialization can be pretty handy when working with data structures or arrays that require a specific starting point. By specifying the size of each element and the number of elements needed, `calloc()` will give you a pointer to the first byte of the allocated memory block. \n\n### `free()`: Releasing Allocated Memory\n\n- When programs allocate memory dynamically, it's essential to release memory no longer needed to avoid memory leaks. The function known as free() serves this purpose. \n\n- Once you have finished using a block of dynamically allocated memory,  you can call free() and provide the pointer to that block as an argument. By doing so,  the memory is deallocated, freeing it up for future use. \n\n- Neglecting to release memory can result in a gradual depletion of available memory and, in the worst-case scenario,  can cause program crashes due to insufficient memory resources. \n\n### `realloc()`: Resizing Allocated Memory\n\n- Programs sometimes need to adjust their memory requirements as they run, which means they may need to resize memory blocks that have already been allocated. \n\n- With `realloc()`, you can pass in a pointer to an existing memory block and specify a new size, and it will attempt to resize the block while preserving the data inside. \n\n- If the resizing is successful, `realloc()` will return a pointer to the new memory location. However, if the attempt fails, It will return a NULL pointer, and the original memory block will remain unchanged.\n\n## How Dynamic Memory Allocation Works:\n\n### Allocating Memory\n\nPrograms use the `malloc()` function to dynamically allocate memory from the heap. This function takes the number of bytes to allocate as an argument and returns a pointer to the allocated memory block.\n\n    int *ptr = (int *)malloc(sizeof(int));\n\nIn this example, `malloc(sizeof(int))` allocates memory for an integer (`sizeof(int)` bytes) and returns a pointer to the allocated memory block, which is then assigned to `ptr`.\n\n### Checking for Allocation Success\n\nIt's important to check if the memory allocation was successful, as `malloc()` may return `NULL` if memory cannot be allocated (e.g., due to insufficient memory).\n\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        exit(1); // Terminate the program\n    }\n\nIf `ptr` is `NULL`, it indicates that memory allocation failed, and the program may terminate or handle the error appropriately.\n\n### Using the Allocated Memory \n\nOnce memory is allocated successfully, it can be used to store data or objects. Dereferencing the pointer allows access to the allocated memory location.\n\n    *ptr = 10;\n\nIn this example, the integer value `10` is stored in the memory location pointed to by `ptr`.\n\n### Deallocating Memory \n\nAfter the dynamically allocated memory is no longer needed, it should be deallocated to prevent memory leaks. Programs use the `free()` function to release dynamically allocated memory.\n\n    free(ptr);\n\nThis frees the memory block pointed to by `ptr`, allowing it to be reused for future allocations.\n\nHere's a complete code demonstrating dynamic memory allocation in C\n\n**Example:**\n\n\n    #include <stdio.h>\n    #include <stdlib.h> // Needed for malloc and free\n    \n    int main() {\n        int *ptr;\n    \n        // Allocate memory for an integer\n        ptr = (int *)malloc(sizeof(int));\n    \n        // Check if memory allocation was successful\n        if (ptr == NULL) {\n            printf(\"Memory allocation failed\\n\");\n            exit(1); // Terminate the program\n        }\n    \n        // Store value in the allocated memory\n        *ptr = 10;\n    \n        // Print the value\n        printf(\"Value stored at ptr: %d\\n\", *ptr);\n    \n        // Free the allocated memory\n        free(ptr);\n    \n        return 0;\n    }\n\n### Explanation:\n\nDynamic memory allocation in C provides flexibility in managing memory during program execution. By allocating memory from the heap, programs can adapt to varying memory requirements and efficiently utilize system resources.\n\n- **Memory Allocation**: Programs use `malloc()` to request memory from the heap, specifying the size of the memory block to allocate.\n  \n- **Error Handling**: It's important to check if memory allocation was successful to avoid undefined behavior. If `malloc()` returns `NULL`, it indicates memory allocation failure.\n  \n- **Memory Usage**: Dynamically allocated memory can be used to store data or objects as needed, providing a flexible mechanism for managing program data.\n  \n- **Memory Deallocation**: Once memory is no longer needed, it should be deallocated using `free()` to prevent memory leaks and ensure efficient memory usage.\n\nDynamic memory allocation is a powerful feature in C programming, enabling efficient memory management and dynamic resource utilization in a wide range of applications. \n\nHowever, it's important to use dynamic memory allocation responsibly and handle memory errors appropriately to ensure program reliability and stability.\n\n### Static vs Dynamic Memory Allocation\n\nStatic memory allocation consists of storing memory for variables and data structures at compile time. \n\nAlthough simple, this method lacks flexibility and could result in inefficient memory use if not handled carefully. \n\nOn the contrary, dynamic memory allocation allows developers to assign memory during runtime, adjusting to the specific memory demands of the program. \n\nThis adaptability becomes crucial when dealing with data structures of varying sizes or unforeseeable memory requirements. \n"],"9":["Structures in C","\n# Structures\n\n![](https://usemynotes.com/wp-content/uploads/2021/01/structures.jpg)\n\nStructure is a user-defined datatype in C language which allows us to combine data of different types together. \n\nStructure helps to construct a complex data type which is more meaningful. \n\nIt is somewhat similar to an Array, but an array holds data of similar type only. But structure on the other hand, can store data of any type, which is practical more useful.\n\n**For example:** If I have to write a program to store Student information, which will have Student's name, age, branch, permanent address, father's name etc, which included string values, integer values etc.\n\nHow can I use arrays for this problem?, I will require something which can hold data of different types together.\n\nIn structure, data is stored in form of **records**.\n\n### Defining a structure\n\n`struct` keyword is used to define a structure. it defines a new data type which is a collection of primary and derived data types.\n\n**Syntax:**\n\n    struct [structure_tag]\n    {\n        //member variable 1\n        //member variable 2\n        //member variable 3\n        ...\n    }[structure_variables];\n\nAs you can see in the syntax above, we start with the `struct` keyword, then it's optional to provide your structure a name, we suggest you to give it a name, then inside the curly braces, we have to mention all the member variables, which are nothing but normal C language variables of different types like `int`, `float`, `array` etc.\n\nAfter the closing curly brace, we can specify one or more structure variables, again this is optional.\n\n**Note:** The closing curly brace in the structure type declaration must be followed by a semicolon(`;`).\n\n### Example of Structure\n\n    struct Student\n    {\n        char name[25];\n        int age;\n        char branch[10];\n        // F for female and M for male\n        char gender;\n    };\n\nHere `struct Student` declares a structure to hold the details of a student which consists of 4 data fields, namely `name`, `age`, `branch` and `gender`. These fields are called **structure elements or members**.\n\nEach member can have different datatype, like in this case, `name` is an array of `char` type and `age` is of `int` type etc. **Student** is the name of the structure and is called as the **structure tag**.\n\n### Declaring Structure Variables\n\nIt is possible to declare variables of a **structure**, either along with structure definition or after the structure is defined. \n\n**Structure** variable declaration is similar to the declaration of any normal variable of any other datatype. \n\nStructure variables can be declared in following two ways:\n\n**1) Declaring Structure variables separately**\n\n    struct Student\n    {\n        char name[25];\n        int age;\n        char branch[10];\n        //F for female and M for male\n        char gender;\n    };\n    \n    struct Student S1, S2;      //declaring variables of struct Student\n\n**2) Declaring Structure variables with structure definition**\n\n    struct Student\n    {\n        char name[25];\n        int age;\n        char branch[10];\n        //F for female and M for male\n        char gender;\n    }S1, S2;\n\nHere `S1` and `S2` are variables of structure `Student`. \n\nHowever this approach is not much recommended.\n\n## Accessing Structure Members\n\nStructure members can be accessed and assigned values in a number of ways. \n\nStructure members have no meaning individually without the structure. \n\nIn order to assign a value to any structure member, the member name must be linked with the **structure** variable using a dot `.` operator also called **period** or **member access** operator.\n\n**Example:**\n\n    #include<stdio.h>\n    #include<string.h>\n    \n    struct Student\n    {\n        char name[25];\n        int age;\n        char branch[10];\n        //F for female and M for male\n        char gender;\n    };\n    \n    int main()\n    {\n        struct Student s1;\n        \n        /*\n            s1 is a variable of Student type and \n            age is a member of Student\n        */\n        s1.age = 18;\n        /*\n            using string function to add name\n        */\n        strcpy(s1.name, \"Viraaj\");\n        /*\n            displaying the stored values\n        */\n        printf(\"Name of Student 1: %s\\n\", s1.name);\n        printf(\"Age of Student 1: %d\\n\", s1.age);\n        \n        return 0;\n    }\n\nOutput:\n\n```\nName of Student 1: Viraaj \nAge of Student 1: 18\n```\n\nWe can also use `scanf()` to give values to structure members through terminal.\n\n```\nscanf(\" %s \", s1.name);\nscanf(\" %d \", &s1.age);\n```\n\n### Structure Initialization\n\nLike a variable of any other datatype, structure variable can also be initialized at compile time.\n\n    struct Patient\n    {\n        float height;\n        int weight;  \n        int age; \n    };\n    \n    struct Patient p1 = { 180.75 , 73, 23 };    //initialization\n\n###### or\n\n    struct Patient p1;\n    p1.height = 180.75;     //initialization of each member separately\n    p1.weight = 73;\n    p1.age = 23;\n\n### Array of Structure\n\nWe can also declare an array of **structure** variables. in which each element of the array will represent a **structure** variable. \n\n**Example :**\n\n    struct employee emp[5];\n\nThe below program defines an array `emp` of size 5. Each element of the array `emp` is of type `Employee`.\n\n    #include<stdio.h>\n    \n    struct Employee\n    {\n        char ename[10];\n        int sal;\n    };\n    \n    struct Employee emp[5];\n    int i, j;\n    void ask()\n    {\n        for(i = 0; i < 3; i++)\n        {\n            printf(\"\\nEnter %dst Employee record:\\n\", i+1);\n            printf(\"\\nEmployee name:\t\");\n            scanf(\"%s\", emp[i].ename);\n            printf(\"\\nEnter Salary:\t\");\n            scanf(\"%d\", &emp[i].sal);\n        }\n        printf(\"\\nDisplaying Employee record:\\n\");\n        for(i = 0; i < 3; i++)\n        {\n            printf(\"\\nEmployee name is %s\", emp[i].ename);\n            printf(\"\\nSlary is %d\", emp[i].sal);\n        }\n    }\n    void main()\n    {\n        ask();\n    }\n\n### Nested Structures\n\nNesting of structures, is also permitted in C language. \n\nNested structures means, that one structure has another stucture as member variable.\n\n**Example:**\n\n    struct Student\n    {\n        char[30] name;\n        int age;\n        /* here Address is a structure */\n        struct Address\n        {\n            char[50] locality;\n            char[50] city;\n            int pincode;\t\t\n        }addr;\n    };\n\n### Key aspects of using Structures ?\n\nStructures in C provide a way to group related variables together under a single name, enhancing code organization and readability. \n\nHere's a breakdown of key aspects of structures:\n\n- **Organization of Data**: Structures allow programmers to organize related data elements into a single unit, making it easier to manage and manipulate complex data.\n\n- **Modularity**: By encapsulating related variables within a structure, code becomes more modular and easier to maintain, as changes to the data structure can be localized.\n\n- **Abstraction**: Structures provide a level of abstraction by allowing programmers to define custom data types that represent real-world entities or concepts.\n\n- **Flexibility**: Structures can contain variables of different data types, enabling the creation of versatile data structures to suit various program requirements.  \n"],"10":["Introduction to Data Structures","\n# Introduction to Data Structures\n\n![](https://miro.medium.com/v2/1*xITVHeSmbnNNtq_IkmL9QQ.png)\n\nA data structure is a particular way of organising data in a computer so that it can be used effectively. \n\nThe idea is to reduce the space and time complexities of different tasks.\n\nThe choice of a good data structure makes it possible to perform a variety of critical operations effectively. \n\nAn efficient data structure also uses minimum memory space and execution time to process the structure. \n\nA data structure is not only used for organising the data. It is also used for processing, retrieving, and storing data. \n\nThere are different basic and advanced types of data structures that are used in almost every program or software system that has been developed. \n\nSo we must have good knowledge of data structures.\n\n## Need Of Data Structure:\n\nThe structure of the data and the synthesis of the algorithm are relative to each other. \n\nData presentation must be easy to understand so the developer, as well as the user, can make an efficient implementation of the operation. \n\nData structures provide an easy way of organising, retrieving, managing, and storing data.\n\nHere is a list of the needs for data.\n\n* Data structure modification is easy.\n* It requires less time.\n* Save storage memory space.\n* Data representation is easy.\n* Easy access to the large database\n\n## Types of Data Structures :\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20220520182504/ClassificationofDataStructure-660x347.jpg)\n\n### Linear Data Structure\n\n* Elements are arranged in one dimension ,also known as linear dimension.\n* Example: lists, stack, queue, etc.\n\n### Non-Linear Data Structure\n\n* Elements are arranged in one-many, many-one and many-many dimensions.\n* Example: tree, graph, table, etc.\n\n## Most Popular Data Structures:\n\n### 1. Array\nAn array is a collection of data items stored at contiguous memory locations. \n\nThe idea is to store multiple items of the same type together. \n\nThis makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230302092653/C-array-initialization.png)\n\n### 2. Linked List\n\nLike arrays, Linked List is a linear data structure. \n\nUnlike arrays, linked list elements are not stored at a contiguous location; the elements are linked using pointers.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20220816144425/LLdrawio.png)\n\n### 3. Stack\n\nStack is a linear data structure which follows a particular order in which the operations are performed. \n\nThe order may be LIFO(Last In First Out) or FILO(First In Last Out).\n\nIn stack, all insertion and deletion are permitted at only one end of the list.\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20221219100314/stack.drawio2.png)\n\n##### Stack Operations :\n\n* `push()`: When this operation is performed, an element is inserted into the stack.\n* `pop()`: When this operation is performed, an element is removed from the top of the stack and is returned.\n* `top()`: This operation will return the last inserted element that is at the top without removing it.\n* `size()`: This operation will return the size of the stack i.e. the total number of elements present in the stack.\n* `isEmpty()`: This operation indicates whether the stack is empty or not.\n\n### 4. Queue\n\nLike Stack, Queue is a linear structure which follows a particular order in which the operations are performed. \n\nThe order is First In First Out (FIFO). \n\nIn the queue, items are inserted at one end and deleted from the other end. \n\nA good example of the queue is any queue of consumers for a resource where the consumer that came first is served first. \n\nThe difference between stacks and queues is in removing. \n\nIn a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20221213113312/Queue-Data-Structures.png)\n\n#### Queue Operations :\n\n* `enqueue()`: Adds (or stores) an element to the end of the queue..\n* `dequeue()`: Removal of elements from the queue.\n* `peek()` or `front()`: Acquires the data element available at the front node of the queue without deleting it.\n* `rear()`: This operation returns the element at the rear end without removing it.\n* `isFull()`: Validates if the queue is full.\n* `isNull()`: Checks if the queue is empty.\n\n### 5. Binary Trees\n\nUnlike Arrays, Linked Lists, Stack and queues, which are linear data structures, trees are hierarchical data structures. A binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child. It is implemented mainly using Links.\n\nA Binary Tree is represented by a pointer to the topmost node in the tree. If the tree is empty, then the value of root is NULL. A Binary Tree node contains the following parts.\n\n1. Data  \n2. Pointer to left child  \n3. Pointer to the right child\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20221124174432/binary.png)\n\n\n### 6. Binary Search Tree\n\nA Binary Search Tree is a Binary Tree following the additional properties:\n\n* The left part of the root node contains keys less than the root node key.\n* The right part of the root node contains keys greater than the root node key.\n* There is no duplicate key present in the binary tree.\n\nA Binary tree having the following properties is known as Binary search tree (BST).\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20221215114732/bst-21.png)\n\n### 7. Heap\n\nA Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types:\n\n* **Max-Heap:** In a Max-Heap the key present at the root node must be greatest among the keys present at all of its children. The same property must be recursively true for all sub-trees in that Binary Tree.\n* **Min-Heap:** In a Min-Heap the key present at the root node must be minimum among the keys present at all of its children. The same property must be recursively true for all sub-trees in that Binary Tree.\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20221220165711/MinHeapAndMaxHeap1.png)\n\n### 8. Hashing Data Structure\n\nHashing is an important Data Structure which is designed to use a special function called the Hash function which is used to map a given value with a particular key for faster access of elements. \n\nThe efficiency of mapping depends on the efficiency of the hash function used.\n\nLet a hash function `H(x)` maps the value `x` at the index `x%10` in an Array. \n\nFor example, if the list of values is `[11, 12, 13, 14, 15]` it will be stored at positions `{1, 2, 3, 4, 5}` in the array or Hash table respectively.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20220701080941/ComponentsofHashing-660x342.png)\n\n### 9. Matrix\n\nA matrix represents a collection of numbers arranged in an order of rows and columns. \n\nIt is necessary to enclose the elements of a matrix in parentheses or brackets.\n\nA matrix with 9 elements is shown below.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20221010013158/2Darray.png)\n\n### 10. Trie\n\nTrie is an efficient information retrieval data structure. \n\nUsing Trie, search complexities can be brought to an optimal limit (key length). \n\nIf we store keys in the binary search tree, a well-balanced BST will need time proportional to `M * log N`, where `M` is maximum string length and `N` is the number of keys in the tree. \n\nUsing Trie, we can search the key in O(M) time. However, the penalty is on Trie storage requirements.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20220828232752/Triedatastructure1.png)\n\n### Applications of Data Structures :\n\nData structures are used in various fields such as:\n\n* Operating system\n* Graphics\n* Computer Design\n* Blockchain\n* Genetics\n* Image Processing\n* Simulation,\n* etc. \n"]},"C++":{"1":["Introduction to C++","\n# Introduction to C++\n\n![](https://miro.medium.com/v2/resize:fit:1200/1*oFfl-1UKLtd8XOswpwgriA.png)\n\nC++ is a high-level programming language developed by Bjarne Stroustrup in the late 1970s at Bell Labs. \n\nIt is an extension of the C programming language with additional features such as classes, objects, inheritance, polymorphism, templates, and exception handling. \n\nC++ is widely used in developing system/application software, game development, embedded systems, and much more.\n\n## Key Features of C++:\n\n1. **Object-Oriented Programming (OOP)**: C++ supports object-oriented programming paradigms, allowing for the creation of classes and objects to model real-world entities and relationships.\n\n2. **Classes and Objects**: Classes provide a blueprint for creating objects, which are instances of classes. They encapsulate data and behavior into a single unit.\n\n3. **Inheritance**: C++ supports inheritance, allowing classes to inherit properties and behaviors from other classes. This promotes code reuse and facilitates hierarchical relationships among classes.\n\n4. **Polymorphism**: C++ supports polymorphism, where objects of different types can be treated as objects of a common base type. This enables dynamic method binding and facilitates code flexibility and extensibility.\n\n5. **Templates**: C++ templates allow for generic programming, enabling the creation of functions and classes that can work with any data type. This promotes code reusability and flexibility.\n\n6. **Standard Template Library (STL)**: The STL provides a collection of reusable data structures (such as vectors, lists, maps) and algorithms (such as sorting, searching) that enhance productivity and efficiency in C++ programming.\n\n## Let's write Hello World!:\n\nHere's a simple \"Hello, World!\" program in C++:\n\n    #include <iostream>\n    \n    int main() {\n        // Output \"Hello, World!\" to the console\n        std::cout << \"Hello, World!\" << std::endl;\n        return 0;\n    }\n\n### How this works ?\n\n    #include <iostream>\n\nThis line includes the standard input/output stream library (`iostream`) in the program, which provides functionality for input and output operations.\n\n    int main() { ... }\n\nThis defines the `main()` function, which serves as the entry point of the program. Execution of the program begins from here.\n\n    std::cout << \"Hello, World!\" << std::endl;\n\nThis line uses the `std::cout` object to output the string \"Hello, World!\" to the standard output (usually the console). The `<<` operator is used for output, and `std::endl` is used to insert a newline character.\n\n    return 0;\n\nThe `return` statement exits the `main()` function and returns the value `0` to the operating system, indicating successful execution of the program.\n\n## Benefits of C++ over C Language\n\nThe major difference being OOPS concept, C++ is an object oriented language whereas C is a procedural language. Apart form this there are many other features of C++ which gives this language an upper hand on C laguage.\n\nFollowing features of C++ makes it a stronger language than C,\n\n1. There is Stronger Type Checking in C++.\n2. All the OOPS features in C++ like Abstraction, Encapsulation, Inheritance etc makes it more worthy and useful for programmers.\n3. C++ supports and allows user defined operators (i.e Operator Overloading) and function overloading is also supported in it.\n4. Exception Handling is there in C++.\n5. The Concept of Virtual functions and also Constructors and Destructors for Objects.\n6. Inline Functions in C++ instead of Macros in C language. Inline functions make complete function body act like Macro, safely.\n7. Variables can be declared anywhere in the program in C++, but must be declared before they are used.\n"],"2":["Introduction to OOPs","\n# Introduction to OOPs\n\n![](https://www.boardinfinity.com/blog/content/images/2023/01/oops-1.png)\n\nThe major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.\n\nObject Oriented Programming is a paradigm that provides many concepts such as **inheritance, data binding, polymorphism etc.**\n\nThe programming paradigm where everything is represented as an object is known as truly object-oriented programming language. **Smalltalk** is considered as the first truly object-oriented programming language.\n\n## OOPs (Object Oriented Programming System)\n\n**Object** means a real word entity such as pen, chair, table etc. **Object-Oriented Programming** is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:\n\n![Cpp Oops concept 1](https://static.javatpoint.com/cpp/images/oops-concept1.png)\n\n* Object\n* Class\n* Inheritance\n* Polymorphism\n* Abstraction\n* Encapsulation\n\n## Object\n\nAny entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike etc. It can be physical and logical.\n\n## Class\n\n**Collection of objects** is called class. It is a logical entity.\n\nA Class in C++ is the foundational element that leads to Object-Oriented programming. \n\nA class instance must be created in order to access and use the user-defined data type's data members and member functions. An object's class acts as its blueprint. \n\nTake the class of cars as an example. \n\n![](https://miro.medium.com/v2/resize:fit:1400/1*CM0Jy_kA06FwPx0O432RxA.png)\n\nEven if different names and brands may be used for different cars, all of them will have some characteristics in common, such as four wheels, a speed limit, a range of miles, etc. In this case, the class of car is represented by the wheels, the speed limitations, and the mileage.\n\n## Inheritance\n\n**When one object acquires all the properties and behaviours of parent object** i.e. known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.\n\n1. Sub class - Subclass or Derived Class refers to a class that receives properties from another class.\n2. Super class - The term \"Base Class\" or \"Super Class\" refers to the class from which a subclass inherits its properties.\n3. Reusability - As a result, when we wish to create a new class, but an existing class already contains some of the code we need, we can generate our new class from the old class thanks to inheritance. This allows us to utilize the fields and methods of the pre-existing class.\n\n## Polymorphism\n\nWhen **one task is performed by different ways** i.e. known as polymorphism. For example: to convince the customer differently, to draw something e.g. shape or rectangle etc.\n\nDifferent situations may cause an operation to behave differently. The type of data utilized in the operation determines the behavior.\n\n## Abstraction\n\n**Hiding internal details and showing functionality** is known as abstraction. Data abstraction is the process of exposing to the outside world only the information that is absolutely necessary while concealing implementation or background information.For example: phone call, we don't know the internal processing.\n\nIn C++, we use abstract class and interface to achieve abstraction.\n\n## Encapsulation\n\n![](https://logicmojo.com/assets/dist/new_pages/images/encapsulation-image.jpg)\n\n**Binding (or wrapping) code and data together into a single unit is known as encapsulation.** For example: capsule, it is wrapped with different medicines.\n\nEncapsulation is typically understood as the grouping of related pieces of information and data into a single entity. Encapsulation is the process of tying together data and the functions that work with it in object-oriented programming. \n\n**Dynamic Binding -** In dynamic binding, a decision is made at runtime regarding the code that will be run in response to a function call. For this, C++ supports virtual functions.\n\n### Advantage of OOPs over Procedure-oriented programming language\n\n1. OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grows.\n2. OOPs provide data hiding whereas in Procedure-oriented programming language a global data can be accessed from anywhere.\n3. OOPs provide ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.\n\n## Why do we need oops in C++?\n\nThere were various drawbacks to the early methods of programming, as well as poor performance. The approach couldn't effectively address real-world issues since, similar to procedural-oriented programming, you couldn't reuse the code within the program again, there was a difficulty with global data access, and so on.\n\nWith the use of classes and objects, object-oriented programming makes code maintenance simple. Because inheritance allows for code reuse, the program is simpler because you don't have to write the same code repeatedly. Data hiding is also provided by ideas like encapsulation and abstraction.\n\n## Why is C++ a partial OOP ?\n\nThe object-oriented features of the C language were the primary motivation behind the construction of the C++ language.\n\nThe C++ programming language is categorized as a partial object-oriented programming language despite the fact that it supports OOP concepts, including classes, objects, inheritance, encapsulation, abstraction, and polymorphism.\n\n1) The main function must always be outside the class in C++ and is required. This means that we may do without classes and objects and have a single main function in the application.\n\nIt is expressed as an object in this case, which is the first time Pure OOP has been violated.\n\n2) Global variables are a feature of the C++ programming language that can be accessed by any other object within the program and are defined outside of it. Encapsulation is broken here. Even though C++ encourages encapsulation for classes and objects, it ignores it for global variables.\n\n## Overloading\n\nPolymorphism also has a subset known as overloading. An existing operator or function is said to be overloaded when it is forced to operate on a new data type.\n\n## Conclusion\n\nYou will have gained an understanding of the need for object-oriented programming, what C++ OOPs are, and the fundamentals of OOPs, such as polymorphism, inheritance, encapsulation, etc., after reading this course on OOPS Concepts in C++. \n\nAlong with instances of polymorphism and inheritance, you also learned about the benefits of C++ OOPs.\n\nIn the next lesson we will learn about Classes and Objects in C++.\n"],"3":["Classes and Objects in C++","\n# Classes and Objects in C++\n\n![](https://miro.medium.com/v2/1*rwM9E2CTiUmTK1Fu2vj2Bg.jpeg)\n\n**Class in C++** is the building block that leads to Object-Oriented programming. \n\nIt is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. \n\nA C++ class is like a blueprint for an object. For Example: Consider the Class of **Cars**. There may be many cars with different names and brands but all of them will share some common properties like all of them will have 4 wheels, Speed Limit, Mileage range, etc. \n\nSo here, Car is the class, and wheels, speed limits, and mileage are their properties.\n\n* A Class is a user-defined data type that has data members and member functions.\n* Data members are the data variables and member functions are the functions used to manipulate these variables together, these data members and member functions define the properties and behavior of the objects in a Class.\n* In the above example of class Car, the data member will be speed limit, mileage, etc, and member functions can be applying brakes, increasing speed, etc.\n\nAn **Object** is an instance of a Class. When a class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated.\n\n## Defining Class\n\nA class is defined in C++ using the keyword class followed by the name of the class. The body of the class is defined inside the curly brackets and terminated by a semicolon at the end.\n\n![C++ Class and Object](https://media.geeksforgeeks.org/wp-content/cdn-uploads/Classes-and-Objects-in-C.png)\n\n## Declaring Objects\n\nWhen a class is defined, only the specification for the object is defined; no memory or storage is allocated. To use the data and access functions defined in the class, you need to create objects.\n\n### **Syntax**\n\n```\nClassName ObjectName;\n```\n\n## Overview of Accessing data members and functions:\n\nThe data members and member functions of the class can be accessed using the dot(‘.’) operator with the object. \n\nFor example, if the name of the object is obj and you want to access the member function with the name printName() then you will have to write obj.printName().\n\n## Accessing Data Members\n\nThe public data members are also accessed in the same way given however the private data members are not allowed to be accessed directly by the object. \n\nAccessing a data member depends solely on the access control of that data member. This access control is given by Access modifiers in C++. There are three access modifiers: **public, private, and protected**.\n\n    // C++ program to demonstrate accessing of data members \n    #include <bits/stdc++.h> \n    using namespace std; \n    class Students { \n      // Access specifier \n    public: \n      // Data Members \n      string studentname; \n      // Member Functions() \n      void printname() { cout << \"Student Name is:\" << studentname; } \n    }; \n    int main() \n    { \n      // Declare an object of class Students \n      Students obj1; \n      // accessing data member \n      obj1.studentname = \"John\"; \n      // accessing member function \n      obj1.printname(); \n      return 0; \n    }\n\n**Output**\n\n```\nStudent Name is: John\n```\n\n## Member Functions in Classes\n\n**There are 2 ways to define a member function:**\n\n* Inside class definition\n* Outside class definition\n\nTo define a member function outside the class definition we have to use the **scope resolution:: operator** along with the class name and function name.\n\n    // C++ program to demonstrate function \n    // declaration outside class \n    #include <bits/stdc++.h> \n    using namespace std; \n    class Students \n    { \n      public: \n      string studentname; \n      int id; \n      \n      // printname is not defined inside class definition \n      void printname(); \n      \n      // printid is defined inside class definition \n      void printid() \n      { \n        cout <<\"Student id is: \"<<id; \n      } \n    }; \n\n    // Definition of printname using scope resolution operator :: \n    void Students::printname() \n    { \n      cout <<\"Student Name is: \"<<studentname; \n    } \n    int main() { \n      \n      Students obj1; \n      obj1.studentname = \"xyz\"; \n      obj1.id=15; \n      \n      // call printname() \n      obj1.printname(); \n      cout << endl; \n      \n      // call printid() \n      obj1.printid(); \n      return 0; \n    } \n\n**Output**\n\n```\nStudent Name is: xyz\nStudent id is: 15\n```\n\nNote that all the member functions defined inside the class definition are by default **inline**, but you can also make any non-class function inline by using the keyword inline with them. \n\nInline functions are actual functions, which are copied everywhere during compilation, like pre-processor macro, so the overhead of function calls is reduced.\n\n**Note:** Declaring a friend function is a way to give private access to a non-member function.\n\n## Constructors\n\nConstructors are special class members which are called by the compiler every time an object of that class is instantiated. \n\nConstructors have the same name as the class and may be defined inside or outside the class definition. There are 3 types of constructors:\n\n* Default Constructors\n* Parameterized Constructors\n* Copy Constructors\n\n**Example:**\n\n    // C++ program to demonstrate constructors \n    #include <bits/stdc++.h> \n    using namespace std; \n    class Students \n    { \n      public: \n      int id; \n      \n      //Default Constructor \n      Students() \n      { \n        cout << \"Default Constructor called\" << endl; \n        id=-1; \n      } \n      \n      //Parameterized Constructor \n      Students(int x) \n      { \n        cout <<\"Parameterized Constructor called \"<< endl; \n        id=x; \n      } \n    }; \n    int main() { \n      \n      // obj1 will call Default Constructor \n      Students obj1; \n      cout <<\"Student id is: \"<<obj1.id << endl; \n      \n      // obj2 will call Parameterized Constructor \n      Students obj2(21); \n      cout <<\"Student id is: \" <<obj2.id << endl; \n      return 0; \n    } \n\n**Output**\n\n```\nDefault Constructor called\nStudent id is: -1\nParameterized Constructor called \nStudent id is: 21\n```\n\nA **Copy Constructor** creates a new object, which is an exact copy of the existing object. The compiler provides a default Copy Constructor to all the classes.\n\n**Syntax:**\n\n```\nclass-name (class-name &){}\n```\n\n## Destructors\n\nDestructor is another special member function that is called by the compiler when the scope of the object ends.\n\n    // C++ program to explain destructors \n    #include <bits/stdc++.h> \n    using namespace std; \n    class Students \n    { \n      public: \n      int id; \n      \n      //Definition for Destructor \n      ~Students() \n      { \n        cout << \"Destructor called for id: \" << id <<endl; \n      } \n    }; \n\n    int main() \n    { \n      Students obj1; \n      obj1.id=7; \n      int i = 0; \n      while ( i < 5 ) \n      { \n        Students obj2; \n        obj2.id=i; \n        i++;\t\t \n      } // Scope for obj2 ends here \n\n      return 0; \n    } // Scope for obj1 ends here \n\n\n**Output**\n\n```\nDestructor called for id: 0\nDestructor called for id: 1\nDestructor called for id: 2\nDestructor called for id: 3\nDestructor called for id: 4\nDestructor called for id: 7\n```\n"],"4":["Inheritance and Polymorphism","\n# Inheritance and Polymorphism\n\n![](https://teacherdada.com/blog/wp-content/uploads/2022/11/inheritance-in-oop.png)\n\nInheritance is a basic object-oriented programming (OOP) concept in C++ that allows one class to inherit the attributes and functions of another. \n\nThis means that the derived class can use all of the base class's members as well as add its own. Because it reduces the need to duplicate code for comparable classes, inheritance promotes code reusability and maintainability.\n\n## Example of Inheritance in C++\n\n    #include <iostream>\n    class Animal {\n    public:\n      void eat() {\n        std::cout << \"Animal is eating.\" << std::endl;\n      }\n    };\n    class Dog : public Animal {\n    public:\n      void bark() {\n        std::cout << \"Dog is barking.\" << std::endl;\n      }\n    };\n    int main() {\n      Dog dog;\n      dog.eat(); // Animal is eating.\n      dog.bark(); // Dog is barking.\n      return 0;\n    }\n\nThe Dog class in this example derives from the Animal class. \n\nThis means that the Dog class includes all of the members of the Animal class, as well as any extra members defined by it. \n\nThe Dog class defines an additional member method called bark() in this situation.\n\nThe main() function creates a Dog class object and calls its eat() and bark() member functions.\n\n#### Output\n\n```\nAnimal is eating.\nDog is barking.\n```\n\n### Why use inheritance in C++?\n\n* By allowing you to inherit common members from a base class into derived classes, inheritance increases code reusability.\n* This eliminates the need for duplicating code and reduces the total coding effort.\n* Inheritance aids in the hierarchical organization of code by reflecting the links between various classes.\n* This improves the readability and maintainability of the code.\n* Inheritance is the foundation for polymorphism, allowing objects of different classes to respond to the same method calls in different ways.\n* This increases C++ object-oriented program flexibility and extension.\n\n### When to use inheritance in C++\n\n* **When you have a class hierarchy:** If you have a group of related classes, and there is a considerable amount of code that is shared by all of them, then inheritance is an acceptable option.\n* **When you want to construct polymorphic classes:** Inheritance is an excellent choice if you want to create classes that can respond to the same message in multiple ways.\n* **When you need to organize your code:** If you wish to organize your code more logically and understandably, inheritance might be a useful concept.\n\n## Types of Inheritance Classes:\n\nThere are two types of Inheritance Classes in C++:\n\n1. Base Class\n2. Derived Class\n\n### 1. Derived Class\n\nA derived class inherits the base class's properties and methods. The derived class can inherit all of the base class's attributes and methods or only a subset of them. The derived class may additionally include its own set of properties and methods.\n\n### 2. Base Class\n\nA base class is one that other classes inherit from. The base class defines the attributes and methods that its derived classes inherit. In addition, the base class can specify its properties and methods.\n\n### Example of Inheritance Classes\n\n    #include <iostream>\n    class Shape {\n    public:\n      virtual void draw() = 0;\n    };\n    class Circle : public Shape {\n    public:\n      Circle(int radius) : radius(radius) {}\n      void draw() override {\n      std::cout << \"Drawing a circle with radius \" << radius << std::endl;\n      }\n    private:\n      int radius;\n    };\n    class Rectangle : public Shape {\n    public:\n      Rectangle(int width, int height) : width(width), height(height) {}\n      void draw() override {\n      std::cout << \"Drawing a rectangle with width \" << width << \" and height \" << height << std::endl;\n      }\n    private:\n      int width;\n      int height;\n    };\n    int main() {\n      Circle circle(5);\n      Rectangle rectangle(10, 20);\n      circle.draw();\n      rectangle.draw();\n      return 0;\n    }\n\nThis example demonstrates inheritance in C++ by creating a base class called Shape and two derived classes, Circle and Rectangle. \n\nThe Shape class defines a pure virtual function called draw(), which forces derived classes to provide their implementation of the function. Both the Circle and Rectangle classes implement the draw() function to draw their respective shapes. \n\nThe main() function creates instances of Circle and Rectangle and calls their draw() functions to display the shapes.\n\n#### Output\n\n```\nDrawing a circle with radius 5\nDrawing a rectangle with width 10 and height 20\n```\n\n## Access Modes of Inheritance\n\nThere are three Access Modes of Inheritance in C++\n\n### 1. Public Mode\n\nWhen we derive a subclass from a public base class. Then the base class's public members become public in the derived class, and the base class's protected members become protected in the derived class.\n\n### 2. Protected Mode\n\nWhen a subclass is derived from a Protected base class. Then, in the derived class, both public and protected members of the base class will be protected.\n\n### 3. Private Mode\n\nWhen a subclass is derived from a Private base class. The base class's public and protected members will then become Private in the derived class.\n\n## C++ protected Members\n\n* Protected members are a sort of access specifier in C++ that regulates the accessibility of class members.\n* Protected members can be accessed from within the class, as well as from any derived classes and friend functions in C++.\n* They are, however, inaccessible from outside the class or from any other classes that are not inherited from it.\n\n**Here is a table summarising protected members' accessibility:**\n\n| Mode | Description |\n|---|---|\n| **r** | opens a text file in reading mode |\n| **w** | opens or create a text file in writing mode. |\n| **a** | opens a text file in append mode |\n| **r+** | opens a text file in both reading and writing mode |\n| **w+** | opens a text file in both reading and writing mode |\n| **a+** | opens a text file in both reading and writing mode |\n| **rb** | opens a binary file in reading mode |\n| **wb** | opens or create a binary file in writing mode |\n| **ab** | opens a binary file in append mode |\n| **rb+** | opens a binary file in both reading and writing mode |\n| **wb+** | opens a binary file in both reading and writing mode |\n| **ab+** | opens a binary file in both reading and writing mode |\n\n\n### Example of C++ Protected Members\n\n    #include <iostream>\n    class Base {\n    protected:\n      int data;\n    public:\n      Base(int data) {\n      this->data = data;\n      }\n      int getData() {\n      return data;\n      }\n    };\n    class Derived : public Base {\n    public:\n      Derived(int data) : Base(data) {}\n      int getDerivedData() {\n      return data * 2;\n      }\n    };\n    int main() {\n      Base base(10);\n      Derived derived(20);\n      // Output: 10\n      std::cout << base.getData() << std::endl;\n      // Output: 20\n      std::cout << derived.getData() << std::endl;\n      // Output: 40\n      std::cout << derived.getDerivedData() << std::endl;\n      return 0;\n    } \n\nIn this example, the Base class's data member is protected, limiting access to the Base class, its derived classes, and friend methods of the Base class. \n\nThe data member is unreachable outside of these bounds. The Derived class receives access to the data member by inheriting from the Base class, allowing the getDerivedData() method to access and alter it. \n\nThis demonstrates how protected members can be accessed in a controlled manner within class hierarchies.\n\n#### Output\n\n```\n10\n20\n40\n```\n\n## Types of Inheritance in C++\n\n![](https://www.softwaretestinghelp.com/wp-content/qa/uploads/2019/06/types-of-inheritance1.png)\n\nC++ supports five main Types of Inheritance in C++\n\n1. **Single Inheritance:** A single inheritance occurs when a class inherits from only one parent class.\n2. **Multiple Inheritance:** Multiple Inheritance occurs when a class inherits from two or more parent classes.\n3. **Multilevel inheritance:** Multilevel inheritance occurs when one class inherits from another, which in turn inherits from another, and so on.\n4. **Hierarchical Inheritance:** Multiple classes inherit from a single-parent class in a hierarchical inheritance.\n5. **Hybrid Inheritance:** Multiple inheritance and multilevel inheritance are combined in hybrid inheritance.\n\n## Polymorphism\n\nIn C++, polymorphism refers to the ability of objects of different classes to be treated as objects of a common base class. \n\nPolymorphism allows for more flexible and generic programming, where the behavior of a function or object can vary depending on the type of data it operates on.\n\nA real-life example of polymorphism is a person who at the same time can have different characteristics. A man at the same time is a father, a husband, and an employee. \n\nPolymorphism is considered one of the important features of Object-Oriented Programming.\n\n## Types of Polymorphism\n\n- Compile-time Polymorphism\n- Runtime Polymorphism\n\n![](https://www.guru99.com/images/2/062920_1112_CPolymorphi2.png)\n\n## Compile-Time Polymorphism\n\nCompile-time polymorphism is also known as static polymorphism and it can be achieved using function overloading and operator overloading. \n\nIn this type of polymorphism, the decision about which function to execute is made at compile time based on the number and types of arguments passed to the function.\n\n## Runtime Polymorphism\n\nRuntime polymorphism is also known as dynamic polymorphism and it can be achieved using inheritance and virtual functions. \n\nIn this type of polymorphism, the decision about which function to execute is made at runtime based on the type of object pointed to by the base class pointer\n"],"5":["Standard Template Library (STL)","\n# Standard Template Library (STL)\n\n![](https://img-c.udemycdn.com/course/750x422/2602724_29b1_9.jpg)\n\nC++ is a general-purpose and flexible programming language that’s why you need a library to support the C++ language. \n\nC++ STL (standard template library) is a software library for the C++ language that provides a collection of templates representing containers, iterators, algorithms, and function objects. In this lesson, you will learn about C++ STL in detail.\n\n## Generic Programming\n\nYou can define generic programming as an approach that focuses on implementing, designing algorithms and data structures in a particular way such that there is no loss of efficiency. \n\nIt is a way of developing software that maximizes code reuse without compromising performance. An example of generic programming is STL(standard template library) which is a part of the standard library of C++.\n\n## What is STL ?\n\nSTL stands for Standard Template Library. Alexander Stepanov invented it in 1994, and later it was included in the standard library. The standard library consists of a set of algorithms and data structures that were originally part of the C++ Standard template library.\n\nSTL helps in storing and manipulating objects, and it makes the program reusable and robust.\n\nNow, understand the components of STL.\n\n## Components of STL\n\nSTL has four major components:\n\n* Containers\n* Iterators\n* Algorithms\n* Function objects\n\nSo, start with containers.\n\n### Containers\n\nIf you are dealing with many elements, then you need to use some sort of container. The container can be described as objects that are used to store the collection of data. It helps in recreating and implementing complex data structures efficiently.\n\nNow, containers are further classified into three categories:\n\n![](https://www.simplilearn.com/ice9/free_resources_article_thumb/C%2B%2B_STL_Example1.PNG)\n\n* Sequence containers: These are used to implement sequential data structures like a linked list, array, etc.\n* Associative containers: These are those containers in which each element has a value that is related to a key. They are used to implement sorted data structures, for example, set, multiset, map, etc.\n* Containers adapters: Container adapters can be defined as an interface used to provide functionality to the pre-existing containers.\n\n#### Sequence Container:\n\n* **Vectors**: Vectors can be defined as a dynamic array or an array with some additional features.\n\n**Syntax:**\n\n    vector<int> v;\n\n* **Deque**: Deque is also known as a double-ended queue that allows inserting and deleting from both ends; they are more efficient than vectors in case of insertion and deletion.\n\n**Syntax:**\n\n    deque<int> d;\n\n* **List**: List is also the sequential container and allows non-contiguous allocation. It allows insertion and deletion anywhere in the sequence.\n\n**Syntax:**\n\n    list<int> l;\n\n### Associative Container:\n\n* **Set**: It is an associative container that is used to store elements that are unique.\n\n**Syntax:**\n\n    set<int> s;\n\n* **Multiset**: This container is similar to that of the set container; the only difference is that it stores non-unique elements.\n\n**Syntax:**\n\n    multiset<int> m;\n\n* **Map**: Map container contains sets of key-value pairs where each key is associated with one value.\n\n**Syntax:**\n\n    map<int,int> mm;\n\nHere, the int is the key type, and the int is the value type.\n\n* **Multimap**: These containers also store key-value pairs, but unlike maps, they can have duplicate elements.\n\n**Syntax:**\n\n    multimap<int,int> mm1;\n\n### Container Adapter:\n\n* **Stack**: Stack follows the last-in, first-out(LIFO) approach that means new elements are added at the end and removed from that end only.\n* **Queue**: Queue follows the first-in, first-out(FIFO) approach, which means new elements are added from the end and removed from the front.\n\nExample:\n\n    #include<iostream>\n    #include <vector>\n    using namespace std;\n\n    int main() {\n      vector < int > v;\n\n      for (int i = 1; i <= 10; i++) {\n        v.push_back(i);\n      }\n      cout << \"Size : \" << v.size();\n\n      v.resize(7);\n\n      cout << \"\nAfter resizing it becomes :\" << v.size();\n\n      if (v.empty() == false) {\n        cout << \"\nNot empty\";\n      } else {\n        cout << \"\nVector is empty\";\n      } \n\n      cout << \"\nElements of vector : \";\n\n      for (auto it = v.begin(); it != v.end(); it++) {\n        cout << * it << \" \";\n      }\n\n      return 0;\n}\n\nIn the above example, you are using vector functions and some other functions to do some operations. After declaring the vector v, you add the elements inside the vector using the `push_back()` function and with the help of the loop. \n\nAfter that, you are displaying the size of the vector using the size() function. Now using the resize() function, you are resizing the vector size to 7.\n\nUsing the empty() function, you check if the vector is empty; if it’s false, then you will display not empty, and if it is not false, then you will display the vector is empty.\n\nAfter that, you display all the vector elements using a for loop and functions like begin() and end(), pointing to the first element and the last element, respectively.\n\n### Iterators\n\nIterators are used to access data in the containers, and it helps in traversing through elements of containers using its functions. \n\nThey can be incremented and decremented as per choice and help in the manipulation of data in the container.\n\nIterator functions are:\n\n* begin(): This function points the iterator to the first element of the container.\n* end(): This function points the iterator to the last element of the container.\n\nExample:\n\n    #include<iostream> \n    #include<iterator>\n    #include<vector>\n    using namespace std;\n\n    int main() {\n      vector<int> ar = { 1, 2, 3, 4, 5 };\n      vector<int>::iterator ptr;\n\n      cout << \"The vector elements are : \";\n      for (ptr = ar.begin(); ptr < ar.end(); ptr++) {\n        cout << *ptr << \" \";\n      }\n\n      return 0;\n    }\n\nIn the above example, you declare the vector using the initializer list and then declare iterator ptr to the vector.\n\nAfter that, you declare the vector elements using the iterator functions begin(), and end() functions inside the for loop.\n\n### Algorithms\n\nIn STL, different types of algorithms can be implemented with the help of iterators. Algorithms can be defined as functions applied to the containers and provide operation for the content of the container. for example : sort(), swap(), min(), max() etc.\n\nTypes of algorithms:\n\n* Modifying algorithms\n* Non-modifying algorithms\n* Sorting algorithms\n* Searching algorithms\n* Numeric algorithms\n\n![](https://www.simplilearn.com/ice9/free_resources_article_thumb/C%2B%2B_STL_Example11.PNG)\n\nExample:\n\n  #include<iostream> \n  using namespace std;\n\n  int main() {\n    int i = 7;\n    int j = 10;\n\n    cout<<\"Value of i: \"<<i<<endl;\n    cout<<\"Value of j: \"<<j<<endl;\n\n    swap(i, j);\n\n    cout << \"After swapping i: \" <<i << endl;\n    cout << \"After swapping j: \" <<j<< endl;\n\n    return 0;\n  }\n\nIn the above example, you have initialized the i and j variable with some values. And then, you have displayed those values; later, you have swapped those values using the swap() function.\n\n### Function Objects\n\nA function object is also known as a functor; it is an object of a class that provides a definition for the operator(). Suppose you have declared an object of some class, then you can use that object just like the function.\n\n**Example:**\n\n  #include <iostream>\n  using namespace std; \n  #include <string>\n\n  class C {\n    public:\n      void operator()(string str) {\n        cout << \"Hello\" << str << endl;\n      }\n  };\n\n  int main() {\n    C obj;\n\n    obj(\"World\"); \n    return 0;\n  }\n\nHere, you have class name C in which operator() is defined. Inside the main function, you have created the object obj and passed a string argument “World”. Here, you have used the object of the class instead of the function to pass the argument.\n\n## Conclusion\n\nAfter reading this lesson on STL, you would have understood the Standard template library and generic programming and all the components of STL in C++, like containers, iterators, algorithms, in detail. You also learned about function objects along with some examples.\n"],"6":["Exception Handling","\n# Exception Handling\n\n![](https://microblink.com/wp-content/uploads/2021/05/microblink-keeping-your-C-code-free-from-bugs-header.png)\n\nException Handling in C++ is a process to handle runtime errors. We perform exception handling so the normal flow of the application can be maintained even after runtime errors.\n\nIn C++, exception is an event or object which is thrown at runtime. All exceptions are derived from `std::exception` class. It is a runtime error which can be handled. \n\nIf we don't handle the exception, it prints exception message and terminates the program.\n\n## C++ Exception Classes\n\nIn C++ standard exceptions are defined in <exception> class that we can use inside our programs. The arrangement of parent-child class hierarchy is shown below\n\n![](https://static.javatpoint.com/cpp/images/cpp-exception-handling1.png)\n\nAll the exception classes in C++ are derived from std::exception class. Let's see the list of C++ common exception classes\n\n| Exception | Description |\n|---|---|\n| `std::exception` | It is an exception and parent class of all standard C++ exceptions. |\n| `std::logic_failure` | It is an exception that can be detected by reading a code. |\n| `std::runtime_error` | It is an exception that cannot be detected by reading a code. |\n| `std::bad_exception` | It is used to handle the unexpected exceptions in a c++ program. |\n| `std::bad_cast` | This exception is generally be thrown by `dynamic_cast`. |\n| `std::bad_typeid` | This exception is generally be thrown by typeid. |\n| `std::bad_alloc` | This exception is generally be thrown by new. |\n\n## C++ Exception Handling Keywords\n\nIt involves three main components: `try`, `catch`, and `throw`. \n\nLet's explore each of these components with in-depth explanations and examples:\n\n### 1. `try` Block:\n\nThe `try` block is used to enclose the code that may potentially throw an exception. It allows you to define a block of code where exceptions can occur and be caught.\n\n**Syntax:**\n\n    try {\n        // Code that may throw exceptions\n    } catch (ExceptionType1& e1) {\n        // Exception handling code for ExceptionType1\n    } catch (ExceptionType2& e2) {\n        // Exception handling code for ExceptionType2\n    } catch (...) {\n        // Catch all other exceptions\n    }\n\n- The `try` block contains the code that may throw exceptions.\n- Multiple `catch` blocks can follow a `try` block, each handling a specific type of exception.\n- The `catch` blocks catch and handle exceptions thrown within the `try` block.\n\n### 2. `catch` Blocks:\n\n`catch` blocks are used to catch and handle exceptions thrown within the corresponding `try` block. They allow you to handle different types of exceptions separately.\n\n**Syntax:**\n\n    catch (ExceptionType& e) {\n        // Exception handling code for ExceptionType\n    }\n\n- The `catch` keyword is followed by the type of exception to catch (`ExceptionType`).\n- The exception object (typically by reference) is used to provide additional information about the exception.\n- Multiple `catch` blocks can be used to handle different types of exceptions.\n\n### 3. `throw` Statement:\n\nThe `throw` statement is used to explicitly throw an exception within the program. It allows you to raise exceptions when unexpected conditions or errors occur.\n\n**Syntax:**\n\n    throw ExceptionType(arguments);\n\n- The `throw` keyword is followed by the type of exception to be thrown (`ExceptionType`).\n- Optionally, you can provide arguments to the exception constructor to initialize the exception object.\n\n**Example:**\n\nLet's consider an example where we divide two numbers and handle the division by zero exception using exception handling:\n\n    #include <iostream>\n    \n    double divide(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw std::runtime_error(\"Division by zero error\");\n        }\n        return static_cast<double>(numerator) / denominator;\n    }\n    \n    int main() {\n        int numerator, denominator;\n        std::cout << \"Enter numerator: \";\n        std::cin >> numerator;\n        std::cout << \"Enter denominator: \";\n        std::cin >> denominator;\n    \n        try {\n            double result = divide(numerator, denominator);\n            std::cout << \"Result of division: \" << result << std::endl;\n        } catch (const std::runtime_error& e) {\n            std::cerr << \"Error: \" << e.what() << std::endl;\n        }\n    \n        return 0;\n    }\n\n### Explanation:\n\n- The `divide()` function divides the numerator by the denominator and throws a `std::runtime_error` exception if the denominator is zero.\n- In the `main()` function, the division operation is wrapped in a `try` block.\n- If an exception is thrown during division, the corresponding `catch` block catches the exception and prints an error message.\n\n### Summary:\n\nException handling in C++ provides a structured approach to handle runtime errors and exceptional situations. \n\nBy using `try`, `catch`, and `throw`, you can write code that gracefully handles unexpected conditions, improving the robustness and reliability of your programs. \n\nIt is essential to use exception handling judiciously to handle errors effectively and maintain code readability and maintainability.\n"],"7":["File Handling in C++","\n# File handling in C++?\n\n![](https://www.linuxlinks.com/wp-content/uploads/2022/05/Transfer_Files41021.jpg)\n\nFiles store data permanently in a storage device. With file handling, the output from a program can be stored in a file. \n\nVarious operations can be performed on the data while in the file. A stream is an abstraction of a device where input/output operations are performed. \n\nYou can represent a stream as either a destination or a source of characters of indefinite length. This will be determined by their usage. C++ provides you with a library that comes with methods for file handling. Let us discuss it.\n\n## The fstream Library\n\nThe fstream library provides C++ programmers with three classes for working with files. These classes include:\n\n* **ofstream**– This class represents an output stream. It’s used for creating files and writing information to files.\n* **ifstream**– This class represents an input stream. It’s used for reading information from data files.\n* **fstream**– This class generally represents a file stream. It comes with ofstream/ifstream capabilities. This means it’s capable of creating files, writing to files, reading from data files.\n\nTo use the above classes of the fstream library, you must include it in your program as a header file. Of course, you will use the #include preprocessor directive. You must also include the iostream header file.\n\n## How to Open Files\n\nBefore performing any operation on a file, you must first open it. If you need to write to the file, open it using fstream or ofstream objects. If you only need to read from the file, open it using the ifstream object.\n\nThe three objects, that is, fstream, ofstream, and ifstream, have the open() function defined in them. The function takes this syntax:\n\n```\nopen (file_name, mode);\n```\n\n* The `file_name` parameter denotes the name of the file to open.\n* The mode parameter is optional. It can take any of the following values:\n\n| Value | Description |\n|---|---|\n| ios:: app | The Append mode. The output sent to the file is appended to it. |\n| ios::ate | It opens the file for the output then moves the read and write control to file’s end. |\n| ios::in | It opens the file for a read. |\n| ios::out | It opens the file for a write. |\n| ios::trunc | If a file exists, the file elements should be truncated prior to its opening. |\n\n### Example 1:\n\n    #include <iostream>\n    #include <fstream>\n    using namespace std;\n    int main() {\n        fstream my_file;\n        my_file.open(\"my_file\", ios::out);\n        if (!my_file) {\n            cout << \"File not created!\";\n        }\n        else {\n            cout << \"File created successfully!\";\n            my_file.close(); \n        }\n        return 0;\n    }\n\n**Output:**\n\n```\nFile created successfully!\n```\n\n### Code Explanation\n\n1. Include the iostream header file in the program to use its functions.\n2. Include the fstream header file in the program to use its classes.\n3. Include the std namespace in our code to use its classes without calling it.\n4. Call the main() function. The program logic should go within its body.\n5. Create an object of the fstream class and give it the name `my_file`.\n6. Apply the open() function on the above object to create a new file. The out mode allows us to write into the file.\n7. Use if statement to check whether file creation failed.\n8. Message to print on the console if the file was not created.\n9. End of the body of if statement.\n10. Use an else statement to state what to do if the file was created.\n11. Message to print on the console if the file was created.\n12. Apply the close() function on the object to close the file.\n13. End of the body of the else statement.\n14. The program must return value if it completes successfully.\n15. End of the main() function body.\n\n## How to Close Files\n\nOnce a C++ program terminates, it automatically\n\n* flushes the streams\n* releases the allocated memory\n* closes opened files.\n\nHowever, as a programmer, you should learn to close open files before the program terminates.\n\nThe fstream, ofstream, and ifstream objects have the close() function for closing files. The function takes this syntax:\n\n```\nvoid close();\n```\n\n## How to Write to Files\n\nYou can write to file right from your C++ program. You use stream insertion operator (`<<`) for this. The text to be written to the file should be enclosed within double-quotes.\n\nLet us demonstrate this.\n\n### Example 2:\n\n    #include <iostream>\n    #include <fstream>\n    using namespace std;\n    int main() {\n        fstream my_file;\n        my_file.open(\"my_file.txt\", ios::out);\n        if (!my_file) {\n            cout << \"File not created!\";\n        }\n        else {\n            cout << \"File created successfully!\";\n            my_file << \"Guru99\";\n            my_file.close();\n        }\n        return 0;\n    }\n\n**Output:**\n\n```\nFile created successfully!\n```\n\nHere is a screenshot of the code:\n\n![How to Write to Files](https://www.guru99.com/images/2/100520_1107_CFileHandli5.png)\n\n### Code Explanation\n\n1. Include the iostream header file in the program to use its functions.\n2. Include the fstream header file in the program to use its classes.\n3. Include the std namespace in the program to use its classes without calling it.\n4. Call the main() function. The program logic should be added within the body of this function.\n5. Create an instance of the fstream class and give it the name `my_file`.\n6. Use the open() function to create a new file named `my_file.txt`. The file will be opened in the out mode for writing into it.\n7. Use an if statement to check whether the file has not been opened.\n8. Text to print on the console if the file is not opened.\n9. End of the body of the if statement.\n10. Use an else statement to state what to do if the file was created.\n11. Text to print on the console if the file was created.\n12. Write some text to the created file.\n13. Use the close() function to close the file.\n14. End of the body of the else statement.\n15. The program must return value upon successful completion.\n16. End of the body of the main() function.\n\n## How to Read from Files\n\nYou can read information from files into your C++ program. This is possible using stream extraction operator (>>). You use the operator in the same way you use it to read user input from the keyboard. \n\nHowever, instead of using the cin object, you use the ifstream/ fstream object.\n\n### Example 3:\n\n    #include <iostream>\n    #include <fstream>\n    using namespace std;\n    int main() {\n        fstream my_file;\n        my_file.open(\"my_file.txt\", ios::in);\n        if (!my_file) {\n            cout << \"No such file\";\n        }\n        else {\n            char ch;\n\n            while (1) {\n                my_file >> ch;\n                if (my_file.eof())\n                    break;\n\n                cout << ch;\n            }\n\n        }\n        my_file.close();\n        return 0;\n    }\n\n**Output:**\n\n```\nHello World! from my_file.txt\n```\n\nHere is a screenshot of the code:\n\n![](https://www.guru99.com/images/2/100520_1107_CFileHandli7.png)\n\n**Code Explanation:**\n\n1. Include the iostream header file in the program to use its functions.\n2. Include the fstream header file in the program to use its classes.\n3. Include the std namespace in the program to use its classes without calling it.\n4. Call the main() function. The program logic should be added within the body of this function.\n5. Create an instance of the fstream class and give it the name `my_file`.\n6. Use the open() function to create a new file named `my_file.txt`. The file will be opened in the in mode for reading from it.\n7. Use an if statement to check whether the file does not exist.\n8. Text to print on the console if the file is not found.\n9. End of the body of the if statement.\n10. Use an else statement to state what to do if the file is found.\n11. Create a char variable named ch.\n12. Create a while loop for iterating over the file contents.\n13. Write/store contents of the file in the variable ch.\n14. Use an if condition and eof() function that is, end of the file, to ensure the compiler keeps on reading from the file if the end is not reached.\n15. Use a break statement to stop reading from the file once the end is reached.\n16. Print the contents of variable ch on the console.\n17. End of the while body.\n18. End of the body of the else statement.\n19. Call the close() function to close the file.\n20. The program must return value upon successful completion.\n21. End of the body of the main() function.\n\n## Conclusion\n\n* With file handling, the output of a program can be sent and stored in a file.\n* A number of operations can then be applied to the data while in the file.\n* A stream is an abstraction that represents a device where input/output operations are performed.\n* A stream can be represented as either destination or source of characters of indefinite length.\n* The fstream library provides C++ programmers with methods for file handling.\n* To use the library, you must include it in your program using the #include preprocessor directive.\n"],"8":["Dynamic Memory Management","\n# Dynamic Memory Management in C++\n\n![](https://www.shutterstock.com/image-illustration/central-computer-processors-cpu-concept-600nw-2128046906.jpg)\n\nDynamic Memory Management is the process of allocating and deallocating blocks of memory during runtime. It is a critical aspect of programming in C and C++, where memory allocation is done dynamically.\n\nIn this lesson, we will take an in-depth look at dynamic memory management in C-based languages and explore the differences between dynamic memory allocation and deallocation in C and C++.\n\n## Understanding Memory\n\nWhen a program is loaded into memory, it is organised into four areas of memory, called segments : the text segment, the data segment, the stack segment, and the heap segment.\n\nLet's look at the below figure for Memory Layout,\n\n![](https://miro.medium.com/v2/1*C8jvV7sm8Uu71YqyQtGSdA.png)\n\nThe **text segment** (also known as the code segment) contains the program’s compiled code. This is the machine language representation of the program steps to be performed, which includes all user and system provided functions.\n\nThe **data segment** is further sub-divided into two segments: **Initialised** and **Uninitialised**. All the global, constant and static data is kept in **Initialised Data Segment**. All the uninitialised data is stored in the **Uninitialised Data Segment**.\n\nMemory is allocated in **heap** when a software allocates memory at runtime. When more memory is required to be allocated, the **heap** expands higher, as shown in the diagram above.\n\nThe **stack** is used to hold your local variables and for sending arguments to functions, as well as the return address of the instruction to be executed when the function call is completed. When a new stack frame is required (due to a freshly called function), the stack grows downward.\n\n## Dynamic Memory Management\n\nAny memory that is allocated during run-time is served from the **Heap** segment of the memory. Both C and C++ supports allocating memory from Heap but uses entirely different set of functions to achieve so.\n\nHere's the difference between Static Vs Dynamic Memory Management\n\n| Static Allocation | Dynamic Allocation |\n|:-|:-|\n| Memory is allocated at compile time. | Memory is allocated at run time. |\n| Memory can't be increased while executing program. | Memory can be increased while executing program. |\n| Used in array. | Used in linked list. |\n\nLet us take a look at C functions for achieving dynamic memory management.\n\n### Memory Management Functions\n\nFollowing four functions forms the backbone of memory management in C\n\n* `malloc()` : Allocates single block of requested memory\n* `calloc()` : Allocate multiple blocks of requested memory\n* `realloc()` : Reallocated the memory occupied by malloc() or calloc() function\n* `free()` : frees the dynamically allocated memory\n\nFollowing is an example using malloc and free function.\n\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    int main() {\n      int *p = (int*) malloc(sizeof(int));\n      *p = 5;\n      printf(\"%d\n\", *p);\n      free(p);\n    }\n\nNote that all of these four functions are still available in C++ and users can use them to manage memory as they would have in C.\n\n### Memory Management Operators\n\nC++ introduced new ways of managing dynamic memory. Two new operators, called **new** and **delete**, were added to C++ for performing tasks related to dynamic memory management.\n\nHere is the similar program in C++, written using these new operators.\n\n#include <iostream>\n\n    int main() {\n      int *p = new int(5);\n      cout << p << endl;\n      delete p;\n    }\n\nThese new operators provides an easy to use interface and brings in the following benefits,\n\n1. No need to specify the size of memory; Implicitly determined by the data type.\n2. No need for explicit type-casting of the pointer.\n3. Memory allocation and initialisation can be done in a single step.\n\nTo allocate dynamic memory for array, C++ introduced two new operators **new[]** and **delete[]**. Here is how to use them —\n\n    #include <iostream>\n    \n    int main() {\n      int *p = new int[3];\n      p[0] = 0; p[1] = 10; p[2] = 100;\n      delete[] p;\n    }\n\nNote that operators new[] and operator delete[] are different from operator new and operator delete.\n\n### New functions to Manage Memory\n\nApart from the **new** and **delete** operator, C++ introduces two new functions for dynamic memory management. These are “**operator new()**” and “**operator delete()**”. Do not confuse them with operator **new** and operator **delete**. Here is how they are used\n\n    #include <iostream>\n    \n    int main() {\n      int *p = (int*) operator new(sizeof(int));\n      cout << p << endl;\n      operator delete(p);\n    }\n"],"9":["Smart Pointers","\n# Smart Pointers\n\n![](https://as2.ftcdn.net/v2/jpg/02/39/09/15/1000_F_239091558_dW7sAIx9YTr5TIglTYdvz4mXOYQqI7Il.jpg)\n\nPointers are used for accessing the resources which are external to the program – like heap memory. \n\nSo, for accessing the heap memory (if anything is created inside heap memory), pointers are used. When accessing any external resource we just use a copy of the resource. \n\nIf we make any changes to it, we just change it in the copied version. But, if we use a pointer to the resource, we’ll be able to change the original resource.\n\n## Problems with Normal Pointers\n\nSome Issues with normal pointers in C++ are as follows:\n\n* **Memory Leaks:** This occurs when memory is repeatedly allocated by a program but never freed. This leads to excessive memory consumption and eventually leads to a system crash.\n* **Dangling Pointers:** A dangling pointer is a pointer that occurs at the time when the object is de-allocated from memory without modifying the value of the pointer.\n* **Wild Pointers:** Wild pointers are pointers that are declared and allocated memory but the pointer is never initialized to point to any valid object or address.\n* **Data Inconsistency:** Data inconsistency occurs when some data is stored in memory but is not updated in a consistent manner.\n* **Buffer Overflow:** When a pointer is used to write data to a memory address that is outside of the allocated memory block. This leads to the corruption of data which can be exploited by malicious attackers.\n\n**Example:**\n\n    // C++ program to demonstrate working of a Pointers\n    #include <iostream>\n    using namespace std;\n    \n    class Rectangle {\n    private:\n      int length;\n      int breadth;\n    };\n    \n    void fun()\n    {\n      // By taking a pointer p and\n      // dynamically creating object\n      // of class rectangle\n      Rectangle* p = new Rectangle();\n    }\n    \n    int main()\n    {\n      // Infinite Loop\n      while (1) {\n        fun();\n      }\n    }\n\n\n**Output**\n\n```\nMemory limit exceeded\n```\n\n### Explanation\n\n- In function `fun`, it creates a pointer that is pointing to the `Rectangle` object. \n- The object `Rectangle` contains two integers, `length,` and `breadth`. \n- When the function `fun` ends, p will be destroyed as it is a local variable. \n- But, the memory it consumed won’t be deallocated because we forgot to use `delete p;` at the end of the function. \n- That means the memory won’t be free to be used by other resources. But, we don’t need the variable anymore, we need the memory.\n- The `main`, `fun` is called in an infinite loop. That means it’ll keep creating `p`. \n- It’ll allocate more and more memory but won’t free them as we didn’t deallocate it. \n- The memory that’s wasted can’t be used again. Which is a memory leak. \n- The entire _heap_ memory may become useless for this reason.\n\n## Smart Pointers\n\nAs we’ve known unconsciously not deallocating a pointer causes a memory leak that may lead to a crash of the program. \n\nLanguages like Java, C# has _Garbage Collection Mechanisms_ to smartly deallocate unused memory to be used again. The programmer doesn’t have to worry about any memory leaks. \n\nC++ comes up with its own mechanism that’s _Smart Pointer_. When the object is destroyed it frees the memory as well. So, we don’t need to delete it as Smart Pointer will handle it.\n\nA _Smart Pointer_ is a wrapper class over a pointer with an operator like **** and `->` overloaded. The objects of the smart pointer class look like normal pointers. But, unlike _Normal Pointers,_ it can deallocate and free destroyed object memory.\n\nThe idea is to take a class with a pointer, destructor and overloaded operators like **** and `->`. Since the destructor is automatically called when an object goes out of scope, the dynamically allocated memory would automatically be deleted (or the reference count can be decremented).\n\n**Example:**\n\n    // C++ program to demonstrate the working of Smart Pointer\n    #include <iostream>\n    using namespace std;\n    \n    class SmartPtr {\n      int* ptr; // Actual pointer\n    public:\n      // Constructor: Refer\n      // explicit keyword\n      explicit SmartPtr(int* p = NULL) { ptr = p; }\n    \n      // Destructor\n      ~SmartPtr() { delete (ptr); }\n    \n      // Overloading dereferencing operator\n      int& operator*() { return *ptr; }\n    };\n    \n    int main()\n    {\n      SmartPtr ptr(new int());\n      *ptr = 20;\n      cout << *ptr;\n    \n      // We don't need to call delete ptr: when the object\n      // ptr goes out of scope, the destructor for it is\n      // automatically called and destructor does delete ptr.\n    \n      return 0;\n    }\n\n\n**Output**\n\n```\n20\n```\n\n### Difference Between Pointers and Smart Pointers\n\n| Pointer | Smart Pointer |\n|---|---|\n| A pointer is a variable that maintains a memory address as well as data type information about that memory location. A pointer is a variable that points to something in memory. | It’s a pointer-wrapping stack-allocated object. Smart pointers, in plain terms, are classes that wrap a pointer, or scoped pointers. |\n| It is not destroyed in any form when it goes out of its scope | It destroys itself when it goes out of its scope |\n| Pointers are not so efficient as they don’t support any other feature.&nbsp; | Smart pointers are more efficient as they have an additional feature of memory management.&nbsp; |\n| They are very labor-centric/manual. | They are automatic/pre-programmed in nature. |\n\n\nThis only works for `int`. So, we’ll have to create Smart Pointer for every object? **No**, there’s a solution, **Template**. \n\nIn the code below as you can see `T` can be of any type.\n\n**Example:**\n\n    // C++ program to demonstrate the working of Template and\n    // overcome the issues which we are having with pointers\n    #include <iostream>\n    using namespace std;\n    \n    // A generic smart pointer class\n    template <class T> class SmartPtr {\n      T* ptr; // Actual pointer\n    public:\n      // Constructor\n      explicit SmartPtr(T* p = NULL) { ptr = p; }\n    \n      // Destructor\n      ~SmartPtr() { delete (ptr); }\n    \n      // Overloading dereferencing operator\n      T& operator*() { return *ptr; }\n    \n      // Overloading arrow operator so that\n      // members of T can be accessed\n      // like a pointer (useful if T represents\n      // a class or struct or union type)\n      T* operator->() { return ptr; }\n    };\n    \n    int main()\n    {\n      SmartPtr<int> ptr(new int());\n      *ptr = 20;\n      cout << *ptr;\n      return 0;\n    }\n\n\n**Output**\n\n```\n20\n```\n\nSmart pointers are also useful in the management of resources, such as file handles or network sockets.\n\n## Types of Smart Pointers\n\nC++ libraries provide implementations of smart pointers in the following types:\n\n* `unique_ptr`\n* `shared_ptr`\n* `weak_ptr`\n\n### unique_ptr\n\n`unique_ptr` stores one pointer only. We can assign a different object by removing the current object from the pointer.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20191202223147/uniquePtr.png)\n\n**Example:**\n\n    // C++ program to demonstrate the working of unique_ptr\n    // Here we are showing the unique_pointer is pointing to P1.\n    // But, then we remove P1 and assign P2 so the pointer now\n    // points to P2.\n    \n    #include <iostream>\n    using namespace std;\n    // Dynamic Memory management library\n    #include <memory>\n    \n    class Rectangle {\n      int length;\n      int breadth;\n    \n    public:\n      Rectangle(int l, int b)\n      {\n        length = l;\n        breadth = b;\n      }\n    \n      int area() { return length * breadth; }\n    };\n    \n    int main()\n    {\n    // --/ Smart Pointer\n      unique_ptr<Rectangle> P1(new Rectangle(10, 5));\n      cout << P1->area() << endl; // This'll print 50\n    \n      // unique_ptr<Rectangle> P2(P1);\n      unique_ptr<Rectangle> P2;\n      P2 = move(P1);\n    \n      // This'll print 50\n      cout << P2->area() << endl;\n    \n      // cout<<P1->area()<<endl;\n      return 0;\n    }\n\n\n**Output**\n\n```\n50\n50\n```\n\n### shared_ptr\n\nBy using `shared_ptr` more than one pointer can point to this one object at a time and it’ll maintain a **Reference Counter** using the `use_count()` method.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20191202231341/shared_ptr.png)\n\n    // C++ program to demonstrate the working of shared_ptr\n    // Here both smart pointer P1 and P2 are pointing to the\n    // object Addition to which they both maintain a reference\n    // of the object\n    #include <iostream>\n    using namespace std;\n    // Dynamic Memory management library\n    #include <memory>\n    \n    class Rectangle {\n      int length;\n      int breadth;\n    \n    public:\n      Rectangle(int l, int b)\n      {\n        length = l;\n        breadth = b;\n      }\n    \n      int area() { return length * breadth; }\n    };\n    \n    int main()\n    {\n      //---/ Smart Pointer\n      shared_ptr<Rectangle> P1(new Rectangle(10, 5));\n      // This'll print 50\n      cout << P1->area() << endl;\n    \n      shared_ptr<Rectangle> P2;\n      P2 = P1;\n    \n      // This'll print 50\n      cout << P2->area() << endl;\n    \n      // This'll now not give an error,\n      cout << P1->area() << endl;\n    \n      // This'll also print 50 now\n      // This'll print 2 as Reference Counter is 2\n      cout << P1.use_count() << endl;\n      return 0;\n    }\n\n\n**Output**\n\n```\n50\n50\n50\n2\n```\n\n### weak_ptr\n\n`weak_ptr` is a smart pointer that holds a non-owning reference to an object. It’s much more similar to shared_ptr except it’ll not maintain a **Reference Counter**. \n\nIn this case, a pointer will not have a stronghold on the object. \n\nThe reason is if suppose pointers are holding the object and requesting for other objects then they may form a **Deadlock.**\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20191202233339/weakPtr.png)\n\n    // C++ program to demonstrate the working of weak_ptr\n    // Here both smart pointer P1 and P2 are pointing to the\n    // object Addition to which they both does not maintain\n    // a reference of the object\n    #include <iostream>\n    using namespace std;\n    // Dynamic Memory management library\n    #include <memory>\n    \n    class Rectangle {\n      int length;\n      int breadth;\n    \n    public:\n      Rectangle(int l, int b)\n      {\n        length = l;\n        breadth = b;\n      }\n    \n      int area() { return length * breadth; }\n    };\n    \n    int main()\n    {\n      //---/ Smart Pointer\n      shared_ptr<Rectangle> P1(new Rectangle(10, 5));\n    \n      // create weak ptr\n      weak_ptr<Rectangle> P2 (P1);\n    \n      // This'll print 50\n      cout << P1->area() << endl;\n    \n      // This'll print 1 as Reference Counter is 1\n      cout << P1.use_count() << endl;\n      return 0;\n    }\n\n\n**Output**\n\n```\n50\n1\n```\n\nC++ libraries provide implementations of smart pointers in the form of `auto_ptr`, `unique_ptr`, `shared_ptr`, and `weak_ptr`.\n"],"10":["Move Semantics and Rvalue References","\n# Move Semantics and Rvalue References\n\n![](https://miro.medium.com/v2/resize:fit:1100/format:webp/1*32Laad-NapMtWHvxS0OTvw.png)\n\nEven though modern C++ can produce very fast and efficient applications, for many years, one of its weaknesses was creation of temporary objects. \n\nC++98 standard defined a few compiler optimization techniques such as Copy Elision and Return Value Optimization which partially solved this problem but the real game-changer was the move semantics introduced in C++11.\n\n## Move semantics\n\nTo understand the move semantics first let’s look at copy semantics. In general, all classes in C++ can be copied using one of special methods:\n\n```\nT t1;\nT t2(t1);\nT t1, t2;\nt2 = t1;\n```\n\nSimilarly C++11 defined another two methods in order to allow moving objects instead of copying:\n\n```\nT t1;\nT t2(std::move(t1));\nT t1, t2;\nt2 = std::move(t1);\n```\n\nIn general, move semantics allows us to take an object from the current context and pass it to another one, avoiding copy when the original object is not needed anymore. \n\nIf we want to move objects, we need to use `std::move` function, as in the above example.\n\nIt is also worth to mention about 2 issues related to these examples:\n\n1. What happens with the t1 variable after the move? According to C++ standard variable after the move is valid but unspecified state. It means we can perform operations that does not need preconditions (e.g. assign new object)\n2. How does std::move work? In fact std::move doesn’t move anything. To find out what std::move really is we need to dig into rvalues.\n\n## Lvalues vs. rvalues\n\nIn C++ (unlike the C) a variable can be declared as reference. Before C++11 reference could point only to lvalue (something whose address can be taken):\n\n    int counter = 10;\n    int& counterRef = counter;\n\nSince C++11 reference can point to lvalue or rvalue. Rvalue reference is basically reference to temporary object (right-hand side of an assignment expression), e.g.:\n\n    int&& counterRef = 10;\n\n### The Role of rvalue References in Move Semantics\n\nAs mentioned earlier, there are 4 special methods for handling copy/move operations. Let’s look at their definitions:\n\n  Class Point {\n    …\n    Point (const Point& point);//copy constructor\n    Point& operator(const Point& point);//copy assigment operator\n    Point(Point&& point);//move constructor\n    Point& operator=(Point&& point);//move assigment operator\n    …\n  }\n\nAs we can see copy operations take lvalue reference while move operations take rvalue reference, so the object is being copied or moved depending on the reference type. And this is what std::move function does — it just converts lvalue reference to rvalue reference.\n\n## When to use move semantics\n\nWhen method takes rvalue as parameter, we can pass rvalue reference (reference to temporary object) but also temporary object itself:\n\nIt is a good practice to create overloads for methods takings lvalues and rvalues e.g. a few STL containers have two push  back methods:\n\n```\nvoid push\back(const T& obj);\n```\n\n```\nvoid push\back(T&& obj);\n```\n\nIt allows us to create copy (if object is still needed in this context) or move (if object is not needed):\n\n```\nstd::vector<Point> points;\nPoint point1, point2;\npoints.push\back(point1);//lvalue\npoints.push\back(std::move(point2));//rvalue\n```\n\nThis is typical usage of move semantics.\n\n## When not to use move semantics\n\nCommon mistake made by developers is using `std::move` when the local variable is returned from the function.\n\n    std::vector<int> getNumbers() const {\n        std::vector<int> numbers = {1,2,3};\n        return std::move(numbers);\n    }\n    \n    auto numbers = getNumbers();\n\nIn this case there are 2 objects created:\n\n1. Local variable numbers inside getNumbers function — temporary object\n2. Left hand side object where getNumbers is called — this object is created using move constructor\n\nThe issue here is that the compiler by default uses an optimization technique called RVO (Return Value Optimization) in order to avoid copies of temporary objects. Let’s remove std::move from code:\n\n    std::vector<int> getNumbers() const {\n        std::vector<int> numbers = {1,2,3};\n        return numbers;\n    }\n\nWithout RVO there are 3 vector instances created:\n\n1. Local variable numbers inside getNumbers function — temporary object\n2. Right hand side object where getNumbers is called — temporary object\n3. Left hand side object where getNumbers is called\n\nBut with RVO there is only one instance created.\n\n## Conclusion\n\nMove semantics is a powerful technique helping avoid unnecessary copies of temporary objects. \n\nTo take full advantage of it, it’s worth remembering that modern compilers also optimize code in some cases and can do it better than using `std::move`.\n"]},"Java":{"1":["Introduction to Java","\n# Introduction to Java\n\n![](https://assets.isu.pub/document-structure/230515112202-705dc53168639619d5f42fa01fa94cf2/v1/f8ed4f1b53b46ec27c29dfccd44c2ba7.jpeg)\n\nJava is a computer language programming platform that was first released in 1995 by Sun Microsystems. Java is an Internet age-built programming language. \n\nMany applications and websites will not work unless you have Java installed, and more will be created every day. Java is fast, safe, and trustworthy. Java is anywhere and everywhere...from laptops to datacenters, game consoles to scientific supercomputers, Internet cell phones!\n\nJava is one of the most popular computer languages in the world. Java is an object-oriented, interpreted, robust, secure, architecture-neutral, portable, high-performance, the multi-threaded language of the computer. It is intended to allow developers of applications to \"write once, run anywhere\" (WORA), meaning code running on one platform does not need to be recompiled to run on another.\n\nJava is a high level, robust, secured and object-oriented programming language. And any hardware or software environment in which a program runs is known as a platform. Since Java has its own runtime environment (JRE) and API, it is called a platform.\n\nSure, here's a simple \"Hello, World!\" program in Java along with a guide on how to compile and run it using the Java Virtual Machine (JVM):\n\n### Let's write Hello World!\n\n    public class HelloWorld {\n        public static void main(String[] args) {\n            System.out.println(\"Hello, World!\");\n        }\n    }\n\n### Explanation:\n\n```\npublic class HelloWorld\n```\n\nThis line declares a class named `HelloWorld`. In Java, every application starts with at least one class definition, and the class containing the `main` method serves as the entry point for the program.\n\n```\npublic static void main(String[] args)\n```\n\nThis line declares the `main` method, which is the starting point of execution for the Java program. \n\nIt is declared as `public`, `static`, and `void`, meaning it can be called from outside the class without creating an instance, and it does not return any value. \n\nThe `String[] args` parameter allows the program to accept command-line arguments.\n\n```\nSystem.out.println(\"Hello, World!\");\n```\n\nThis line prints the string \"Hello, World!\" to the standard output (usually the console). The `System.out.println()` method is used to print the specified message followed by a newline character.\n\n### Running the Program Using JVM:\n\nTo compile and run the Java program using the JVM, follow these steps:\n\n1. **Write the Java Code**: Save the above \"HelloWorld.java\" code in a file named `HelloWorld.java`.\n\n2. **Compile the Java Code**: Open a terminal or command prompt and navigate to the directory containing `HelloWorld.java`. Compile the code using the `javac` command:\n\n```\njavac HelloWorld.java\n```\n\nThis command compiles the Java source file and generates the bytecode file `HelloWorld.class`.\n\n3. **Run the Java Program**: After successfully compiling the Java code, run the program using the `java` command followed by the name of the class containing the `main` method (without the `.class` extension):\n\n```\njava HelloWorld\n```\n\nThis command executes the compiled bytecode using the JVM, and you should see the output \"Hello, World!\" printed to the console.\n\n## How actually Java Program runs?\n\nIn the Java programming language, all source code is first written in plain text files ending with the `.java` extension. Those source files are then compiled into `.class` files by the javac compiler. \n\nA `.class` file does not contain code that is native to your processor; it instead contains bytecodes — the machine language of the Java Virtual Machine1 (Java VM). The java launcher tool then runs your application with an instance of the Java Virtual Machine.\n\n![](https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/02/working-of-java-virtual-machine.jpg)\n\nBecause the Java VM is available on many different operating systems, the same .class files are capable of running on Microsoft Windows, the Solaris™ Operating System (Solaris OS), Linux, or Mac OS.\n\n![](https://miro.medium.com/v2/1*tW1JZpC4nlVTn4U5nAzNoA.png)\n\nThrough the Java VM, the same application is capable of running on multiple platforms.\n\n## The Java Platform\n\nA platform is the hardware or software environment in which a program runs. \n\nSome of the most popular platforms are Microsoft Windows, Linux, Solaris OS, and Mac OS. Most platforms can be described as a combination of the operating system and underlying hardware. \n\nThe Java platform differs from most other platforms in that it's a software-only platform that runs on top of other hardware-based platforms.\n\nThe Java platform has two components:\n\n* The Java Virtual Machine\n* The Java Application Programming Interface (API)\n\n![](https://miro.medium.com/v2/resize:fit:900/1*lLBwoFv6RAZ15vRuK6yFQg.png)\n\nThe API and Java Virtual Machine insulate the program from the underlying hardware.\n\n## Where is Java used?\n\nThere are many devices where Java is currently used. Some of them are as follows:\n\n* Desktop Applications\n* Web Applications\n* Mobile\n* Embedded System\n* Robotics\n* Games etc.\n\n## Types of Java Applications\n\n* **Application programs**: Application programs are stand-alone programs that are written to carry out certain tasks on local computer such as solving equations, reading and writing files etc.\n\n* **Applet Programs**: Applets are small Java programs developed for Internet applications. An applet located in a distant computer can be downloaded via the Internet and executed on a local computer using Java-capable browser.\n\n## History of Java\n\nJava, having been developed in 1991, is a relatively new programming language. \n\nAt that time, James Gosling from Sun Microsystems and his team began designing the first version of Java aimed at programming home appliances which are controlled by a wide variety of computer processors.\n\nJava was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time. \n\nThe language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee. \n\nGosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.\n\nIn 1994, Gosling realized that such a language would be ideal for use with web browsers and Java's connection to the internet began. \n\nSun Microsystems released the first public implementation as Java 1.0 in 1995. It promised \"Write Once, Run Anywhere\" (WORA), providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. \n\nMajor web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular.\n\nHere's a timeline of Java language,\n\n![](https://i.ibb.co/hX9CkHV/java-timeline.webp)\n\n### Features of Java\n\n![](https://www.javatpoint.com/images/core/java-features.png)\n\n### Summary\n\n* C++ and Java both are object-oriented programming (OOP) languages\n* Java is a programming language developed by Sun Microsystems\n* C++ was developed by Bjarne Stroustrup at AT&T Bell Laboratories in Murray Hill.\n* The Java language was initially called OAK. Originally, it was developed for handling devices and set-top boxes.\n* No strict relationship between class names and filenames. In C++, header files and implementation files are used for a specific class.\n* The strict relationship is enforced, e.g., the source code for class PayRoll has to be in PayRoll.java.\n"],"2":["Variables in Java","\n# Variables in Java\n\n![](https://miro.medium.com/v2/resize:fit:1400/1*Px7h03Ih7B5QZu4KQpSEoQ.png)\n\nIn Java, Variables are the data containers that save the data values during Java program execution. \n\nEvery Variable in Java is assigned a data type that designates the type and quantity of value it can hold. A variable is a memory location name for the data.\n\nJava variable is a name given to a memory location. It is the basic unit of storage in a program.\n\n* The value stored in a variable can be changed during program execution.\n* Variables in Java are only a name given to a memory location. All the operations done on the variable affect that memory location.\n* In Java, all variables must be declared before use.\n\n### How to Declare Variables in Java?\n\nWe can declare variables in Java as pictorially depicted below as a visual aid.\n\n![Variables in Java](https://media.geeksforgeeks.org/wp-content/uploads/20230405112751/Variables-in-Java-768.webp)\n\nFrom the image, it can be easily perceived that while declaring a variable, we need to take care of two things that are:\n\n1. **datatype**: Type of data that can be stored in this variable.\n2. **data_name:** Name was given to the variable.\n\nIn this way, a name can only be given to a memory location. It can be assigned values in two ways:\n\n* Variable Initialization\n* Assigning value by taking input\n\n### How to Initialize Variables in Java?\n\nIt can be perceived with the help of 3 components that are as follows:\n\n* **datatype**: Type of data that can be stored in this variable.\n* **variable_name**: Name given to the variable.\n* **value**: It is the initial value stored in the variable.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230405112914/Variables-Syntax-in-Java.webp)\n\n**Example:**\n\n    // Declaring float variable  \n    float simpleInterest;   \n    // Declaring and initializing integer variable  \n    int time = 10, speed = 20;   \n    // Declaring and initializing character variable  \n    char var = 'h';   \n\n## Types of Variables in Java\n\nNow let us discuss different types of variables which are listed as follows:\n\n1. Local Variables\n2. Instance Variables\n3. Static Variables\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230405113005/Types-of-Variables-in-Java-768.webp)\n\nLet us discuss the traits of every type of variable listed here in detail.\n\n### 1. Local Variables\n\nA variable defined within a block or method or constructor is called a local variable.\n\n* These variables are created when the block is entered, or the function is called and destroyed after exiting from the block or when the call returns from the function.\n* The scope of these variables exists only within the block in which the variables are declared, i.e., we can access these variables only within that block.\n* Initialization of the local variable is mandatory before using it in the defined scope.\n\n**Example:**\n\n    public class LocalVariablesExample {\n        public void calculateSum() {\n            int num1 = 10; // Local variable num1\n            int num2 = 20; // Local variable num2\n            int sum = num1 + num2; // Local variable sum\n            System.out.println(\"Sum: \" + sum);\n        }\n    \n        public static void main(String[] args) {\n            LocalVariablesExample obj = new LocalVariablesExample();\n            obj.calculateSum();\n        }\n    }\n\nIn this example:\n- `num1`, `num2`, and `sum` are local variables declared within the method `calculateSum()`.\n- Their scope is limited to the `calculateSum()` method, and they are destroyed once the method execution is completed.\n\n### 2. Instance Variables\n\nInstance variables are non-static variables and are declared in a class outside of any method, constructor, or block.\n\n* As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.\n* Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier, then the default access specifier will be used.\n* Instance variables can be accessed only by creating objects.\n\n**Example:**\n\n    public class InstanceVariablesExample {\n        // Instance variables\n        int num1 = 10;\n        int num2 = 20;\n    \n        public void displayNumbers() {\n            System.out.println(\"Number 1: \" + num1);\n            System.out.println(\"Number 2: \" + num2);\n        }\n    \n        public static void main(String[] args) {\n            InstanceVariablesExample obj1 = new InstanceVariablesExample();\n            InstanceVariablesExample obj2 = new InstanceVariablesExample();\n    \n            obj1.displayNumbers();\n            obj2.displayNumbers();\n        }\n    }\n\nIn this example:\n- `num1` and `num2` are instance variables declared within the class `InstanceVariablesExample`.\n- Each object (`obj1` and `obj2`) of the class has its own copy of `num1` and `num2`.\n\n### 3. Static Variables\n\nStatic variables are also known as class variables.\n\n* These variables are declared similarly to instance variables. The difference is that static variables are declared using the static keyword within a class outside of any method, constructor, or block.\n* Unlike instance variables, we can only have one copy of a static variable per class, irrespective of how many objects we create.\n* Static variables are created at the start of program execution and destroyed automatically when execution ends.\n* Static variables cannot be declared locally inside an instance method.\n\n**Example:**\n\n    public class StaticVariablesExample {\n        // Static variables\n        static int count = 0;\n    \n        public StaticVariablesExample() {\n            count++; // Increment count each time a new object is created\n        }\n    \n        public static void main(String[] args) {\n            StaticVariablesExample obj1 = new StaticVariablesExample();\n            StaticVariablesExample obj2 = new StaticVariablesExample();\n    \n            System.out.println(\"Number of objects created: \" + StaticVariablesExample.count);\n        }\n    }\n\nIn this example:\n- `count` is a static variable declared within the class `StaticVariablesExample`.\n- The `count` variable is shared among all instances of the class, and its value is incremented each time a new object is created.\n"],"3":["Introduction to Control flow","\n# Introduction to Control flow\n\n![](https://miro.medium.com/v2/1*0sNA0dSqkLjVDp-4BzsR1A.jpeg)\n\nControl flow in Java refers to the order in which statements are executed in a program. \n\nJava provides various control flow statements to control the flow of execution based on conditions and iterate over a sequence of statements multiple times. \n\nLet's delve into each type of control flow statement in-depth with examples:\n\n## Conditional Statements:\n\nConditional statements allow the program to execute different sets of statements based on the evaluation of boolean expressions.\n\n### 1. If-Else Statement:\n\nThe `if-else` statement executes a block of code if the condition evaluates to true, and another block of code if the condition evaluates to false.\n\n    int num = 10;\n    if (num > 0) {\n        System.out.println(\"Number is positive\");\n    } else {\n        System.out.println(\"Number is non-positive\");\n    }\n\nThe flow chart for the if-else is given below.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20230724112040/Java-if-else-660.png)\n\n### 2. Else-If Statement:\n\nThe `else if` statement allows you to test multiple conditions sequentially.\n\n    int num = 0;\n    if (num > 0) {\n        System.out.println(\"Number is positive\");\n    } else if (num < 0) {\n        System.out.println(\"Number is negative\");\n    } else {\n        System.out.println(\"Number is zero\");\n    }\n\n### 3. Switch Statement:\n\nThe `switch` statement allows multi-way branching based on the value of an expression.\n\n    int day = 3;\n    switch (day) {\n        case 1:\n            System.out.println(\"Monday\");\n            break;\n        case 2:\n            System.out.println(\"Tuesday\");\n            break;\n        case 3:\n            System.out.println(\"Wednesday\");\n            break;\n        default:\n            System.out.println(\"Other day\");\n    }\n\nThe flow chart for the switch statement is given below.\n\n![](https://cdn.educba.com/academy/wp-content/uploads/2019/09/2019-09-21.jpg)\n\n## Loops:\n\nLoops allow the program to execute a block of code repeatedly until a certain condition is met.\n\n### 1. For Loop:\n\nThe `for` loop is used to iterate a specific number of times.\n\n    for (int i = 1; i <= 5; i++) {\n        System.out.println(\"Iteration \" + i);\n    }\n\nThe flow chart for the for loop is given below.\n\n![](https://static.javatpoint.com/core/images/control-flow-in-java.png)\n\n### 2. While Loop:\n\nThe `while` loop is used to iterate as long as a condition is true.\n\n    int count = 1;\n    while (count <= 5) {\n        System.out.println(\"Count: \" + count);\n        count++;\n    }\n\nThe flow chart for the while loop is given below.\n\n![](https://static.javatpoint.com/core/images/control-flow-in-java2.png)\n\n### 3. Do-While Loop:\n\nThe `do-while` loop is similar to the `while` loop but executes the block of code at least once before checking the condition.\n\n    int num = 1;\n    do {\n        System.out.println(\"Number: \" + num);\n        num++;\n    } while (num <= 5);\n\nThe flow chart for the do-while loop is given below.\n\n\n![](https://static.javatpoint.com/core/images/control-flow-in-java3.png)\n\n### Summary:\n\nControl flow statements in Java allow you to control the flow of execution based on conditions and iterate over a sequence of statements multiple times. \n\nConditional statements such as `if-else`, `else if`, and `switch` allow you to execute different sets of statements based on boolean expressions. \n\nLoops such as `for`, `while`, and `do-while` allow you to execute a block of code repeatedly until a certain condition is met. \n\nUnderstanding and mastering control flow statements is essential for writing efficient and flexible Java programs.\n"],"4":["Methods in Java","\n# Methods in Java\n\n![](https://media.licdn.com/dms/image/D4D12AQGsWEFe7C9URg/article-cover_image-shrink_600_2000/0/1681901604574?e=2147483647&v=beta&t=8dxBvUPfAMhnhCZbBmR9AHjc4aJLgQuHzcgaAV4Q5N4)\n\nThe **method in Java** or Methods of Java is a collection of statements that perform some specific task and return the result to the caller. \n\nA Java method can perform some specific task without returning anything. Java Methods allow us to **reuse** the code without retyping the code. \n\nIn Java, every method must be part of some class that is different from languages like C, C++, and Python.\n\n1. A method is like a function i.e. used to expose the behavior of an object. \n2. It is a set of codes that perform a particular task.\n\n### Syntax of Method\n\n```\n<access_modifier> <return_type> <method_name>( list_of_parameters) {\n    //body\n}\n```\n\n### Advantages of using Method\n\n* Code Reusability\n* Code Optimization\n\n## Method Declaration\n\nIn general, method declarations have 6 components:\n\n**1. Modifier:** It defines the **access type** of the method i.e. from where it can be accessed in your application. In Java, there 4 types of access specifiers.\n\n* **public:** It is accessible in all classes in your application.\n* **protected:** It is accessible within the class in which it is defined and in its subclass/es\n* **private:** It is accessible only within the class in which it is defined.\n* **default:** It is declared/defined without using any modifier. It is accessible within the same class and package within which its class is defined.\n\n**2. The return type:** The data type of the value returned by the method or void if does not return a value. It is **Mandatory** in syntax.\n\n**3. Method Name:** the rules for field names apply to method names as well, but the convention is a little different. It is **Mandatory** in syntax.\n\n**4. Parameter list:** Comma-separated list of the input parameters is defined, preceded by their data type, within the enclosed parenthesis. If there are no parameters, you must use empty parentheses (). It is **Optional** in syntax.\n\n**5. Exception list:** The exceptions you expect by the method can throw, you can specify these exception(s). It is **Optional** in syntax.\n\n**6. Method body:** it is enclosed between braces. The code you need to be executed to perform your intended operations. It is **Optional** in syntax.\n\n![methods in java](https://media.geeksforgeeks.org/wp-content/uploads/methods-in-java.png)\n\n## Types of Methods in Java\n\nThere are two types of methods in Java:\n\n### **1. Predefined Method**\n\nIn Java, predefined methods are the method that is already defined in the Java class libraries is known as predefined methods. It is also known as the standard library method or built-in method. We can directly use these methods just by calling them in the program at any point.\n\n### **2. User-defined Method**\n\nThe method written by the user or programmer is known as a user-defined method. These methods are modified according to the requirement.\n\n### **2 Ways to Create Method in Java**\n\nThere are two ways to create a method in Java:\n\n**1. Instance Method:** Access the instance data using the object name.Declared inside a class.\n\n**Syntax:**\n\n    // Instance Method \n    void method_name(){ \n        body // instance area \n    }\n\n\n**2. Static Method:** Access the static data using class name. Declared inside class with **static** keyword.\n\n**Syntax:**\n\n    //Static Method \n    static void method_name(){ \n        body // static area \n    }\n\n\n### Method Signature\n\nIt consists of the method name and a parameter list (number of parameters, type of the parameters, and order of the parameters). The return type and exceptions are not considered as part of it.\n\nMethod Signature of the above function:\n\n`max(int x, int y)` Number of parameters is `2`, Type of parameter is int.\n\n## How to Name a Method?\n\nA method name is typically a single word that should be a **verb** in lowercase or a multi-word, that begins with a **verb** in lowercase followed by an **adjective, noun…..** After the first word, the first letter of each word should be capitalized.\n\n**Rules to Name a Method**\n\n* While defining a method, remember that the method name must be a **verb** and start with a **lowercase** letter.\n* If the method name has more than two words, the first name must be a verb followed by an adjective or noun.\n* In the multi-word method name, the first letter of each word must be in **uppercase** except the first word. For example, findSum, computeMax, setX, and getX.\n\nGenerally, a method has a unique name within the class in which it is defined but sometimes a method might have the same name as other method names within the same class as method overloading is allowed in Java.\n\n## Method Calling\n\nThe method needs to be called for use its functionality. There can be three situations when a method is called:  \nA method returns to the code that invoked it when:\n\n* It completes all the statements in the method\n* It reaches a return statement\n* Throws an exception\n\n**Example:**\n\n    // Importing required classes \n    import java.io.*; \n    \n    // Class 1 \n    // Helper class \n    class Addition { \n    \n        // Initially taking sum as 0 \n        // as we have not started computation \n        int sum = 0; \n    \n        // Method to add two numbers \n        public int addTwoInt(int a, int b) \n        { \n    \n            // Adding two integer value \n            sum = a + b; \n    \n            // Returning summation of two values \n            return sum; \n        } \n    } \n    \n    // Class 2 \n    // Helper class \n    class Main { \n    \n        // Main driver method \n        public static void main(String[] args) \n        { \n    \n            // Creating object of class 1 inside main() method \n            Addition add = new Addition(); \n    \n            // Calling method of above class \n            // to add two integer \n            // using instance created \n            int s = add.addTwoInt(1, 2); \n    \n            // Printing the sum of two numbers \n            System.out.println(\"Sum of two integer values :\" + s); \n        } \n    }\n\n\n**Output**\n\n```\nSum of two integer values :3\n```\n\n### Advantages of using Methods in Java,:\n\n* **Reusability**: Methods allow you to write code once and use it many times, making your code more modular and easier to maintain.\n* **Abstraction**: Methods allow you to abstract away complex logic and provide a simple interface for others to use. This makes your code more readable and easier to understand.\n* **Improved readability**: By breaking up your code into smaller, well-named methods, you can make your code more readable and easier to understand.\n* **Encapsulation**: Methods allow you to encapsulate complex logic and data, making it easier to manage and maintain.\n* **Separation of concern**s: By using methods, you can separate different parts of your code and assign different responsibilities to different methods, improving the structure and organization of your code.\n* **Improved modularity**: Methods allow you to break up your code into smaller, more manageable units, improving the modularity of your code.\n* **Improved testability**: By breaking up your code into smaller, more manageable units, you can make it easier to test and debug your code.\n* **Improved performance:** By organizing your code into well-structured methods, you can improve performance by reducing the amount of code that needs to be executed and by making it easier to cache and optimize your code.\n\n## Difference Between Function and Method\n\n**Function:** Within a programme, a function can be called to carry out a specific task. It is a self-contained block of code. It takes input parameters (if any) and can return a value or perform actions.\n\n**Method:** The Method's operation is similar to that of a function in that it may accept input parameters or arguments and can also return data by having a return type. However, it differs from a function in two key ways.\n\n1. A method is connected or related to the object instance it is called using.\n2. The Method can only operate upon data present in the class in which it is placed.\n3. It's a key concept in object-oriented programming.\n"],"5":["Introduction to Object-Oriented Programming","\n# Introduction to Object-Oriented Programming\n\n![](https://f.hubspotusercontent10.net/hubfs/7116861/Marketing/02.%20Website%20assets/03.%20Blog/wpblog-import-missing-feature-images/Moving-from-functional-to-oop/engineering-blog-post-OOP.png)\n\nObject-Oriented Programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data in the form of fields (often known as attributes or properties) and code in the form of procedures (often known as methods). \n\nJava, being a widely-used and versatile programming language, heavily emphasizes OOP principles.\n\n### Why Object-Oriented Programming?\n\nOOP offers several advantages over procedural programming, including:\n\n1. **Modularity**: OOP allows you to break down complex problems into smaller, more manageable units called objects. Each object represents a self-contained entity with its own data and behavior, making the code easier to understand and maintain.\n\n2. **Reusability**: Objects can be reused in different parts of the program or in different programs altogether. Once a class (the blueprint for creating objects) is defined, it can be instantiated multiple times to create objects with similar characteristics and behaviors.\n\n3. **Encapsulation**: OOP promotes the encapsulation of data and behavior within objects. This means that the internal state of an object is hidden from the outside world, and access to it is controlled through well-defined interfaces (public methods). Encapsulation helps prevent unintended interference and makes the code more robust and secure.\n\n4. **Inheritance**: Inheritance is a fundamental concept in OOP that allows a class to inherit properties and behavior from another class. This promotes code reuse and helps create a hierarchy of classes, with more specialized classes inheriting from more general ones.\n\n5. **Polymorphism**: Polymorphism allows objects of different classes to be treated as objects of a common superclass. This enables flexibility and extensibility in the design of software systems, as methods can be defined in a superclass and overridden in subclasses to provide specific implementations.\n\n### Example:\n\nConsider a simple example of a `Car` class in Java:\n\n    public class Car {\n        // Instance variables\n        private String make;\n        private String model;\n        private int year;\n\n        // Constructor\n        public Car(String make, String model, int year) {\n            this.make = make;\n            this.model = model;\n            this.year = year;\n        }\n\n        // Getter methods\n        public String getMake() {\n            return make;\n        }\n\n        public String getModel() {\n            return model;\n        }\n\n        public int getYear() {\n            return year;\n        }\n\n        // Method to display car details\n        public void displayDetails() {\n            System.out.println(\"Make: \" + make + \", Model: \" + model + \", Year: \" + year);\n        }\n\n        // Main method\n        public static void main(String[] args) {\n            // Creating a Car object\n            Car myCar = new Car(\"Toyota\", \"Camry\", 2020);\n            \n            // Accessing object's methods\n            myCar.displayDetails();\n        }\n    }\n\nIn this example, `Car` is a class that encapsulates data about a car (make, model, year) and provides methods to access and manipulate this data. \n\nThe use of a class to represent a car entity promotes modularity and reusability, making the code easier to manage and maintain. Additionally, encapsulation ensures that the internal state of a `Car` object is hidden from external code, enhancing data security and preventing unintended modifications.\n"],"6":["Classes and Objects in Java","\n# Classes and Objects in Java\n\n![](https://www.learnbyexample.org/wp-content/uploads/python/Class-Object-Illustration.png)\n\nClasses and Objects in Java are the fundamental components of OOP’s. Often there is a confusion between classes and objects. In this lesson, we try to tell you the difference between Class and Object in Java.\n\n## What is Class in Java?\n\n**Class** are a blueprint or a set of instructions to build a specific type of object. It is a basic concept of Object-Oriented Programming which revolve around the real-life entities. Class in Java determines how an object will behave and what the object will contain.\n\n**Syntax of Class in Java**\n\n```\nclass <class_name>{  \n    field;  \n    method;  \n}\n```\n\n## What is Object in Java?\n\n**Object** is an instance of a class. An object in OOPS is nothing but a self-contained component which consists of methods and properties to make a particular type of data useful. \n\nFor example color name, table, bag, barking. When you send a message to an object, you are asking the object to invoke or execute one of its methods as defined in the class.\n\nFrom a programming point of view, an object in OOPS can include a data structure, a variable, or a function. It has a memory location allocated. Java Objects are designed as class hierarchies.\n\nObject Syntax in Java,\n\n```\nClassName ReferenceVariable = new ClassName();\n```\n\n### What is the Difference Between Object and Class in Java?\n\nA **Class** in object oriented programming is a blueprint or prototype that defines the variables and the methods (functions) common to all Java Objects of a certain kind.\n\nAn **object** in OOPS is a specimen of a class. Software objects are often used to model real-world objects you find in everyday life.\n\n### Understand the concept of Java Classes and Objects with an example.\n\nLet’s take an example of developing a pet management system, specially meant for dogs. You will need various information about the dogs like different breeds of the dogs, the age, size, etc.\n\nYou need to model real-life beings, i.e., dogs into software entities.\n\n![Java Classes and Objects ](https://www.guru99.com/images/java/052016_0704_ObjectsandC1.jpg)\n\nMoreover, the million dollar question is, how you design such software?\n\n**Here is the solution**, First let’s do an exercise.\n\nYou can see the picture of three different breeds of dogs below.\n\n![Java Classes and Objects](https://www.guru99.com/images/java/052016_0704_ObjectsandC2.jpg)\n\nStop here right now! List down the differences between them.\n\nSome of the differences you might have listed out maybe breed, age, size, color, etc. If you think for a minute, these differences are also some common characteristics shared by these dogs. These characteristics (breed, age, size, color) can form a data members for your object.\n\n![Java Classes and Objects](https://www.guru99.com/images/java/052016_0704_ObjectsandC3.jpg)\n\n\nNext, list out the common behaviors of these dogs like sleep, sit, eat, etc. So these will be the actions of our software objects.\n\n![Java Classes and Objects](https://www.guru99.com/images/java/052016_0704_ObjectsandC4.jpg)\n\nSo far we have defined following things,\n\n* **Class** – Dogs\n* **Data members** or **objects**– size, age, color, breed, etc.\n* **Methods**– eat, sleep, sit and run.\n\n![Java Classes and Objects](https://www.guru99.com/images/java/052016_0704_ObjectsandC5.jpg)\n\nNow, for different values of data members (breed size, age, and color) in Java class, you will get different dog objects.\n\n![Java Classes and Objects](https://www.guru99.com/images/java/052016_0704_ObjectsandC6.jpg)\n\nYou can design any program using this OOPs approach.\n\nWhile creating a class, one must follow the following principles.\n\n* **Single Responsibility Principle (SRP)-** A class should have only one reason to change\n* **Open Closed Responsibility (OCP)-** It should be able to extend any classes without modifying it\n* **Liskov Substitution Responsibility (LSR)-** Derived classes must be substitutable for their base classes\n* **Dependency Inversion Principle (DIP)-** Depend on abstraction and not on concretions\n* **Interface Segregation Principle (ISP)-** Prepare fine grained interfaces that are client specific.\n\n### Example Program using Classes and Objects\n\n    // Class Declaration\n    public class Dog {\n        // Instance Variables\n        String breed;\n        String size;\n        int age;\n        String color;\n    \n    \n        // method 1\n        public String getInfo() {\n            return (\"Breed is: \"+breed+\" Size is:\"+size+\" Age is:\"+age+\" color is: \"+color);\n        }\n        \n    \n        public static void main(String[] args) {\n            Dog maltese = new Dog();\n            maltese.breed=\"Maltese\";\n            maltese.size=\"Small\";\n            maltese.age=2;\n            maltese.color=\"white\";\n            System.out.println(maltese.getInfo());\n        }\n    }\n\n**Output:**\n\n```\nBreed is: Maltese \nSize is:Small \nAge is:2 \ncolor is: white\n```\n\n### Example Program with Main outside class\n\nIn previous program, we are creating main() method inside the class. Now, we create classes and define main() method in another class. This is a better way than previous one.\n\n    // Class Declaration\n    class Dog {\n        // Instance Variables\n        String breed;\n        String size;\n        int age;\n        String color;\n    \n    \n        // method 1\n        public String getInfo() {\n            return (\"Breed is: \"+breed+\" Size is:\"+size+\" Age is:\"+age+\" color is: \"+color);\n        }\n    }\n    public class Execute{\n        public static void main(String[] args) {\n            Dog maltese = new Dog();\n            maltese.breed=\"Maltese\";\n            maltese.size=\"Small\";\n            maltese.age=2;\n            maltese.color=\"white\";\n            System.out.println(maltese.getInfo());\n        }\n    }\n\n**Output:**\n\n```\nBreed is: Maltese \nSize is:Small \nAge is:2 \nColor is: white\n```\n\n### Summary:\n\n* Java Class is an entity that determines how Java Objects will behave and what objects will contain\n* A Java object is a self-contained component which consists of methods and properties to make certain type of data useful\n* A class system allows the program to define a new class (derived class) in terms of an existing class (superclass) by using a technique like inheritance, overriding and augmenting.\n"],"7":["OOPs Concepts in a Nutshell","\n# OOPs Concepts in a Nutshell\n\n![](https://miro.medium.com/v2/1*vY4pkH1Ky9PEK92HGhNCKg.png)\n\nObject-Oriented Programming is a programming style that is associated with the concepts like class, object, Inheritance, Encapsulation, Abstraction, Polymorphism. \n\nMost popular programming languages like Java, C++, C#, Ruby, etc. follow an object-oriented programming paradigm. In this lesson, we will talk about object-oriented programming concepts in Java. \n\nAn object-based application in Java is based on declaring classes, creating objects from them, and interacting between these objects. \n\nWe will understand the below core concepts of Object-oriented Programming in the following sequence:\n\n1. Inheritance\n2. Encapsulation\n3. Abstraction\n4. Polymorphism\n\nLet’s get started with the first Object Oriented Programming concept i.e. **Inheritance**.\n\n## Inheritance\n\nIn OOP, computer programs are designed in such a way where everything is an object that interact with one another. Inheritance is one such concept where the properties of one class can be inherited by the other. It helps to reuse the code and establish a relationship between different classes.\n\n![](https://miro.medium.com/v2/resize:fit:468/1*yG7ik5NlMj1Oy9VFHneeHA.png)\n\nAs we can see in the image, a child inherits the properties from his father. Similarly, in Java, there are two classes:\n\n1. **Parent class** ( Super or Base class)\n2. **Child class** (Subclass or Derived class )\n\nA class that inherits the properties is known as Child Class whereas a class whose properties are inherited is known as Parent class.\n\n**Inheritance is further classified into 4 types:**\n\n![](https://miro.medium.com/v2/resize:fit:700/1*7Y8g1TPvM1x-0Iv5cfshWQ.png)\n\nSo let’s begin with the first type of inheritance,\n\n### Single Inheritance:\n\n![](https://miro.medium.com/v2/resize:fit:144/1*d7KPjhqLgWdw5G_gJnZOeA.png)\n\nIn single inheritance, one class inherits the properties of another. It enables a derived class to inherit the properties and behavior of a single parent class. \n\nThis will, in turn, enable code re-usability as well as add new features to the existing code.\n\nHere, Class A is your parent class and Class B is your child class which inherits the properties and behavior of the parent class.\n\nLet’s see the syntax for single inheritance:\n\n```\nClass A {\n  -- -\n}\nClass B extends A {\n  -- -\n}\n```\n\n### Multilevel Inheritance:\n\n![](https://miro.medium.com/v2/resize:fit:204/1*amFcGRdYEj0ddCDj9gqp7Q.png)\n\nWhen a class is derived from a class which is also derived from another class, i.e. a class having more than one parent class but at different levels, such type of inheritance is called Multilevel Inheritance.\n\nIf we talk about the flowchart, class B inherits the properties and behavior of class A and class C inherits the properties of class B. \n\nHere A is the parent class for B and class B is the parent class for C. \n\nSo in this case class C implicitly inherits the properties and methods of class A along with Class B. That’s what is multilevel inheritance.\n\nLet’s see the syntax for multilevel inheritance in Java:\n\n```\nClass A {\n    -- -\n}\nClass B extends A {\n    -- -\n}\nClass C extends B {\n    -- -\n}\n```\n\n### Hierarchical Inheritance:\n\n![](https://miro.medium.com/v2/resize:fit:300/1*aBOtNdCin5k6iiT03-P_OA.png)\n\nWhen a class has more than one child classes (subclasses) or in other words, more than one child classes have the same parent class, then such kind of inheritance is known as **hierarchical**.\n\nIf we talk about the flowchart, Class B and C are the child classes which are inheriting from the parent class i.e Class A.\n\nLet’s see the syntax for hierarchical inheritance in Java:\n\n```\nClass A {\n    -- -\n}\nClass B extends A {\n    -- -\n}\nClass C extends A {\n    -- -\n}\n```\n\n### Hybrid Inheritance :\n\nHybrid inheritance is a combination of **multiple** inheritance and **multilevel** inheritance. Since multiple inheritances is not supported in Java as it leads to ambiguity, so this type of inheritance can only be achieved through the use of the interfaces.\n\nIf we talk about the flowchart, class A is a parent class for class B and C, whereas Class B and C are the parent class of D which is the only child class of B and C.\n\nNow we have learned about inheritance and their different types. Let’s switch to another object-oriented programming concept i.e **Encapsulation**.\n\n## Encapsulation\n\nEncapsulation is a mechanism where you bind your data and code together as a single unit. It also means to hide your data in order to make it safe from any modification. \n\nWhat does this mean? The best way to understand encapsulation is to look at the example of a medical capsule, where the drug is always safe inside the capsule. \n\nSimilarly, through encapsulation, the methods and variables of a class are well hidden and safe.\n\n![](https://www.simplilearn.com/ice9/free_resources_article_thumb/Encapsulation_in_Java.png)\n\n**We can achieve encapsulation in Java by:**\n\n* Declaring the variables of a class as private.\n* Providing public setter and getter methods to modify and view the variables values.\n\nLet us look at the code below to get a better understanding of encapsulation:\n\n    public class Employee {  \n        private String name;\n\n        public String getName() {  \n            return name;  \n        }  \n        public void setName(String name) {  \n            this.name = name;  \n        }  \n        public static void main(String[] args) {  \n        }  \n    }\n\nLet us try to understand the above code. We have created a class Employee which has a private variable **name.** We have then created a **getter** and **setter methods** through which we can get and set the name of an employee. \n\nThrough these methods, any class which wishes to access the name variable has to do it using these getter and setter methods.\n\nLet’s move forward to our third Object-oriented programming concept i.e. **Abstraction**.\n\n## Abstraction\n\n![](https://lh5.googleusercontent.com/02k2rZ8jHbX4s229xRJG4nKTH2YKCFiPo_21uGrGSNxHOrR-a59ikeCLdS_sKIb93vTop6D2YebziRPB6DoNRrRTh2Aj6-Wj9uLrr505Q1z7G5qi2quxaGj5diZZikjT_W3iLoH8XwV-HOW0lbhrbZsN3nlR2_ksIFrNL6oRfjbf6U0kzGy5inoEadm_Aw)\n\nAbstraction refers to the quality of dealing with ideas rather than events. \n\nIt basically deals with hiding the details and showing the essential things to the user. If you look at the image here, whenever we get a call, we get an option to either pick it up or just reject it. \n\nBut in reality, there is a lot of code that runs in the background. So you don’t know the internal processing of how a call is generated, that’s the beauty of abstraction. \n\nTherefore, abstraction helps to reduce complexity. **You can achieve abstraction in two ways**:\n\na) Abstract Class\n\nb) Interface\n\nLet’s understand these concepts in more detail.\n\n### Abstract class :\n\nAbstract class in Java contains the ‘**abstract**’ keyword. Now, what does the abstract keyword mean? If a class is declared abstract, it cannot be instantiated, which means you cannot create an object of an abstract class. \n\nAlso, an abstract class can contain abstract as well as concrete methods.\n\n**Note: You can achieve 0–100% abstraction using an abstract class.**\n\nTo use an abstract class, you have to inherit it from another class where you have to provide implementations for the abstract methods there itself, else it will also become an abstract class.\n\nLet’s look at the syntax of an abstract class:\n\n    Abstract class Mobile {   // abstract class mobile  \n    Abstract void run();      // abstract method\n\n### Interface :\n\nAn interface in Java is a blueprint of a class or you can say it is a collection of abstract methods and static constants. \n\nIn an interface, each method is public and abstract but it does not contain any constructor. Along with abstraction, the interface also helps to achieve multiple inheritances in Java.\n\n**Note: You can achieve 100% abstraction using interfaces.**\n\nSo an interface basically is a group of related methods with empty bodies. Let us understand interfaces better by taking an example of a ‘ParentCar’ interface with its related methods.\n\n    public interface ParentCar {  \n        public void changeGear( int newValue);  \n        public void speedUp(int increment);  \n        public void applyBrakes(int decrement);  \n    }\n\nThese methods need to be present for every car, right? But their working is going to be different.\n\nLet’s say you are working with a manual car, there you have to increment the gear one by one, but if you are working with an automatic car, that time your system decides how to change gear with respect to speed. \n\nTherefore, not all my subclasses have the same logic written for **change gear**. The same case is for **speedup**, now let’s say when you press an accelerator, it speeds up at the rate of 10kms or 15kms. \n\nBut suppose, someone else is driving a supercar, where it increments by 30kms or 50kms. Again the logic varies. Similarly for **applybrakes**, where one person may have powerful brakes, other may not.\n\nSince all the functionalities are common with all my subclasses, We have created an interface called ‘ParentCar’ where all the functions are present. \n\nAfter that, I will create a child class which implements this interface, where the definition to all these methods varies.\n\nNext, let’s look into the functionality as to how you can implement this interface.\n\nSo to implement this interface, the name of your class would change to any particular brand of a Car, let’s say I’ll take an “Audi”. \n\nTo implement the class interface, We want to use the ‘implement’ keyword as seen below:\n\n    public class Audi implements ParentCar {\n        int speed = 0;\n        int gear = 1;\n\n        public void changeGear(int value) {\n            gear = value;\n        }\n        public void speedUp(int increment) {\n            speed = speed + increment;\n        }\n        public void applyBrakes(int decrement) {\n            speed = speed - decrement;\n        }\n        void printStates() {\n            System.out.println(\"speed:\" + speed + \"gear:\" + gear);\n        }\n        public static void main(String[] args) {\n            // TODO Auto-generated method stub  \n            Audi A6 = new Audi();\n            A6.speedUp(50);\n            A6.printStates();\n            A6.changeGear(4);\n            A6.SpeedUp(100);\n            A6.printStates();\n        }\n    }\n\nHere as you can see, We have provided functionalities to the different methods in our interface class. \n\nImplementing an interface allows a class to become more formal about the behavior it promises to provide. \n\nYou can create another class as well, say for example BMW class which can inherit the same interface ‘car’ with different functionalities.\n\nSo I hope you guys are clear with the interface and how you can achieve abstraction using it.\n\nFinally, the last Object-oriented programming concept is **Polymorphism**.\n\n## Polymorphism\n\nPolymorphism means taking many forms, where ‘**poly**’ means many and ‘morph’ means forms. \n\nIt is the ability of a variable, function or object to take on multiple forms. \n\nIn other words, polymorphism allows you define one interface or method and have multiple implementations.\n\nLet’s understand this by taking a real-life example and how this concept fits into Object-oriented programming.\n\n![](https://miro.medium.com/v2/resize:fit:700/1*QRFuzb9tHetJIV2LDjuxuA.png)\n\nLet’s consider this real-world scenario in cricket, we know that there are different types of bowlers i.e. Fast bowlers, Medium pace bowlers and spinners. \n\nAs you can see in the above figure, there is a parent class- **BowlerClass** and it has three child classes: **FastPacer**, **MediumPacer,** and **Spinner**. \n\nBowler class has `bowlingMethod()` where all the child classes are inheriting this method. \n\nAs we all know that a fast bowler will be going to bowl differently as compared to medium pacer and spinner in terms of bowling speed, long run up and way of bowling, etc. \n\nSimilarly, a medium pacer’s implementation of `bowlingMethod()` is also going to be different as compared to other bowlers. And the same happens with spinner class. \n\nThe point of the above discussion is simply that the same name tends to multiple forms. \n\nAll the three classes above inherited the `bowlingMethod()` but their implementation is totally different from one another.\n\n**Polymorphism in Java is of two types:**\n\n1. Runtime polymorphism\n2. Compile time polymorphism\n\n### Runtime Polymorphism :\n\nIn Java, runtime polymorphism refers to a process in which a call to an overridden method is resolved at runtime rather than at compile-time. \n\nIn this, a reference variable is used to call an overridden method of a superclass at runtime. \n\nMethod overriding is an example of runtime polymorphism. \n\nLet us look the following code to understand how the method overriding works:\n\n    public Class BowlerClass {\n        void bowlingMethod() {\n            System.out.println(\" bowler \");\n        }\n        public Class FastPacer {\n            void bowlingMethod() {\n            System.out.println(\" fast bowler \");\n            }\n            Public static void main(String[] args) {\n            FastPacer obj = new FastPacer();\n            obj.bowlingMethod();\n        }\n    }\n\n### Compile Time Polymorphism :\n\nIn Java, compile-time polymorphism refers to a process in which a call to an overloaded method is resolved at compile time rather than at runtime. \n\nMethod overloading is an example of compile time polymorphism. \n\nMethod Overloading is a feature that allows a class to have two or more methods having the same name but the arguments passed to the methods are different.\n\n**Unlike method overriding, arguments can differ in:**\n\n1. Number of parameters passed to a method\n2. Datatype of parameters\n3. The sequence of datatypes when passed to a method.\n\nLet us look at the following code to understand how the method overloading works:\n\n    class Adder {\n    Static int add(int a, int b) {\n        return a + b;\n    }\n    static double add(double a, double b) {\n        return a + b;\n    }\n    \n    public static void main(String args[]) {\n        System.out.println(Adder.add(11, 11));\n        System.out.println(Adder.add(12.3, 12.6));\n    }\n    }\n"],"8":["Exception Handling","\n# Exception Handling\n\n![](https://img.freepik.com/premium-vector/two-guys-ran-into-warning-error_701961-4078.jpg)\n\nAn **exception** is an error event that can happen during the execution of a program and disrupts its normal flow. \n\nJava provides a robust and object-oriented way to handle exception scenarios known as Java Exception Handling.\n\nExceptions in Java can arise from different kinds of situations such as wrong data entered by the user, hardware failure, network connection failure, or a database server that is down. \n\nThe code that specifies what to do in specific exception scenarios is called exception handling.\n\n## Throwing and Catching Exceptions\n\nJava creates an exception object when an error occurs while executing a statement. \n\nThe exception object contains a lot of debugging information such as method hierarchy, line number where the exception occurred, and type of exception.\n\nIf an exception occurs in a method, the process of creating the exception object and handing it over to the runtime environment is called “throwing the exception”. \n\nThe normal flow of the program halts and the Java Runtime Environment (JRE) tries to find the handler for the exception. \n\nException Handler is the block of code that can process the exception object.\n\n* The logic to find the exception handler begins with searching in the method where the error occurred.\n* If no appropriate handler is found, then it will move to the caller method.\n* And so on.\n\nSo if the method’s call stack is `A->B->C` and an exception is raised in method `C`, then the search for the appropriate handler will move from `C->B->A`.\n\nIf an appropriate exception handler is found, the exception object is passed to the handler to process it. The handler is said to be “catching the exception”. \n\nIf there is no appropriate exception handler, found then the program terminates and prints information about the exception to the console.\n\nJava Exception handling framework is used to handle runtime errors only. \n\nThe compile-time errors have to be fixed by the developer writing the code else the program won’t execute.\n\n### Java Exception Handling Keywords\n\nJava provides specific keywords for exception handling purposes.\n\n1. **throw** – We know that if an error occurs, an exception object is getting created and then Java runtime starts processing to handle them. Sometimes we might want to generate exceptions explicitly in our code. For example, in a user authentication program, we should throw exceptions to clients if the password is `null`. The `throw` keyword is used to throw exceptions to the runtime to handle it.\n2. **throws** – When we are throwing an exception in a method and not handling it, then we have to use the `throws` keyword in the method signature to let the caller program know the exceptions that might be thrown by the method. The caller method might handle these exceptions or propagate them to its caller method using the `throws` keyword. We can provide multiple exceptions in the `throws` clause, and it can be used with the `main()` method also.\n3. **try-catch** – We use the `try-catch` block for exception handling in our code. `try` is the start of the block and `catch` is at the end of the `try` block to handle the exceptions. We can have multiple `catch` blocks with a `try` block. The `try-catch` block can be nested too. The `catch` block requires a parameter that should be of type `Exception`.\n4. **finally** – the `finally` block is optional and can be used only with a `try-catch` block. Since exception halts the process of execution, we might have some resources open that will not get closed, so we can use the `finally` block. The `finally` block always gets executed, whether an exception occurred or not.\n\n### Java Exception Hierarchy\n\nAs stated earlier, when an exception is raised an exception object is getting created. \n\nJava Exceptions are hierarchical and inheritance is used to categorize different types of exceptions. \n\n`Throwable` is the parent class of Java Exceptions Hierarchy and it has two child objects – `Error` and `Exception`. \n\n`Exception`s are further divided into Checked `Exception`s and Runtime `Exception`s.\n\n1. **Errors**: `Error`s are exceptional scenarios that are out of the scope of application, and it’s not possible to anticipate and recover from them. For example, hardware failure, Java virtual machine (JVM) crash, or out-of-memory error. That’s why we have a separate hierarchy of `Error`s and we should not try to handle these situations. Some of the common `Error`s are `OutOfMemoryError` and `StackOverflowError`.\n\n2. **Checked Exceptions**: Checked `Exception`s are exceptional scenarios that we can anticipate in a program and try to recover from it. For example, `FileNotFoundException`. We should catch this exception and provide a useful message to the user and log it properly for debugging purposes. The `Exception` is the parent class of all Checked `Exception`s. If we are throwing a Checked `Exception`, we must `catch` it in the same method, or we have to propagate it to the caller using the `throws` keyword.\n\n3. **Runtime Exception**: Runtime `Exception`s are caused by bad programming. For example, trying to retrieve an element from an array. We should check the length of the array first before trying to retrieve the element otherwise it might throw `ArrayIndexOutOfBoundException` at runtime. `RuntimeException` is the parent class of all Runtime `Exception`s. If we are `throw`ing any Runtime `Exception` in a method, it’s not required to specify them in the method signature `throws` clause. Runtime exceptions can be avoided with better programming.\n\n![](https://journaldev.nyc3.cdn.digitaloceanspaces.com/2013/07/exception-hierarchy.png)\n\n## Example Program\n\n    public class ExceptionHandlingExample {\n        public static void main(String[] args) {\n            try {\n                // Code that may throw an exception\n                int result = divide(10, 0);\n                System.out.println(\"Result: \" + result);\n            } catch (ArithmeticException e) {\n                // Exception handling code for ArithmeticException\n                System.err.println(\"Error: Division by zero\");\n            } finally {\n                // Code to be executed regardless of whether an exception occurred or not\n                System.out.println(\"Program execution completed.\");\n            }\n        }\n    \n        // Method to perform division\n        public static int divide(int numerator, int denominator) {\n            if (denominator == 0) {\n                throw new ArithmeticException(\"Division by zero error\");\n            }\n            return numerator / denominator;\n        }\n    }\n\n### Explanation:\n\n- The `main()` method is the entry point of the program. Inside the `main()` method, we have a `try-catch-finally` block to handle exceptions.\n\n- Inside the `try` block, we have the code that may throw an exception. We call the `divide()` method with arguments `10` and `0`, which may cause an `ArithmeticException` due to division by zero.\n\n- If an `ArithmeticException` occurs during the execution of the `try` block, control is transferred to the corresponding `catch` block. In this example, the `catch` block catches `ArithmeticException` and prints an error message indicating \"Division by zero\".\n\n- The `finally` block contains code that is executed regardless of whether an exception occurs or not. It is typically used for cleanup tasks such as closing resources. In this example, it prints \"Program execution completed.\"\n\n- The `divide()` method performs division and throws an `ArithmeticException` if the denominator is zero. This is an example of how to manually throw an exception using the `throw` keyword.\n\n### Program Execution:\n\n1. Inside the `try` block, the `divide()` method is called with arguments `10` and `0`.\n\n2. Since the denominator is `0`, an `ArithmeticException` is thrown.\n\n3. Control is transferred to the corresponding `catch` block, where the error message \"Error: Division by zero\" is printed to the standard error stream.\n\n4. Regardless of whether an exception occurred or not, the `finally` block is executed, and \"Program execution completed.\" is printed to the standard output.\n\n### Summary:\n\nException handling in Java allows you to handle runtime errors gracefully, improving the robustness of your programs. \n\nBy using `try`, `catch`, `finally`, and `throw` keywords, you can effectively handle exceptional situations and ensure proper cleanup of resources. \n\nIt is essential to use exception handling judiciously to handle errors effectively and maintain code reliability.  \n"],"9":["Introduction to Packages","\n# Introduction to Packages\n\n![](https://www.appsierra.com/_next/image?url=https%3A%2F%2Fduws858oznvmq.cloudfront.net%2Fweb_application_development_using_java_009da5ae75.webp&w=1080&q=100)\n\nOne of the most innovative Packages in Java are a way to encapsulate a group of classes, interfaces, enumerations, annotations, and sub-packages. \n\nConceptually, you can think of java packages as being similar to different folders on your computer. \n\nIn this lesson, we will cover the basics of packages in features of Java is the concept of packages. Java.\n\n## What is Package in Java?\n\nJava package is a mechanism of grouping similar types of classes, interfaces, and sub-classes collectively based on functionality. \n\nWhen software is written in the Java programming language, it can be composed of hundreds or even thousands of individual classes. \n\nIt makes sense to keep things organized by placing related classes and interfaces into packages.\n\nUsing packages while coding offers a lot of advantages like:\n\n* **Re-usability:** The classes contained in the packages of another program can be easily reused\n* help us to uniquely identify a class, for example, we can have **Name Conflicts:** Packages `company.sales.Employee` and `company.marketing.Employee` classes\n* **Controlled Access:** Offers access protection such as protected classes, default classes, and private class\n* **Data Encapsulation:** They provide a way to hide classes, preventing other programs from accessing classes that are meant for internal use only\n* **Maintainance:** With packages, you can organize your project better and easily locate related classes\n\nIt’s a good practice to use packages while coding in Java. As a programmer, you can easily figure out the classes, interfaces, enumerations, and annotations that are related. \n\nWe have two types of packages in java.\n\n## Types of Packages in Java\n\nBased on whether the package is defined by the user or not, packages are divided into two categories:\n\n1. Built-in Packages\n2. User-Defined Packages\n\n### Built-in Packages\n\nBuilt-in packages or predefined packages are those that come along as a part of JDK (Java Development Kit) to simplify the task of Java programmer. \n\nThey consist of a huge number of predefined classes and interfaces that are a part of Java API’s. \n\nSome of the commonly used built-in packages are java.lang, java.io, java.util, java.applet, etc. Here’s a simple program using a built-in package.\n\n    import java.util.ArrayList;\n    class BuiltInPackage {\n    public static void main(String[] args) {\n        ArrayList < Integer > myList = new ArrayList < > (3);\n        myList.add(3);\n        myList.add(2);\n        myList.add(1);\n        System.out.println(\"The elements of list are: \" + myList);\n    }\n    }\n\n**Output:**\n\n```\nThe elements of list are: [3, 2, 1]\n```\n\nThe ArrayList class belongs to java.util package. To use it, we have to import the package using the import statement. \n\nThe first line of the code `import java.util.ArrayList` imports the java.util package and uses ArrayList class which is present in the subpackage util.\n\n### User-Defined Packages\n\nUser-defined packages are those which are developed by users in order to group related classes, interfaces, and sub-packages. \n\nWith the help of an example program, let’s see how to create packages, compile Java programs inside the packages, and execute them.\n\n#### Creating a Package in Java\n\nCreating a package in Java is a very easy task. Choose a name for the package and include a `package` command as the first statement in the Java source file. \n\nThe java source file can contain the classes, interfaces, enumerations, and annotation types that you want to include in the package. For example, the following statement creates a package named **MyPackage.**\n\n```\npackage MyPackage;\n```\n\nThe package statement simply specifies to which package the classes defined belongs to.\n\n**Note:** If you omit the package statement, the class names are put into the default package, which has no name. Though the default package is fine for short programs, it is inadequate for real applications.\n\n#### Including a Class in Java Package\n\nTo create a class inside a package, you should declare the package name as the first statement of your program. Then include the class as part of the package. \n\nBut, remember that, a class can have only one package declaration. Here’s a simple program to understand the concept.\n\n    package MyPackage;\n    public class Compare {\n    int num1, num2;\n    Compare(int n, int m) {\n        num1 = n;\n        num2 = m;\n    }\n    public void getmax() {\n        if (num1 > num2) {\n        System.out.println(\"Maximum value of two numbers is \" + num1);\n        } else {\n        System.out.println(\"Maximum value of two numbers is \" + num2);\n        }\n    }\n    public static void main(String args[]) {\n        Compare current[] = new Compare[3];\n        current[1] = new Compare(5, 10);\n        current[2] = new Compare(123, 120);\n        for (int i = 1; i < 3; i++) {\n        current[i].getmax();\n        }\n    }\n    }\n\n**Output:**\n\n```\nMaximum value of two numbers is 10 \nMaximum value of two numbers is 123\n```\n\nAs you can see, We have declared a package named MyPackage and created a class Compare inside that package. \n\nJava uses file system directories to store packages. So, this program would be saved in a file as and will be stored in the directory named MyPackage. \n\nWhen the file gets compiled, Java will create a `Compare.java_` .class file and store it in the same directory. Remember that name of the package must be same as the directory under which this file is saved.\n\nYou might be wondering how to use this Compare class from a class in another package?\n\n#### Creating a class inside a package while importing another package\n\nWell, it’s quite simple. You just need to import it. Once it is imported, you can access it by its name. Here’s a sample program demonstrating the concept.\n\n    package EASC;\n    import MyPackage.Compare;\n    public class Demo {\n    public static void main(String args[]) {\n        int n = 10, m = 10;\n        Compare current = new Compare(n, m);\n        if (n != m) {\n        current.getmax();\n        } else {\n        System.out.println(\"Both the values are same\");\n        }\n    }\n    }\n\n**Output:**\n\n```\nBoth the values are same\n```\n\nWe have first declared the package `EASC`, then imported the class `Compare` from the package MyPackage. So, the order when we are creating a class inside a package while importing another package is,\n\n* Package Declaration\n* Package Import\n\nWell, if you do not want to use the import statement, there is another alternative to access a class file of the package from another package. You can just use fully qualified name while importing a class.\n\n#### Using fully qualified name while importing a class\n\nHere’s an example to understand the concept. I am going to use the same package that We have declared earlier, `MyPackage`.\n\n    package EASC;\n    public class Demo {\n    public static void main(String args[]) {\n        int n = 10, m = 11;\n        //Using fully qualified name instead of import\n        MyPackage.Compare current = new MyPackage.Compare(n, m);\n        if (n != m) {\n        current.getmax();\n        } else {\n        System.out.println(\"Both the values are same\");\n        }\n    }\n    }\n\n**Output:**\n\n```\nMaximum value of two numbers is 11\n```\n\nIn the Demo class, instead of importing the package, We have used a fully qualified name such as `MyPackage.Compare` to create the object of it. \n\nSince we are talking about importing packages, you might as well check out the concept of static import in Java.\n\n### Static Import in Java\n\nStatic import feature was introduced in Java from version 5. It facilitates the Java programmer to access any static member of a class directly without using the fully qualified name.\n\n    package MyPackage;\n    import static java.lang.Math.*; //static import\n    import static java.lang.System.*; // static import\n    \n    public class StaticImportDemo {\n    public static void main(String args[]) {\n        double val = 64.0;\n        double sqroot = sqrt(val); // Access sqrt() method directly\n        out.println(\"Sq. root of \" + val + \" is \" + sqroot); //We don't need to use 'System.out\n    }\n    }\n\n**Output :**\n```\nSq. root of 64.0 is 8.0\n```\n\nThough using static import involves less coding, overusing it might make the program unreadable and unmaintainable. Now let’s move on to the next topic, access control in packages.\n\n### Access Protection in Java Packages\n\nYou might be aware of various aspects of Java’s access control mechanism and its access specifiers. Packages in Java add another dimension to access control. \n\nBoth classes and packages are a means of data encapsulation. While packages act as containers for classes and other subordinate packages, classes act as containers for data and code. \n\nBecause of this interplay between packages and classes, Java packages addresses four categories of visibility for class members:\n\n* Sub-classes in the same package\n* Non-subclasses in the same package\n* Sub-classes in different packages\n* Classes that are neither in the same package nor sub-classes\n\nThe table below gives a real picture of which type access is possible and which is not when using packages in Java:\n\n![](https://miro.medium.com/v2/resize:fit:700/1*itxUdwQpUMSFHycdI-RSIQ.png)\n\nWe can simplify the data in the above table as follows:\n\n1. Anything declared public can be accessed from anywhere\n2. Anything declared private can be seen only within that class\n3. If access specifier is not mentioned, an element is visible to subclasses as well as to other classes in the same package\n4. Lastly, anything declared protected element can be seen outside your current package, but only to classes that subclass your class directly\n\nThis way, Java packages provide access control to the classes. Well, this wraps up the concept of packages in Java. \n\nHere are some points that you should keep in mind when using packages in Java.\n\n### Points to Remember\n\n* Every class is part of some package. If you omit the package statement, the class names are put into the default package\n* A class can have only one package statement but it can have more than one import package statements\n* The name of the package must be the same as the directory under which the file is saved\n* When importing another package, package declaration must be the first statement, followed by package import\n"],"10":["File I/O and Handling in Java","\n# File I/O and Handling in Java\n\n![](https://www.robomq.io/wp-content/uploads/2019/07/file-to-api-workflow.png)\n\nThis document introduces the basic concepts of java File I/O package. \n\nWhat if you want to access a file through code anytime? When you develop any java application then you will get the requirement to interact with various input/output devices. Input-Output devices are the part of underlying hardware and operating system. \n\nTo interact with the Input-Output devices through java program/application some implementations had to be used to improve the maintenance of applications when someone changes device or OS.\n\nTo resolve this, java vendor provided API in **java.io** package in which each class represents one source or device. This lesson will help you to understand about the java I/O package and file handling process.  \n\n## What is File I/O?\n\nJava I/O stream is the flow of data that you can either read from, or you can write to.  \nIt is used to perform read and write operations in file permanently. \n\nJava uses streams to perform these tasks. **Java I/O stream** is also called **File Handling**, or **File I/O.** It is available in **java.io** package.  \n\n![](https://intellipaat.com/mediaFiles/2015/11/mj1-460x163.png)\n\nJava.io package provides classes for system input and output through files, network streams, memory buffers, etc.  \n\n![](https://intellipaat.com/mediaFiles/2015/11/mj2-460x135.png)\n\nSome input-output stream will be initialized automatically by the JVM and these streams are available in System class as **in**, **out**, and **err** variable.\n\n* **In** reference refers to the default input device, i.e. keyboard.\n* **Out** and **err** refers to the default output device, i.e. console.\n\n## Streams\n\nStream can be defined as a sequence of data. The InputStream is used to read data from a source and the OutputStream is used for writing data to a destination\n\nHere is a hierarchy of classes to deal with Input and Output streams.\n\n![](https://www.tutorialspoint.com/java/images/file_io.jpg)\n\nThere are two types of streams:\n\n* Input Streams\n* Output Streams\n\n### **Input Streams**:\n\nInput streams are used to read the data from various input devices like keyboard, file, network, etc.\n\n### **Output Streams**:\n\nOutput streams are used to write the data to various output devices like monitor, file, network, etc.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj3-460x239.png)\n\n### Streams based on data\n\nThere are two types of streams based on data:\n\n* **Byte Stream**: used to read or write byte data.\n* **Character Stream**: used to read or write character data.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj4-460x219.png)\n\n### **Byte Input Stream:**\n\n* These are used to read byte data from various input devices.\n* InputStream is an abstract class and it is the super class of all the input byte streams.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj5-460x259.png)\n\n### **Byte Output Stream:**\n\n* These are used to write byte data to various output devices.\n* Output Stream is an abstract class and it is the superclass for all the output byte streams.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj6-460x260.png)\n\n### **Character Input Stream:**\n\n* These are used to read char data from various input devices.\n* Reader is an abstract class and is the super class for all the character input streams.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj7-460x286.png)\n\n\n### **Character Output Stream:**\n\n* These are used to write char data to various output devices.\n* Writer is an abstract class and is the super class of all the character output streams.\n\n![](https://intellipaat.com/mediaFiles/2015/11/mj8-460x266.jpg)\n\n## File Handling\n\nIn Java, with the help of File Class, we can work with files. This File Class is inside the java.io package. \n\nThe File class can be used by creating an object of the class and then specifying the name of the file.\n\n### Why File Handling is Required?\n\n* File Handling is an integral part of any programming language as file handling enables us to store the output of any particular program in a file and allows us to perform certain operations on it.\n* In simple words, file handling means reading and writing data to a file.\n\n## Java File Class Methods\n\nThe following table depicts several File Class methods:\n\n| Method Name | Description |\n|---|---|\n| canRead() | &nbsp;It tests whether the file is readable or not.&nbsp; |\n| canWrite() | It tests whether the file is writable or not. |\n| createNewFile() | It creates an empty file. |\n| delete() | It deletes a file. |\n| exists() | It tests whether the file exists or not. |\n| length() | Returns the size of the file in bytes. |\n| getName() | &nbsp;Returns the name of the file. |\n| list() | Returns an array of the files in the directory. |\n| mkdir() | &nbsp;Creates a new directory. |\n| getAbsolutePath() | Returns the absolute pathname of the file. |\n\nLet us now get acquainted with the various file operations in Java.\n\n## **File operations in Java**\n\nThe following are the several operations that can be performed on a file in Java :\n\n* **Create a File**\n* **Read from a File**\n* **Write to a File**\n* **Delete a File**\n\nNow let us study each of the above operations in detail.\n\n### 1. Create a File :\n\n* In order to create a file in Java, you can use the createNewFile() method.\n* If the file is successfully created, it will return a Boolean value true and false if the file already exists.\n\nFollowing is a demonstration of how to create a file in Java :\n\n    // Import the File class\n    import java.io.File;\n    \n    // Import the IOException class to handle errors\n    import java.io.IOException;\n    \n    public class EASC {\n        public static void main(String[] args) {\n    \n        try {\n            File Obj = new File(\"myfile.txt\");\n            if (Obj.createNewFile()) {\n                System.out.println(\"File created: \"\n                                + Obj.getName());\n            }\n            else {\n                System.out.println(\"File already exists.\");\n            }\n         }\n        catch (IOException e) {\n            System.out.println(\"An error has occurred.\");\n            e.printStackTrace();\n         }\n        }\n    }\n\n\n**Output**\n\n```\nFile created: myfile.txt\n```\n\n### 2. Read from a File :\n\nWe will use the Scanner class in order to read contents from a file. \n\nFollowing is a demonstration of how to read contents from a file in Java :\n\n    // Import the File class\n    import java.io.File;\n    \n    // Import this class for handling errors\n    import java.io.FileNotFoundException; \n    \n    // Import the Scanner class to read content from text files\n    import java.util.Scanner; \n    \n    public class EASC {\n        public static void main(String[] args)\n        {\n            try {\n                File Obj = new File(\"myfile.txt\");\n                Scanner Reader = new Scanner(Obj);\n                while (Reader.hasNextLine()) {\n                    String data = Reader.nextLine();\n                    System.out.println(data);\n                }\n                Reader.close();\n            }\n            catch (FileNotFoundException e) {\n                System.out.println(\"An error has occurred.\");\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n**Output**\n\n```\nHello World!\n```\n\nThe text `Hello World!` is printed because it's the content of `myfile.txt`.\n\n### 3. Write to a File :\n\nWe use the FileWriter class along with its write() method in order to write some text to the file. \n\nFollowing is a demonstration of how to write text to a file in Java :\n\n\n    // Import the FileWriter class\n    import java.io.FileWriter; \n    \n    // Import the IOException class for handling errors\n    import java.io.IOException; \n    \n    public class EASC {\n        public static void main(String[] args)\n        {\n            try {\n                FileWriter Writer\n                    = new FileWriter(\"myfile.txt\");\n                Writer.write(\n                    \"Files in Java are seriously good!!\");\n                Writer.close();\n                System.out.println(\"Successfully written.\");\n            }\n            catch (IOException e) {\n                System.out.println(\"An error has occurred.\");\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n**Output**\n\n```\nSuccessfully written.\n```\n\n### 4. Delete a File : \n\nWe use the delete() method in order to delete a file. Following is a demonstration of how to delete a file in Java :\n\n    // Import the File class\n    import java.io.File; \n    \n    public class EASC {\n        public static void main(String[] args)\n        {\n            File Obj = new File(\"myfile.txt\");\n            if (Obj.delete()) {\n                System.out.println(\"The deleted file is : \"\n                                + Obj.getName());\n            }\n            else {\n                System.out.println(\n                    \"Failed in deleting the file.\");\n            }\n        }\n    }\n\n**Output**\n\n```\nThe deleted file is: myfile.txt\n```  \n"]},"PHP":{"1":["Introduction to PHP","\n# Introduction to PHP\n\n![](https://kinsta.com/wp-content/uploads/2020/03/php-tutorials.png)\n\nPHP (Hypertext Processor) is a general-purpose scripting language and interpreter that is freely available and widely used for web development. \n\nThe language is used primarily for server-side scripting, although it can also be used for command-line scripting and, to a limited degree, desktop applications. \n\nThe acronym PHP was originally derived from Personal Home Page Tools, but it now stands for PHP: Hypertext Preprocessor, which the PHP Group's documentation describes as a \"recursive acronym.\"\n\nPHP used for server-side scripting, PHP is added to a webpage for the purpose of generating dynamic content when the page is accessed through a client browser. \n\n## How PHP Program Works ?\n\n![](https://www.freecodecamp.org/news/content/images/2020/02/PHP-server-model.png)\n\nThe web server runs the script before transmitting the page to the browser. \n\nTo support this process, the web server requires PHP to be installed on the server, along with a PHP parser either a Common Gateway Interface (CGI) parser or a server module.\n\nWhen a user requests a webpage from the server, the parser interprets the PHP portion of the page, performs the operations called for in the PHP script, and generates the Hypertext Markup Language (HTML) that results from those operations. \n\nThe HTML is then sent to the client browser, along with any other HTML on the page, providing a seamless rendering of the content. Webpages that contain PHP script are considered to be dynamic HTML pages because content varies based on the results of interpreting the script.\n\n### Working with PHP for server-side scripting\n\nA webpage might be made up entirely of a PHP script, or it might contain one or more PHP scripts that are embedded within standard HTML elements.\n\nIn either case, the webpage itself typically is assigned the `.php` file extension, which informs the web server that the page contains PHP script. \n\nHere's the basic Syntax of PHP,\n\n    <?php \n        // PHP code goes here \n    ?>\n\nThis time we're not gonna write `Hello World!`, we can start with something new!\n\nThe following code provides an example of a simple HTML page named `test.php` that contains an embedded PHP script that presents the day's date:\n\n```xml\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>PHP example</title>\n    </head>\n\n    <body>\n        <h2>Example of PHP in action</h2>\n        <?php\n            $text = \"This is a test PHP script.\";\n            $date = date(\"M j, Y\") ;\n            echo $text.\" Today's date is <b>\".$date.\"</b>.\";\n        ?>\n    </body>\n</html>\n```\n\nMost of the page's content is basic HTML that includes standard `<head>` and `<body>` elements. However, the `<body>` section also contains a PHP script, which is enclosed in the PHP start and end tags `<?php` and `?>`, respectively. \n\nPHP scripts must always be enclosed in these tags, whether they take up the entire page or are embedded as the one shown here.\n\nThe script in this example defines the `$text` variable, which is assigned a string value, and the `$date` variable, which is assigned the current date retrieved through the date function. \n\nThe two variable definitions are followed by an echo statement that concatenates the variables, along with additional text. PHP uses a period (.) to concatenate multiple elements. \n\nThe echo statement also incorporates standard HTML markup `<b>` and `</b>` which specifies that the date should be displayed in bold text.\n\nWhen a client browser accesses the `test.php` page, the web server and PHP parser read the PHP script and return regular HTML. \n\n![](https://cdn.ttgtmedia.com/rms/onlineimages/php_test-h.png)\n\nThis figure shows the webpage as it is displayed in the Google Chrome browser. The text beneath the main heading has been generated by the PHP script.\n\n## Why PHP still used for Backend ?\n\nMost major operating systems support PHP, including Linux, macOS, Windows and many Unix variants, as do most of today's web servers, such as Apache and Microsoft Internet Information Services. \n\nPHP can also interface with a wide range of database platforms, including MySQL, SQLite3, MongoDB, dBase, PostgreSQL and IBM Db2. \n\nIn addition, PHP can communicate with other services through its support for protocols such as Lightweight Directory Access Protocol, Internet Message Access Protocol and Simple Network Management Protocol.\n\nPHP is often contrasted with Microsoft's ASP.NET, an open source web framework. As with ASP.NET, a PHP script can be embedded within a webpage along with HTML elements.\n"],"2":["Variables & Datatypes in PHP","\n# Variables & Datatypes in PHP\n\n![](https://miro.medium.com/v2/0*FcbEOE08Dfa0B_pR.jpg)\n\nA variable in PHP is the name of the memory location that holds data. In PHP, a variable is declared using the `$` sign followed by the variable name.\n\nThe main way to store information in the middle of a PHP program is by using a variable. Here are the most important things to know about variables in PHP.\n\n* All variables in PHP are denoted with a leading dollar sign (`$`).\n* The value of a variable is the value of its most recent assignment.\n* Variables are assigned with the `=` operator, with the variable on the left-hand side and the expression to be evaluated on the right.\n* Variables can but do not need to be declared before assignment.\n* Variables in PHP do not have intrinsic types - a variable does not know in advance whether it will be used to store a number or a string of characters.\n* Variables used before they are assigned have default values.\n* PHP does a good job of automatically converting types from one to another when necessary.\n* Before moving on to Variables, we can take a look at Datatypes (it won't take much time)\n\n## Data Types in PHP\n\n1. **Integer (int)**: \n\nRepresents whole numbers without decimal points, Example below. \n\n    $num = 5;\n\n2. **Float (float)**: \n\nRepresents numbers with decimal points, Example below. \n\n    $num = 3.14;\n\n3. **String (string)**: \n\nRepresents a sequence of characters enclosed within single quotes (`''`) or double quotes (`\"\"`), Example below. \n\n    $name = \"Abdul Khalid\";\n\n4. **Boolean (bool)**: \n\nRepresents true or false values, Example below. \n\n    $is_active = true;\n\n5. **Array (array)**: \n\nRepresents a collection of elements indexed by integers or strings, Example below. \n\n    $colors = array(\"red\", \"green\", \"blue\");\n\n6. **Object (object)**: \n\nRepresents instances of user-defined classes, Example below. \n\n    $person = new Person();\n\n7. **Null (null)**: \n\nRepresents a variable with no value or undefined value, Example below. \n\n    $var = null;\n\n8. **Resource (resource)**: \n\nRepresents a special type that holds references to external resources like file handles or database connections, Example below. \n\n    $file_handle = fopen(\"example.txt\", \"r\");\n\n## Rules for PHP variables\n\n* A variable starts with the `$` sign, followed by the name of the variable\n* A variable name must start with a letter or the underscore character\n* A variable name cannot start with a number\n* A variable name can only contain alpha-numeric characters and underscores (`A-z`, `0-9`, and `_` )\n* Variable names are case-sensitive (`$age` and `$AGE` are two different variables)\n\nSyntax of declaring a variable is:\n\n    $variablename=value;\n\nWorking example,\n\n    <?php\n        $num = 5;         // Integer\n        $price = 3.14;    // Float\n        $name = \"John\";   // String\n        $is_active = true; // Boolean\n        $colors = array(\"red\", \"green\", \"blue\"); // Array\n        $person = new Person();  // Object\n        $var = null;       // Null\n    ?>\n\n## Types of Variable Declaration\n\n1. Constant Variable\n2. Static Variable\n3. Global Variable\n\n### 1. Constant Variable:\n\nConstants are variables whose values cannot be changed once they are defined. \n\nIn PHP, you can define constants using the `define()` function or the `const` keyword.\n\n    // Using define() function\n    define(\"PI\", 3.14);\n    \n    // Using const keyword (available since PHP 5.3)\n    const SITE_NAME = \"My Website\";\n    \n    echo PI; // Output: 3.14\n    echo SITE_NAME; // Output: My Website\n\n### 2. Static Variable:\n\nStatic variables are variables that retain their values across function calls. \n\nThey are initialized only once, and their values are preserved even after the function exits.\n\n    function increment() {\n        static $counter = 0;\n        $counter++;\n        echo $counter . \", \";\n    }\n    \n    increment(); // Output: 1\n    increment(); // Output: 2\n    increment(); // Output: 3\n\n### 3. Global Variable:\n\nGlobal variables are variables that can be accessed from any part of the script, including functions and methods. \n\nHowever, using global variables is generally discouraged due to potential side effects and difficulties in debugging and maintenance.\n\n    $globalVar = 10;\n    \n    function test() {\n        global $globalVar;\n        echo $globalVar; // Output: 10\n    }\n    \n    test();\n"],"3":["Control Structures in PHP","\n# Control Structures in PHP\n\n![](https://i.ibb.co/KKZSsXv/control-structures.webp)\n\nControl structures are core features of the PHP language that allow your script to respond differently to different inputs or situations. \n\nThis could allow your script to give different responses based on user input, file contents, or some other data. The following flowchart depicts the control structures of PHP:\n\n![](https://cdn.buttercms.com/9c5Q7SbMTUSLBwmPxsAx)\n\nThere are two main types of control structures in PHP, Conditional statements and Loops.\n\n## What are conditional statements in PHP?\n\nConditional statements allow you to branch the path of execution in a script based on whether a single or multiple conditions evaluate to true or false. Put simply, they let you test things and perform various actions based on the results.\n\nThere are four types of conditional statements in PHP: \n- if\n- if-else\n- elseif\n- switch.\n\n### If statement\n\nThe if statement is the simplest form of conditional statement. \n\nIt executes a block of code only if a specified condition is true. \n\nThe syntax of the if statement is:\n\n    if (condition) {  \n        // code to be executed if condition is true  \n    }\n\nThe condition can be any expression that evaluates to a boolean value (true or false). The code block can be a single statement or multiple statements enclosed in curly braces.\n\nFor example:\n\n    $x = 10;  \n    if ($x > 0) {  \n        echo \"$x is a positive number.\";  \n    }\n\nThe above code will print “$x is a positive number.” only if the value of $x is greater than zero.\n\n### If-else statement\n\nThe if-else statement is an extension of the if statement. \n\nIt executes one block of code if a specified condition is true, and another block of code if the condition is false. \n\nThe syntax of the if-else statement is:\n\n    if (condition) {  \n        // code to be executed if condition is true  \n    } else {  \n        // code to be executed if condition is false  \n    }\n\nFor example:\n\n    $x = -5;  \n    if ($x > 0) {  \n        echo \"$x is a positive number.\";  \n    } else {  \n        echo \"$x is a negative number.\";  \n    }\n\nThe above code will print “`$x is a negative number.`” because the value of $x is less than zero.\n\n### Else-if statement\n\nThe elseif statement is a further extension of the if-else statement. \n\nIt allows you to test multiple conditions and execute different blocks of code accordingly. \n\nThe syntax of the if-elseif-else statement is:\n\n    if (condition1) {  \n        // code to be executed if condition1 is true  \n    } elseif (condition2) {  \n        // code to be executed if condition2 is true  \n    } elseif (condition3) {  \n        // code to be executed if condition3 is true  \n    } ...  \n    else {  \n        // code to be executed if none of the conditions are true  \n    }\n\nYou can have as many elseif clauses as you want, but only one else clause at the end. \n\nThe conditions are evaluated from top to bottom, and only the first one that evaluates to true will execute its corresponding block of code. \n\nIf none of the conditions are true, the else block will execute.\n\nFor example:\n\n    $grade = 85;  \n    if ($grade >= 90) {  \n        echo \"You got an A.\";  \n    } elseif ($grade >= 80) {  \n        echo \"You got a B.\";  \n    } elseif ($grade >= 70) {  \n        echo \"You got a C.\";  \n    } elseif ($grade >= 60) {  \n        echo \"You got a D.\";  \n    } else {  \n        echo \"You got an F.\";  \n    }\n\nThe above code will print “`You got a B.`” because the value of $grade is between 80 and 90.\n\n### Switch statement\n\nThe switch statement is an alternative way of writing multiple if-elseif-else statements. \n\nIt compares a given expression with several possible values and executes the corresponding block of code. \n\nThe syntax of the switch statement is:\n\n    switch (expression) {  \n        case value1:  \n            // code to be executed if expression matches value1  \n            break;  \n        case value2:  \n            // code to be executed if expression matches value2  \n            break;  \n        case value3:  \n            // code to be executed if expression matches value3  \n            break;  \n        ...  \n        default:  \n            // code to be executed if expression doesn't match any value  \n    }\n\nThe expression can be any value or variable that can be compared with the case values. \n\nThe case values can be any constant or literal value. The break statement is used to end each case block and prevent the execution from falling through to the next case. \n\nThe default block is optional and executes only if none of the case values match the expression.\n\nFor example:\n\n    $day = \"Monday\";  \n    switch ($day) {  \n        case \"Monday\":  \n            echo \"Today is Monday.\";  \n            break;  \n        case \"Tuesday\":  \n            echo \"Today is Tuesday.\";  \n            break;  \n        case \"Wednesday\":  \n            echo \"Today is Wednesday.\";  \n            break;  \n        case \"Thursday\":  \n            echo \"Today is Thursday.\";  \n            break;  \n        case \"Friday\":  \n            echo \"Today is Friday.\";  \n            break;  \n        case \"Saturday\":  \n            echo \"Today is Saturday.\";  \n            break;  \n        case \"Sunday\":  \n            echo \"Today is Sunday.\";  \n            break;  \n        default:  \n            echo \"Invalid day.\";  \n    }\n\nThe above code will print “`Today is Monday.`” because the value of $day matches the first case value.\n\n## What are loops in PHP?\n\nLoops are control structures that allow you to repeat a block of code multiple times until a certain condition is met. \n\nLoops are useful for performing repetitive tasks, such as iterating over arrays, processing user input, generating output, etc.\n\nThere are four types of loops in PHP: \n- while\n- do-while\n- for\n- foreach.\n\n### While loop\n\nThe while loop executes a block of code as long as a specified condition is true. The syntax of the while loop is:\n\n    while (condition) {  \n        // code to be executed repeatedly while condition is true  \n    }\n\nThe condition can be any expression that evaluates to a boolean value (true or false). \n\nThe code block can be a single statement or multiple statements enclosed in curly braces.\n\nFor example:\n\n    $x = 1;  \n    while ($x <= 10) {  \n        echo \"$x \";  \n        $x++;  \n    }\n\nThe above code will print “`1 2 3 4 5 6 7 8 9 10`” because the value of `$x` starts from 1 and increments by 1 until it reaches 10.\n\n### Do-while loop\n\nThe do-while loop executes a block of code once and then repeats it as long as a specified condition is true. The syntax of the do-while loop is:\n\n    do {  \n        // code to be executed at least once and repeatedly while condition is true  \n    } while (condition);\n\nThe difference between the do-while loop and the while loop is that the do-while loop checks the condition at the end of each iteration, whereas the while loop checks it at the beginning. \n\nThis means that the do-while loop will always execute at least once, even if the condition is false from the start.\n\nFor example:\n\n    $x = 11;  \n    do {  \n        echo \"$x \";  \n        $x++;  \n    } while ($x <= 10);\n\nThe above code will print “`11`” because the value of `$x` starts from 11 and does not satisfy the condition, but still executes once before checking it.\n\n### For loop\n\nThe for loop executes a block of code for a specified number of times. The syntax of the for loop is:\n\n    for (initialization; condition; increment) {  \n        // code to be executed for each iteration while condition is true  \n    }\n\nThe initialization expression sets up the initial state of the loop, such as declaring and initializing a counter variable. \n\nThe condition expression tests whether the loop should continue or not, usually by comparing the counter variable with a limit value. \n\nThe increment expression updates the state of the loop after each iteration, usually by increasing or decreasing the counter variable.\n\nFor example:\n\n    for ($x = 1; $x <= 10; $x++) {  \n        echo \"$x \";  \n    }\n\nThe above code will print “`1 2 3 4 5 6 7 8 9 10`” because it sets up $x as a counter variable starting from 1 and ending at 10, increasing by 1 after each iteration.\n\n### Foreach loop\n\nThe foreach loop executes a block of code for each element in an array or an object. The syntax of the foreach loop for arrays is:\n\n    foreach (array as $value) {  \n        // code to be executed for each element in array using $value variable  \n    }\n\nThe array can be any variable that holds an array value. The $value variable holds the current element in the array during each iteration. \n\nYou can use the $value variable to access or modify the element in the code block.\n\nFor example:\n\n    $colors = array(\"red\", \"green\", \"blue\");  \n    foreach ($colors as $color) {  \n        echo \"$color \";  \n    }\n\nThe above code will print “red green blue” because it loops through each element in the $colors array and assigns it to the $color variable.\n\nThe syntax of the foreach loop for associative arrays is:\n\n    foreach (array as $key => $value) {  \n        // code to be executed for each element in array using $key and $value variables  \n    }\n\nThe array can be any variable that holds an associative array value. \n\nThe `$key` variable holds the current key in the array, and the `$value` variable holds the current value associated with that key. You can use both variables to access or modify the element in the code block.\n\nFor example:\n\n    $scores = array(\"Alice\" => 90, \"Bob\" => 80, \"Charlie\" => 70);  \n    foreach ($scores as $name => $score) {  \n        echo \"$name scored $score. \";  \n    }\n\nThe above code will print “Alice scored 90. Bob scored 80. Charlie scored 70.” because it loops through each key-value pair in the $scores array and assigns them to the $name and `$score` variables.\n\nThe syntax of the foreach loop for objects is:\n\n    foreach (object as $property => $value) {  \n        // code to be executed for each property in object using $property and $value variables  \n    }\n\nThe object can be any variable that holds an object value. The `$property` variable holds the current property name in the object, and the `$value` variable holds the current value of that property. \n\nYou can use both variables to access or modify the property in the code block.\n\nFor example:\n\n    class Car {  \n        public $color;  \n        public $model;  \n    \n        public function __construct($color, $model) {  \n            $this->color = $color;  \n            $this->model = $model;  \n        }  \n    }  \n    \n    $myCar = new Car(\"red\", \"Toyota\");  \n    foreach ($myCar as $property => $value) {  \n        echo \"$property: $value \";  \n    }\n\nThe above code will print “`color: red, model: Toyota`” because it loops through each property in the $myCar object and assigns them to the $property and $value variables.\n"],"4":["Working with Arrays","\n# Working with Arrays\n\n![](https://www.hostinger.com/tutorials/wp-content/uploads/sites/2/2021/11/php-8-2.webp)\n\nArrays in PHP are versatile and powerful data structures that allow you to store multiple values under a single variable name. \n\nThey can hold a collection of elements, which can be of different data types such as integers, strings, or even other arrays.\n\n## PHP Array Types\n\nThere are 3 types of array in PHP.\n\n1. Indexed Array\n2. Associative Array\n3. Multidimensional Array\n\n\n### 1. Indexed Arrays:\n\nIndexed arrays are arrays where each element is assigned a numeric index, starting from 0. They are the simplest form of arrays in PHP.\n\nExample:\n\n    $colors = array(\"Red\", \"Green\", \"Blue\");\n\n#### Accessing Elements:\n\nYou can access elements of an indexed array using their numeric index.\n\n    echo $colors[0]; // Output: Red\n    echo $colors[1]; // Output: Green\n    echo $colors[2]; // Output: Blue\n\n### 2. Associative Arrays:\n\nAssociative arrays are arrays where each element is associated with a specific key or name. The key-value pairs in associative arrays allow you to store and retrieve data more intuitively.\n\nExample:\n\n    $person = array(\"name\" => \"John\", \"age\" => 30, \"city\" => \"New York\");\n\n#### Accessing Elements:\n\nYou can access elements of an associative array using their keys.\n\n    echo $person[\"name\"]; // Output: John\n    echo $person[\"age\"];  // Output: 30\n    echo $person[\"city\"]; // Output: New York\n\n### 3. Multidimensional Arrays:\n\nMultidimensional arrays are arrays that contain other arrays as elements. They allow you to represent data in a hierarchical or nested structure.\n\nExample:\n\n    $matrix = array(\n        array(1, 2, 3),\n        array(4, 5, 6),\n        array(7, 8, 9)\n    );\n\n#### Accessing Elements:\n\nYou can access elements of a multidimensional array using multiple indices.\n\n    echo $matrix[0][0]; // Output: 1\n    echo $matrix[1][2]; // Output: 6\n    echo $matrix[2][1]; // Output: 8\n\n### 4. Array Functions:\n\nPHP provides a variety of built-in functions to manipulate arrays, such as:\n\n- `count()`: Returns the number of elements in an array.\n- `array_push()`: Adds one or more elements to the end of an array.\n- `array_pop()`: Removes the last element from an array.\n- `array_merge()`: Merges one or more arrays into a single array.\n\n#### Example:\n\n    $numbers = array(1, 2, 3, 4, 5);\n\nIf we do `array_push($numbers, 6, 7);` then we can get,\n\n```\nArray ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 [6] => 7 )\n```\n\nIf we do `array_pop($numbers);` then we get,\n\n```\nArray ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 )\n```\n\nNow we can create two new arrays and merge them into one array,\n\n    $colors = array(\"Red\", \"Green\");\n    $moreColors = array(\"Blue\", \"Yellow\"); \n    // ---- Merging both of them ----\n    $mergedArray = array_merge($colors, $moreColors);\n    \nThe result of the `$mergedArray` is,\n\n```\nArray ( [0] => Red [1] => Green [2] => Blue [3] => Yellow )\n```\n\n### Summary:\n\nArrays are fundamental data structures in PHP that allow you to store and manipulate collections of data efficiently. \n\nIndexed arrays, associative arrays, and multidimensional arrays provide flexibility in representing different types of data. With a wide range of array functions available in PHP, you can perform various operations on arrays to meet the requirements of your application. \n\nUnderstanding PHP arrays is essential for effective PHP programming and web development.\n"],"5":["String Manipulation and Regular Expressions","\n# String Manipulation and Regular Expressions\n\n![](https://www.cloudways.com/blog/wp-content/uploads/Main-Image_750x394-53.png)\n\n**String manipulation** is a fundamental aspect of programming, and PHP provides a powerful set of tools and functions to work with strings effectively. \n\nIn PHP, strings are a sequence of characters enclosed in quotes, and they can be manipulated in various ways to perform tasks such as **modifying, searching, extracting**, and **formatting textual data**.\n\nAdditionally, Regular Expressions in PHP enable advanced pattern matching and manipulation of strings.\n\nMoreover, PHP's string manipulation functions facilitate tasks such as **parsing CSV** or **JSON data**, **URL encoding, HTML entity conversion**, and **generating unique identifiers**. \n\nBy effectively manipulating strings, developers can handle data transformations, generate dynamic responses, and enhance the overall functionality of PHP applications.\n\n## String Manipulation Functions in PHP\n\nPHP provides a variety of built-in functions for string manipulation. Here are some commonly used functions of string manipulation in php:\n\n* `strlen()`: Returns the length of a string.\n* `substr()`: Extracts a substring from a string based on a specified start and optionally end position.\n* `str_replace()`: Replaces all occurrences of a substring with another substring within a string.\n* `strpos()`: Searches for the position of the first occurrence of a substring within a string.\n* `str_split()`: Converts a string into an array of characters.\n* `strtolower()`: Converts a string to lowercase.\n* `strtoupper()`: Converts a string to uppercase.\n* `trim()`: Removes whitespace or specified characters from the beginning and end of a string.\n* `explode()`: Splits a string into an array by a specified delimiter.\n* `implode()`: Joins elements of an array into a string using a specified delimiter.\n* `sprintf()`: Formats a string by substituting placeholders with corresponding values.\n* `ucfirst()`: Converts the first character of a string to uppercase.\n* `ucwords()`: Converts the first character of each word in a string to uppercase.\n\nThese functions allow developers to perform tasks like finding and replacing substrings, extracting parts of a string, manipulating a case, splitting and joining strings, formatting strings with dynamic values, and more.\n\n### Program to Validate All the String Manipulation Functions\n\nHere's an example program that demonstrates the usage of various string manipulation functions in PHP to validate their functionality:\n\n    <?php\n    // Sample string\n    $string = \"Hello, World!\";\n    \n    // Validate strlen()\n    $length = strlen($string);\n    echo \"Length of the string: \". $length. \"\\n\";\n    \n    // Validate substr()\n    $subString = substr($string, 7);\n    echo \"Substring from position 7: \" . $subString. \"\\n\";\n    \n    // Validate str_replace()\n    $newString = str_replace(\"World\", \"PHP\", $string);\n    echo \"Replaced string: \". $newString. \"\\n\";\n    \n    // Validate strpos()\n    $position = strpos($string, \",\");\n    echo \"Position of the comma: \". $position. \"\\n\";\n    \n    // Validate str_split()\n    $charArray = str_split($string);\n    echo \"Character array: \";\n    print_r($charArray);\n    \n    // Validate strtolower()\n    $lowercaseString = strtolower($string);\n    echo \"Lowercase string: \". $lowercaseString. \"\\n\";\n    \n    // Validate strtoupper()\n    $uppercaseString = strtoupper($string);\n    echo \"Uppercase string: \". $uppercaseString. \"\\n\";\n    \n    // Validate trim()\n    $trimmedString = trim(\"  Hello, World!  \");\n    echo \"Trimmed string: \". $trimmedString. \"\\n\";\n    \n    // Validate explode()\n    $wordsArray = explode(\" \", $string);\n    echo \"Exploded array: \";\n    print_r($wordsArray);\n    \n    // Validate implode()\n    $joinedString = implode(\"-\", $wordsArray);\n    echo \"Joined string: \". $joinedString. \"\\n\";\n    \n    // Validate sprintf()\n    $formattedString = sprintf(\"Today is %s, %d %s\", \"Monday\", 5, \"June\");\n    echo \"Formatted string: \". $formattedString. \"\\n\";\n    \n    // Validate ucfirst()\n    $ucFirstString = ucfirst($string);\n    echo \"String with the first character capitalized: \". $ucFirstString. \"\\n\";\n    \n    // Validate ucwords()\n    $ucWordsString = ucwords($string);\n    echo \"String with each word's first character capitalized: \". $ucWordsString. \"\\n\";\n    ?>\n\n**Explanation:**\n\nThis program showcases the usage of functions like `strlen()`, `substr()`, `str_replace()`, `strpos()`, `str_split()`, `strtolower()`, `strtoupper()`, `trim()`, `explode()`, `implode()`, `sprintf()`, `ucfirst()`, and `ucwords()`.\n\nBy executing this program, you can observe the results of each string manipulation function and validate their functionality. \n\nTry modifying the sample string or using different inputs to further explore and test these functions. Run the above code in your editor for a better and clear explanation.\n\n### Calculating the Length of a String\n\n    <?php\n    // Sample string\n    $string = \"Hello, World!\";\n    \n    // Calculate the length of the string\n    $length = strlen($string);\n    \n    // Display the result\n    echo \"Length of the string: \". $length;\n    ?>\n\n**Explanation:**\n\nIn this code snippet, we have a sample string \"`Hello, World!`\". We pass this string as an argument to the `strlen()` function, which calculates the length of the string and returns the result.\n\nThe calculated length is then stored in the variable $length. Finally, we display the result using echo, concatenating the string **\"Length of the string: \"** with the value of `$length`. \n\nBy utilizing the `strlen()` function, you can easily determine the length of a string in PHP. This information can be useful in various scenarios, such as validating input, manipulating strings, or performing specific actions based on the length of a string. \n\n### Counting Number of Words in a String\n\n    <?php\n    // Sample string\n    $string = \"Hello, World! Welcome to PHP.\";\n    \n    // Count the number of words in the string\n    $wordCount = str_word_count($string);\n    \n    // Display the result\n    echo \"Number of words in the string: \". $wordCount;\n    ?>\n\n**Explanation:**\n\nIn this code snippet, we have a sample string **\"Hello, World! Welcome to PHP.\"**. We pass this string as an argument to the `str_word_count()` function, which counts the number of words in the string and returns the result.\n\nThe counted number of words is then stored in the variable `$wordCount`. \n\nFinally, we display the result using echo, concatenating the string **\"Number of words in the string: \"** with the value of $wordCount. \n\nBy utilizing the `str_word_count()` function, you can easily count the number of words in a string in PHP. \n\n### Replacing Text within Strings\n\n    <?php\n    // Sample string\n    $string = \"Hello, World! Welcome to PHP.\";\n    \n    // Perform text replacement\n    $newString = str_replace(\"World\", \"Universe\", $string);\n    \n    // Display the result\n    echo \"Modified string: \". $newString;\n    ?>\n\n**Explanation:**\n\nIn this code snippet, we have a sample string \"`Hello, World! Welcome to PHP.`\". \n\nWe use the `str_replace()` function to search for the substring \"World\" within the string and replace it with the substring \"Universe\".\n\n### Reversing a String\n\n    <?php\n    // Sample string\n    $string = \"Hello, World!\";\n    \n    // Reverse the string\n    $reversedString = strrev($string);\n    \n    // Display the result\n    echo \"Reversed string: \". $reversedString;\n    ?>\n\n**Explanation:**\n\nIn this code snippet, we have a sample string \"`Hello, World!`\". \n\nWe use the `strrev()` function to reverse the order of characters in the string.\n\nThe reversed string is stored in the variable `$reversedString`. \n\nFinally, we display the result using echo, concatenating the string \"`Reversed string: `\" with the value of `$reversedString`. \n\nBy utilizing the `strrev()` function, you can easily reverse the order of characters in a string in PHP.\n\n## What are Regular Expressions?\n\nA regular expression (or regex) is a sequence of characters that defines a search pattern. \n\nIt'a a powerful tool for finding and manipulating text based on certain patterns. \n\nThey can be used for various tasks such as validating user input, extracting data from web pages, replacing text in files, and more.. \n\nWe will cover the basics of regular expression syntax, how to create and use regular expression objects, and some common examples of regular expression usage in PHP\n\nFor example, the regex `/[a-z]+/` matches one or more lowercase letters, while the regex `/[0-9]{3}-[0-9]{3}-[0-9]{4}/` matches a phone number in the format `xxx-xxx-xxxx`.\n\nA regex can consist of literal characters (such as `a`, `b`, `c`, etc.), special characters (such as `^`, `$`, `.`, `*`, etc.), and character classes (such as `[a-z]`, `[0-9]`, `w`, `d`, etc.). \n\nEach character or group of characters has a specific meaning and function in the regex.\n\n### How to Create and Use Regular Expression Objects in PHP\n\nIn PHP, there are two ways to create and use regular expression objects: using the `preg_` functions or using the `PCRE` class.\n\nThe `preg_` functions are a set of built-in functions that allow you to perform various operations with regular expressions, such as matching, replacing, splitting, and filtering. \n\nThe most commonly used `preg_` functions are:\n\n* `preg_match($pattern, $subject, $matches)` - This function tries to match a regex `$pattern` against a string `$subject`. If a match is found, it returns `true` and stores the matched subpatterns in an array `$matches`. Otherwise, it returns `false`.\n* `preg_replace($pattern, $replacement, $subject)` - This function replaces all occurrences of a regex `$pattern` in a string `$subject` with a string `$replacement`. It returns the modified string or `null` if an error occurs.\n* `preg_split($pattern, $subject)` - This function splits a string `$subject` into an array of substrings using a regex `$pattern` as the delimiter. It returns the array of substrings or `false` if an error occurs.\n* `preg_grep($pattern, $array)` - This function filters an array `$array` of strings by returning only those that match a regex `$pattern`. It returns the filtered array or `false` if an error occurs.\n\nTo use the `preg_` functions, you need to enclose your regex in delimiters (such as `/`, `#`, or `~`) and optionally add modifiers (such as `i`, `m`, or `g`) after the closing delimiter. \n\nFor example:\n\n    // Match any word that starts with \"cat\"  \n    $pattern = \"/\\bcat\\w*/i\"; // The \"i\" modifier makes the match case-insensitive  \n    $subject = \"I like cats and caterpillars but not catacombs.\";  \n    if (preg_match($pattern, $subject, $matches)) {  \n    echo \"Match found: \" . $matches[0] . \"\\\n\"; // Output: Match found: cats  \n    } else {  \n    echo \"No match found.\\\n\";  \n    }  \n    \n    // Replace all occurrences of \"dog\" with \"puppy\"  \n    $pattern = \"/dog/\";  \n    $replacement = \"puppy\";  \n    $subject = \"The dog chased the cat and the dog barked at the mailman.\";  \n    $new_subject = preg_replace($pattern, $replacement, $subject);  \n    echo $new_subject . \"\\\n\"; // Output: The puppy chased the cat and the puppy barked at the mailman.  \n    \n    // Split a string by commas or spaces  \n    $pattern = \"/[,\\s]+/\";  \n    $subject = \"red, green blue , yellow\";  \n    $array = preg_split($pattern, $subject);  \n    print_r($array); // Output: Array ( [0] => red [1] => green [2] => blue [3] => yellow )  \n    \n    // Filter an array of email addresses by domain name  \n    $pattern = \"/@gmail\\.com$/\";  \n    $array = [\"alice@gmail.com\", \"bob@yahoo.com\", \"charlie@hotmail.com\", \"david@gmail.com\"];  \n    $new_array = preg_grep($pattern, $array);  \n    print_r($new_array); // Output: Array ( [0] => alice@gmail.com [3] => david@gmail.com )\n\nThe `PCRE` class is an object-oriented wrapper for the `preg_` functions. It allows you to create and manipulate regular expression objects using methods and properties. \n\nThe most commonly used methods and properties are:\n\n* `__construct($pattern)` - This method creates a new regular expression object with a given regex `$pattern`.\n* `match($subject)` - This method tries to match the regex against a string `$subject`. If a match is found, it returns an array of matched subpatterns. Otherwise, it returns an empty array.\n* `replace($replacement, $subject)` - This method replaces all occurrences of the regex in a string `$subject` with a string `$replacement`. It returns the modified string.\n* `split($subject)` - This method splits a string `$subject` into an array of substrings using the regex as the delimiter. It returns the array of substrings.\n* `grep($array)` - This method filters an array `$array` of strings by returning only those that match the regex. It returns the filtered array.\n* `$delimiter` - This property holds the delimiter used for the regex. It can be changed by calling the `setDelimiter($delimiter)` method.\n* `$modifiers` - This property holds the modifiers used for the regex. It can be changed by calling the `setModifiers($modifiers)` method.\n\nTo use the PCRE class, you need to include it in your script using the `require_once()` function. For example:\n\n    // Include the PCRE class  \n    require_once(\"PCRE.php\");  \n    \n    // Create a new regular expression object  \n    $regex = new PCRE(\"/\\bcat\\w*/i\");  \n    \n    // Match any word that starts with \"cat\"  \n    $subject = \"I like cats and caterpillars but not catacombs.\";  \n    $matches = $regex->match($subject);  \n    if (!empty($matches)) {  \n    echo \"Match found: \" . $matches[0] . \"\\\n\"; // Output: Match found: cats  \n    } else {  \n    echo \"No match found.\\\n\";  \n    }  \n    \n    // Replace all occurrences of \"dog\" with \"puppy\"  \n    $regex->setPattern(\"/dog/\");  \n    $replacement = \"puppy\";  \n    $subject = \"The dog chased the cat and the dog barked at the mailman.\";  \n    $new_subject = $regex->replace($replacement, $subject);  \n    echo $new_subject . \"\\\n\"; \n    \n    // Split a string by commas or spaces  \n    $regex->setPattern(\"/[,\\s]+/\");  \n    $subject = \"red, green blue , yellow\";  \n    $array = $regex->split($subject);  \n    print_r($array);\n    \n    // Filter an array of email addresses by domain name  \n    $regex->setPattern(\"/@gmail\\.com$/\");  \n    $array = [\"alice@gmail.com\", \"bob@yahoo.com\", \"charlie@hotmail.com\", \"david@gmail.com\"];  \n    $new_array = $regex->grep($array);  \n    print_r($new_array);\n\n**Output:**\n\n```\nThe puppy chased the cat and the puppy barked at the mailman\n\nArray ( [0] => red [1] => green [2] => blue [3] => yellow )\n\nArray ( [0] => alice@gmail.com [3] => david@gmail.com )\n```\n"],"6":["Working with Forms and Form Handling","\n# Working with Forms\n\n![](https://kinsta.com/wp-content/uploads/2022/03/elementor-forms.jpg)\n\nForms are the basic interface between user and server. Form handling is the very basic and important feature of PHP. \n\nFor form creation, we should use HTML. Using forms we can accept data from user and then we can handle the data using PHP. Data can be saved in any database server like MySql.\n\n## Creating forms in PHP using HTML\n\nWhile creating forms in PHP using HTML we should keep some points in our mind:\n\n* We should specify a unique name for every entry element like (form, textbox, password box, select, text area etc.), for this we can use Name attribute.\n* We should specify Value rather than HTML default value.\n* We can pass hidden variables from form to form using Hidden data entry elements.\n\n**Example: helloform.html**\n\n```xml\n<html> \n<body> \n    <form method=\"post\" action=\"helloresponse.php\"> \n        Your name: <input type=\"text\" name=\"my_name\"> \n        <br/> \n        <input type=\"submit\" value=\"Say Hello\"> \n    </form> \n</body> \n</html>\n```\n\nThe above code will display form as:\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image1.png)\n\nWhen user submits form without any name, then the output will be:\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image2.png)\n\nAnd when user submits form after entering value, the output will be:\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image3.png)\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image4.png)\n\n### Server variables\n\nThere are some useful server variables apart of `PHP_SELF` and `$_SERVER`, those can be used to provide information on the web server and the current request. Such as:\n\n| Element | Description |\n|---|---|\n| QUERY_STRING | It is used to contain the part of URL after the question mark. |\n| PATH_INFO | It is used to contain extra path information tacked onto the end of the URL after a slash. This can be used to pass information to a script without using query string. |\n| SERVER_NAME | It is used to contain the name of the web site on which the PHP is running or it can contain the name of domain that is being used. |\n\n### How to pass Information using form\n\nThere are two different ways of passing information between browser and server. GET and POST\n\nThese methods are used in form tag as:\n\n```\n<form method=”GET”>\n```\n\n###### And\n\n```\n<form method=”POST”>\n```\n\nIf GET method is used to pass parameters, it will be encoded in the URL which is also called query string. Form parameters can be anything\n\n### Steps included in Form Handling\n\n#### Form display\n\nIn this step firstly user sends a request to server to display form. For this user can enter the URL of web page. Web server will verify the web page and revert it to the client machine.\n\n#### Form processing\n\nAfter display form on client machine, user can enter values in form. When the form is submitted, it is validated and processed at server side.\n\n### Example: Calculator\n\n###### Main.html\n\n```xml\n<form action=\"cal.php\" method=\"POST\"> \nEnter First Number:<input name=\"s_no\" type=\"text\"></br></br>\nEnter second Number:<input name=\"e_no\" type=\"text\"><br></br>\nSelect your choice: \n<select name=\"D1\"> \n    <option>+</option> \n    <option>-</option> \n    <option>*</option> \n    <option>/</option>\n    <option>%</option> \n</select> \n<input type=\"submit\" name=\"B1\" value=\"Submit\"> \n</form>\n```\n\nForm will look like this:\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image5.png)\n\n###### Calc.php\n\n    <?php \n    $a=$_POST[\"s_no\"]; \n    $b=$_POST[\"e_no\"]; \n    $op=$_POST[\"D1\"]; \n    if($op==\"+\") \n    {     \n        $res=$a+$b;     \n        echo \"Addition of numbers is:$res\"; \n    } \n    if($op==\"-\") \n    {     \n        $res=$a-$b;     \n        echo \"Subtraction of numbers is:$res\"; \n    } \n    if($op==\"*\") \n    {     \n        $res=$a*$b;     \n        echo \"Product of numbers is:$res\"; \n    } \n    if($op==\"/\") \n    {     \n        $res=$a/$b;     \n        echo \"Division of numbers is:$res\"; \n    } \n    if($op==\"%\") \n    {     \n        $res=$a%$b;     \n        echo \"Modulus of numbers is:$res\"; \n    } \n    ?>\n\n**Output:**\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image6.png)\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image7.png)\n\n**Example:**\n\n###### contact.html\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image8.png)\n\nIn the above simple contact form, we have used POST method to transfer complete form data in php file. In our form we have used one textbox, one password box, three radio buttons and one submit button.\n\nApart of these we have used one textarea also to accept comments from user.\n\nWe will save this file with the name contact.html\n\nWhen we send data to myContact.php file, we can access all these values there. All variables are passed to php file using POST method and stored in associative array `$_POST`.\n\nIn the `$_POST` associative array all the variables can be mapped as follows:\n\n| Variable | Holds value of |\n|---|---|\n| $_POST['yourname'] | text field \"yourname\" |\n| $_POST['email'] | text field \"email\" |\n| $_POST['likeit'] | selected radio box group \"likeit\" |\n| $_POST['comments'] | textarea \"comments\" |\n\n**The output of above form will be:**\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image9.png)\n\nWhen user will enter the values in form and press Send it! Button all the contents will transfer to myContact.php file\n\nWe can display the contents of form using following script:\n\n```xml\n<html>\n<header>\n</header>\n<body>\n    Your name is: <?php echo $_POST['yourname']; ?><br />\n    Your e-mail: <?php echo $_POST['email']; ?><br />\n    <br />\n    Do you like this website? <?php echo $_POST['likeit']; ?><br />\n    <br />\n    Comments:<br />\n    <?php echo $_POST['comments']; ?>\n</body>\n</html>\n```\n\n**Output after submission of form:**\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image10.png)\n\n**Self Submission**\n\nSelf submission refers to the process of combining one or more forms and form handlers in a single script, using the HTML form.\n\nSelf submission of form can be used when there is need to submit the same form more than once. \n\nSelf submission causes fewer clicks throughout submission process. \n\nSeparate form and form handler make it difficult to pull data from the database, editing and submitting the form is also difficult. \n\nSelf submission is accomplished by the simplest of means: we should specify the same script name as the `ACTION` target in the `FORM` element as:\n\n    <form method=”post” action=”myself.php”>\n\n###### OR\n\n    <form method=”post” action=”<?php echo $_server[‘php_self’];?>”>\n\nThe most important thing in self submission is that logic comes before the display.\n\n**Example**:\n\n    <?php\n    if(isset($_POST['submit'])) \n    { \n        $name = $_POST['name'];\n        echo \"<font color=blue>User Has submitted the form and entered this name : <b> $name </b></font>\";\n        echo \"<br/>\";\n        echo \"<br><font color=Red>You can use the following form again to enter a new name.</font>\"; \n    }\n    ?>\n    <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        Please Enter Your Name: <input type=\"text\" name=\"name\"><br>\n        <input type=\"submit\" name=\"submit\" value=\"Submit Form\"><br>\n    </form>\n\n**Output:**\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image11.png)\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image12.png)\n\n### Editing data with an HTML Form\n\nThe most important task that we can do with PHP is, we can pull data from database, display it on form and it can be edited by user and then we can save these updated contents in database. \n\nTo accomplish this task there are various form elements are found in HTML such as:\n\n**Text and Textarea**\n\nThese elements are the simplest elements; there is only one possible Value per Name\n\n**Checkboxes**\n\nThe Checkbox type has only one possible value per input: it can be off or on. \n\nThe database field which can be used to display this type of information may be of small integer or bit type of value with 0 or 1 for unchecked and checked values.\n\n**Radio Buttons**\n\nRadio buttons contain one-to-many type relationship. They may have multiple possible values, but only one can be pre-displayed or pre-selected. \n\nAs compare to text field or checkbox radio buttons are difficult to display information pulled by a database.\n\n**Select**\n\nSelect field is the most easiest to use. It can handle the largest number of options, it can also allow the user to select multiple options that can be passed back to the database using arrays.\n\n**Example:**\n\n```xml\n<html>\n<head>\n    <title>PHP form select box example</title>\n    <style>\n    label,a \n    {\n        font-family : Arial, Helvetica, sans-serif;\n        font-color:blue;\n        font-size : 12px; \n    }\n    </style>    \n</head>\n<body>\n    <?php\n    if(isset($_POST['formSubmit'])) \n    {\n        $aLanguages = $_POST['formLanguages'];        \n        if(!isset($aLanguages)) \n        {\n            echo(\"<p>You didn't select any language!</p>\\n\");\n        } \n        else \n        {\n            $nLanguages = count($aLanguages);\n            echo(\"<p>You selected $nLanguages languages: \");\n            echo \"<br/>\";\n            for($i=0; $i < $nLanguages; $i++)\n            {\n                echo($aLanguages[$i] . \" \");\n                echo \"<br/>\";\n            }\n            echo(\"</p>\");\n        }\n    }\n    ?>\n    <form action=\"<?php echo htmlentities($_SERVER['PHP_SELF']); ?>\" method=\"post\">\n        <h2> Submit details:</h2>\n        <label for='formLanguages[]'>\n            <h4>Select the Languages in which you are experienced:</h4>\n        </label>\n        <br>\n        <select multiple=\"multiple\" name=\"formLanguages[]\">\n            <option value=\"C\">C Language</option>\n            <option value=\"C++\">C++ Language</option>\n            <option value=\"C#\">C#.NET Language</option>\n            <option value=\"VB\">VB.NET Language</option>\n            <option value=\"JAVA\">Java Language</option>\n            <option value=\"PHP\">PHP Language</option>\n            <option value=\"PYTHON\">PYTHON Language</option>\n        </select>\n        <br>\n        <input type=\"submit\" name=\"formSubmit\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\n**Output of above code is:**\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image13.png)\n\n![](https://www.wideskills.com/sites/default/files/subjects/PHP%20Tutorial/11/image14.png)\n"],"7":["File Handling and I/O Operations","\n# File Handling and I/O Operations\n\n![](https://www.datatron.co.uk/hubfs/Datatron_What%20is%20an%20EDMS_V1.jpg)\n\nFile handling and input/output (I/O) operations in PHP allow you to read from and write to files, manipulate file contents, and perform various file-related tasks. \n\nHere's an explanation of file handling and I/O operations in PHP:\n\n### 1. Opening a File:\n\nBefore performing any file operations, you need to open the file using the `fopen()` function. \n\nThe `fopen()` function takes two parameters: the file path and the mode in which the file should be opened (e.g., read, write, append).\n\nExample:\n\n    $handle = fopen(\"example.txt\", \"r\");\n\n### 2. Reading from a File:\n\nYou can read from a file using functions like `fgets()`, `fread()`, or `file_get_contents()`. \n\nThese functions allow you to read the contents of the file line by line or as a whole.\n\nExample:\n\n    $handle = fopen(\"example.txt\", \"r\");\n    while(!feof($handle)) {\n        $line = fgets($handle);\n        echo $line;\n    }\n    fclose($handle);\n\n### 3. Writing to a File:\n\nTo write to a file, you can use functions like `fwrite()` or `file_put_contents()`. \n\nThese functions allow you to write data to the file, either by appending it to the end of the file or by overwriting the existing contents.\n\nExample:\n\n    $handle = fopen(\"example.txt\", \"w\");\n    fwrite($handle, \"Hello, World!\");\n    fclose($handle);\n\n### 4. Closing a File:\n\nAfter performing file operations, it's essential to close the file using the `fclose()` function. \n\nThis ensures that the file is properly released and any resources associated with it are freed.\n\nExample:\n\n    fclose($handle);\n\n### 5. Checking for End of File:\n\nYou can use the `feof()` function to check whether the end of the file has been reached while reading from a file.\n\nExample:\n\n    while(!feof($handle)) {\n        // Read file contents\n    }\n\n### 6. File Handling Modes:\n\nWhen opening a file, you can specify different modes to determine how the file should be handled. \n\nHere's a listing of common file opening modes in PHP:\n\n- \"r\" - [Read-only mode]: Opens the file for reading, starting at the beginning of the file.\n- \"r+\" - [Read/write mode]: Opens the file for reading and writing, starting at the beginning of the file.\n- \"w\" - [Write-only mode]: Opens the file for writing, overwriting the existing contents. If the file does not exist, it creates a new file.\n- \"w+\" - [Read/write mode]: Opens the file for reading and writing, overwriting the existing contents. If the file does not exist, it creates a new file.\n- \"a\" - [Append mode]: Opens the file for writing, appending new data to the end of the file. If the file does not exist, it creates a new file.\n- \"a+\" - [Read/append mode]: Opens the file for reading and writing, appending new data to the end of the file. If the file does not exist, it creates a new file.\n- \"x\" - [Write-only mode]: Creates a new file for writing. If the file already exists, fopen() returns FALSE and an error is raised.\n- \"x+\" - [Read/write mode]: Creates a new file for reading and writing. If the file already exists, fopen() returns FALSE and an error is raised.\n- \"c\" - [Write-only mode]: Opens the file for writing, creating the file if it does not exist. If the file already exists, it is neither truncated nor overwritten.\n- \"c+\" - [Read/write mode]: Opens the file for reading and writing, creating the file if it does not exist. If the file already exists, it is neither truncated nor overwritten.\n\nThese modes allow you to specify how the file should be opened and what operations are permitted on the file. \n\nIt's essential to choose the appropriate mode based on your requirements when opening files in PHP.\n\n### 7. Error Handling:\n\nIt's essential to handle errors that may occur during file operations. You can use functions like `feof()` to check for the end of the file, `ferror()` to check for errors, and `clearerr()` to clear any error flags.\n\nExample:\n\n    if (ferror($handle)) {\n        echo \"Error reading from file.\";\n    }\n\n### Summary:\n\nFile handling and I/O operations in PHP provide a way to interact with files on the server's filesystem. \n\nBy opening, reading from, writing to, and closing files, you can manipulate file contents, process data, and perform various file-related tasks in PHP applications. \n\nUnderstanding file handling in PHP is essential for working with files, managing data, and building robust web applications.\n"],"8":["Database Connectivity with MySQL and PHP","\n# Database Connectivity with MySQL and PHP\n\n![](https://www.cloudways.com/blog/wp-content/uploads/How-to-Connect-MySQL-Database-with-PHP-Websites.jpg)\n\nConnecting a MySQL database with a PHP website can be challenging, especially for beginners. \n\nDevelopers must ensure they have the correct credentials and that the connection is properly configured.\n\nAfter the connection is set up, developers may encounter errors when retrieving or manipulating data from the database. Debugging these errors can be time-consuming. Security is also a major concern to prevent unauthorized access to sensitive data.\n\nThis lesson will introduce you how to connect a MySQL database on different servers, addressing different methods and providing step-by-step instructions for localhost, Cloudways server, PDO, and Remote MySQL.\n\n## Brief Overview of MySQL\n\nMySQL is a widely popular open-source relational database management system (RDBMS) that excels in storing, managing, and retrieving data. It is renowned for its efficiency, versatility, and widespread adoption.\n\nMySQL, when combined with PHP cloud, employs a structured approach to data organization. It arranges data into tables consisting of rows and columns with defined data types. \n\nRelationships between tables are established through primary and foreign keys, ensuring data integrity and enabling complex data querying.\n\nMySQL’s adaptability is demonstrated by its cross-platform compatibility, operating seamlessly across various operating systems. Its extensive community and ecosystem contribute to its ongoing refinement and integration with other tools and technologies.\n\n## Why Should You Use MySQL?\n\nMySQL is a popular choice for data management in various applications, and there are several compelling reasons for this. \n\nIt is known for its exceptional performance and scalability, efficiently handling high-volume transactions and read-heavy workloads.\n\nAnother reason to use MySQL is its widespread adoption and extensive ecosystem. As one of the most popular relational database management systems globally, MySQL has a vast community of developers, translating to a wealth of available resources, lessons, and plugins to integrate it with various programming languages, frameworks, and tools.\n\nMySQL also provides advanced security features to safeguard sensitive data. It supports encryption, user authentication, and role-based access control, ensuring that only authorized users can access the database and its information.\n\n### Methods to Establish Connection with MySQL\n\nThere are 3 types of methods in PHP to connect MySQL database through the backend:\n\n1. MySQL\n2. MySQLi\n3. PDO\n\n#### MySQL\n\nMySQL is now obsolete because of security issues like SQL injection etc, but the other two are being actively used.\n\n#### MySQLi\n\nMySQLi is an API that serves as a connector function, linking the backend of PHP applications to MySQL databases. \n\nIt is an improvement over its predecessor, offering enhanced safety, speed, and a more extensive set of functions and extensions.MySQLi was introduced with PHP 5.0.0, and its drivers were installed in version 5.3.0. The API was designed to support MySQL versions 4.1.13 and newer.\n\n#### PDO\n\nThe PHP Data Objects (PDO) extension is a Database Abstraction Layer that serves as an interface for the backend to interact with MySQL databases. \n\nIt allows for changes to be made to the database without altering the PHP code and provides the flexibility to work with multiple databases. One of the significant advantages of using PDO is that it keeps your code simple and portable.\n\n## Create MySQL Database at Localhost\n\nBefore you start building a PHP connection to a MySQL database, you need to know what PHPMyAdmin is. It’s a control panel from which you can manage the database you’ve created. \n\nOpen your browser, go to **localhost/PHPMyAdmin**, or click **Admin** in XAMPP UI.\n\nAfter installing XAMPP, you must add a password to your account for added security. To do this, navigate to the User Account section and locate the username shown in the image below. \n\nFrom there, you can set a password for your account.\n\n![change password database](https://www.cloudways.com/blog/wp-content/uploads/change-password.png)\n\nTo set a password for your XAMPP account, click on the Edit Privileges button and navigate to the Change Admin Password section. \n\nEnter your password and click Save to update your account. Be sure to remember this password, as you’ll need it to connect to your database.\n\n![change password database](https://www.cloudways.com/blog/wp-content/uploads/change-password-2-1024x411.png)\n\n**Note:** While it is not strictly necessary to change the password for accessing databases on your localhost, it is considered good practice to do so. For this reason, we have chosen to use a password for added security.\n\n## Create Database\n\nNow return to the homepage of PHPMyAdmin. Click the New button to create a new database.\n\n![phpmyadmin](https://www.cloudways.com/blog/wp-content/uploads/create-db.png)\n\nIn the new window, enter a name for your database. For this lesson, we’ll name it **“practice”**. \n\nFinally, click on **Create** to create your new database.\n\n![create database](https://www.cloudways.com/blog/wp-content/uploads/create-db-2.png)\n\nCurrently, the newly created database is empty because it contains no tables. In the upcoming series, we’ll learn how to create tables and insert data into them. Let’s focus on connecting the database to localhost using PHP.\n\n![tables in database](https://www.cloudways.com/blog/wp-content/uploads/tables-1024x48.png)\n\n### Create a Folder in htdocs\n\nFirst, navigate to the XAMPP installation folder and open the **htdocs** subfolder (usually located at **C:\\xampp**). \n\nInside **htdocs**, create a new folder named **“practice”** where we’ll store our web files. We must create a folder in **htdocs** because XAMPP uses the folders within **htdocs** to execute and run PHP sites.\n\n**Note:** If you’re using WAMP instead of XAMPP, make sure to create the practice folder within the **C:\\wamp\\www** directory.\n\n### Create Database Connection File in PHP\n\nCreate a new file named **db_connection.php** and save it as a PHP file. \n\nWe need a separate file for the database connection because it allows us to reuse the same connection code across multiple files. \n\nIf several files need to interact with the database, you can simply include the **db_connection.php** file instead of writing the connection code multiple times.\n\n    <?php\n    function OpenCon()\n    {\n        $dbhost = \"localhost\";\n        $dbuser = \"root\";\n        $dbpass = \"1234\";\n        $db = \"example\";\n        ($conn = new mysqli($dbhost, $dbuser, $dbpass, $dbname)) or\n            die(\"Connect failed: %s\\\n\" . $conn->error);\n        return $conn;\n    }\n    function CloseCon($conn)\n    {\n        $conn->close();\n    }\n    ?>\n\n\nLet’s take a closer look at the variables used in our **db_connection.php** file and their purpose:\n\n1. **$dbhost:** This variable specifies the host where your RAID server is running. It’s usually set to localhost.\n2. **$dbuser:** This variable specifies the username for accessing the database. For example, it could be set to root.\n3. **$dbpass:** This variable specifies the database password. It should be the same password you use to access PHPMyAdmin.\n4. **$dbname:** This variable specifies the database name you want to connect to. In this lesson, we created a database with a specific name, so you should use that name here.\n\nTo use the database connection in your code, simply include the **connection.php** file at the top of your script using PHP’s include function (e.g., **include ‘connection.php’**). This allows you to call and use the connection functions throughout your code.\n\nIf you need to change the connection details, you only have to update them in one place, and the changes will automatically apply to all other files that include the **connection.php** file.\n\n### Check Database Connection\n\nTo connect to your database, create a new PHP file named **index.php** and add the following code to it:\n\n    <?php\n        include 'db_connection.php';\n        $conn = OpenCon();\n        echo \"Connected Successfully\";\n        CloseCon($conn);\n    ?>\n\nTo view the index page, open your web browser and navigate to **localhost/practice/index.php**. You should see the following output on your screen:\n\n```\nConnected Successfully\n```\n\n### See Confirmation Message\n\nGreat job! You’ve successfully connected your database to your localhost. If you’re unable to see the expected screen, double-check the contents of your **db_connection.php** file to ensure everything is set up correctly.\n\n### Summary\n\nA well-designed database is important for any application. A MySQL database is needed to store and manage information for things like content management systems or online task-tracking platforms.\n\nWhen it comes to choosing between MySQLi and PDO, both have their advantages. However, it’s important to remember that MySQLi is specifically designed for connecting MySQL with PHP. You must modify your entire codebase if you need to migrate to another database.\n\nOn the other hand, PDO is compatible with 12 different databases, making migration much easier. Ultimately, the choice between MySQLi and PDO will depend on your specific needs and preferences.  \n"],"9":["Introduction to Functions & Modular Programming","\n# Introduction to Functions & Modular Programming\n\n![](https://2.bp.blogspot.com/-Fdplkd57cnk/W2bOCN7Bh_I/AAAAAAAAAHs/WOpYu-favskTYhx1904O9ftaRZGSAmBwgCPcBGAYYCw/s1600/php-1024x538.png)\n\nFunctions are blocks of code that can be repeatedly called by other code when it executes.\n\nA function is not called when it is defined, but only when another part of the code executes the function.\n\nThe syntax for a user defined function in PHP is similar to other languages:\n\n    function functionName(parameters) {\n        // code to execute\n    }\n\n* `functionName`: The name of the function. It must start with an alphabetic character or an underscore, and must consist only of alphanumeric characters or underscores.\n* `parameters`: Zero or more comma-separated variables that will be passed on to the code block when the function is called.\n* `code to execute`: The code that executes when the function is called.\n\n### Example\n\nThe following function takes a numeric argument and returns a string saying if it is even or odd:\n\n    <?php\n    function oddOrEven($x) {\n        if ($x % 2 == 1) {\n        return 'Odd';\n        } else {\n        return 'Even';\n        }\n        }\n    \n        echo oddOrEven(15) . '<br />';\n        // Output: Odd\n    \n        echo oddOrEven(20) . '<br />';\n        // Output: Even\n    ?>\n\n### The `return` Keyword\n\nThe `return` keyword in a function ends execution of the function and returns an optional value. If the value is omitted, the function returns a `null` value.\n\n    <?php\n    function example() {\n        $x = 1;\n        $x++;\n        return $x; // Execution stops and $x is returned to the caller\n        $x = 15; // This is never executed\n    }\n    \n    echo example();\n    // Output: 2;\n    ?>\n\n### Passing Parameters by Reference\n\nParameters are usually passed to PHP functions “by value.” \n\nThis means that when a variable is passed to the function, its value is copied and any change of the parameter variable does not affect the original variable. \n\nWhen a parameter is passed “by reference”, changes to the variable inside the function will affect the variable being passed to the function. \n\nA parameter is passed by reference when it is preceded by `&` in the function definition.\n\n    <?php\n    function changeMe(&$x) {\n        $x++;\n        }\n    \n    $y = 10;\n    changeMe($y);\n    echo $y;\n    // Output: 11;\n    ?>\n\n### Default Parameter Value\n\nPHP functions can be defined with default values for parameters that are omitted when the function is called. The syntax looks like this:\n\n    <?php\n    function default10($x = 10) {\n        return $x;\n        }\n    \n        echo default10(5) . '<br />';\n        // Output: 5\n        echo default10(125) . '<br />';\n        // Output: 125\n        echo default10() . '<br />';\n        // Output: 10\n    ?>\n\n## Modular Programming\n\n![](https://bs-uploads.toptal.io/blackfish-uploads/components/seo/content/og_image_file/og_image/737534/0810_Creating_Truly_Modular_Code_Lina_Social-a3c9aca70c51d6539b1c1eaaefb557a2.png)\n\nModular programming is a software development approach that involves breaking a computer program into smaller, self-contained, and independent modules or components. \n\nEach module serves a specific function or performs a particular task, and these modules can be developed, tested, and maintained independently from the rest of the program.\n\nThe main objectives of modular programming are:\n\n1. **Reusability**: By dividing a program into smaller modules, developers can reuse these modules in different parts of the application or in other projects. This saves time and effort and promotes code efficiency.\n2. **Maintainability**: Smaller modules are easier to understand and manage than large, monolithic codebases. When changes or updates are needed, developers can focus on specific modules without impacting the entire program, making maintenance more manageable.\n3. **Readability**: Modular programming encourages writing code that is more readable and understandable since each module is designed to perform a specific task.\n4. **Scalability**: Modular programs can scale more effectively, as new features or functionality can be added by creating new modules or modifying existing ones without having to rewrite the entire codebase.\n5. **Collaboration**: In larger development teams, modular programming facilitates collaboration since different team members can work on separate modules simultaneously without interfering with each other’s code.\n6. **Testing**: Smaller modules are easier to test individually, leading to more efficient testing processes and more reliable software.\n\nThere are various programming languages and paradigms that support modular programming, including object-oriented programming (OOP), functional programming, and procedural programming. \n\nIn OOP, classes and objects can be used as modules, whereas in functional programming, functions play a similar role. Procedural programming languages can also benefit from modular design by organizing functions into separate units.\n\nTo create a modular program, developers should focus on defining clear interfaces between modules, allowing them to interact with each other while minimizing internal dependencies. \n\nThis separation of concerns ensures that each module can be developed and modified independently, providing a flexible and maintainable software architecture.\n\nHere’s a simple PHP example demonstrating modular programming using functions:\n\nSuppose we want to create a basic calculator application with the following operations: addition, subtraction, multiplication, and division. We’ll break down the functionalities into separate modules.\n\n1. index.php: This file will serve as the main entry point and handle user input and display the result.\n\n###### index.php\n\n```xml\n<!DOCTYPE html>  \n<html>  \n<head>  \n    <title>Simple Calculator</title>  \n</head>  \n<body>  \n    <h1>Simple Calculator</h1>  \n    <form action=\"calculator.php\" method=\"post\">  \n        <input type=\"number\" name=\"num1\" required>  \n        <select name=\"operator\" required>  \n            <option value=\"+\">+</option>  \n            <option value=\"-\">-</option>  \n            <option value=\"*\">*</option>  \n            <option value=\"/\">/</option>  \n        </select>  \n        <input type=\"number\" name=\"num2\" required>  \n        <input type=\"submit\" value=\"Calculate\">  \n    </form>  \n</body>  \n</html>\n```\n\n2. calculator.php: This file will handle the form submission, call the appropriate functions, and display the result.\n\n###### calculator.php\n\n```xml\n<?php  \n// Include the separate module files  \nrequire_once 'operations.php';  \n\n// Get user input  \n$num1 = $_POST['num1'];  \n$num2 = $_POST['num2'];  \n$operator = $_POST['operator'];  \n\n// Perform the operation using the appropriate function from the operations module  \n$result = 0;  \nswitch ($operator) {  \n    case '+':  \n        $result = add($num1, $num2);  \n        break;  \n    case '-':  \n        $result = subtract($num1, $num2);  \n        break;  \n    case '*':  \n        $result = multiply($num1, $num2);  \n        break;  \n    case '/':  \n        $result = divide($num1, $num2);  \n        break;  \n}  \n?><!DOCTYPE html>  \n<html>  \n<head>  \n    <title>Simple Calculator - Result</title>  \n</head>  \n<body>  \n    <h1>Simple Calculator - Result</h1>  \n    <p>Result: <?php echo $result; ?></p>  \n    <a href=\"index.php\">Back to Calculator</a>  \n</body>  \n</html>\n```\n\n3. operations.php: This file will contain the modular functions for performing the mathematical operations.\n\n    <?php  \n        function add($a, $b) {  \n            return $a + $b;  \n        }  \n        \n        function subtract($a, $b) {  \n            return $a - $b;  \n        }  \n        \n        function multiply($a, $b) {  \n            return $a * $b;  \n        }  \n        \n        function divide($a, $b) {  \n            if ($b != 0) {  \n                return $a / $b;  \n            } else {  \n                return \"Error: Division by zero!\";  \n            }  \n        }  \n    ?>\n\nWith this modular approach, the calculator application is broken down into smaller, manageable modules. \n\nThe `index.php` file is responsible for the user interface, `calculator.php` handles the calculations, and `operations.php` contains the functions for performing the operations. \n\nThis structure makes the code more organized, readable, and maintainable.\n"],"10":["Introduction to OOPs In PHP","\n# Introduction to OOPs In PHP\n\n![](https://cdn-images-1.medium.com/v2/1*oAIfjxo_whV0EIdVKdUt2w.png)\n\nObject Oriented is an approach to software development that models application around real world objects such as employees, cars, bank accounts, etc. \n\nA class defines the properties and methods of a real world object. An object is an occurrence of a class.\n\nThe three basic components of object orientation are;\n\n* Object oriented analysis – functionality of the system\n* Object oriented designing – architecture of the system\n* Object oriented programming – implementation of the application\n\n## Object Oriented Programming Principles\n\nThe three major principles of OOP are;\n\n* **Encapsulation** – this is concerned with hiding the implementation details and only exposing the methods. The main purpose of encapsulation is to;\n* Reduce software development complexity – by hiding the implementation details and only exposing the operations, using a class becomes easy.\n* Protect the internal state of an object – access to the class variables is via methods such as get and set, this makes the class flexible and easy to maintain.\n* The internal implementation of the class can be changed without worrying about breaking the code that uses the class.\n* **Inheritance** – this is concerned with the relationship between classes. The relationship takes the form of a parent and child. The child uses the methods defined in the parent class. The main purpose of inheritance is;\n* Re-usability– a number of children, can inherit from the same parent. This is very useful when we have to provide common functionality such as adding, updating and deleting data from the database.\n* **Polymorphism** – this is concerned with having a single form but many different implementation ways. The main purpose of polymorphism is;\n* Simplify maintaining applications and making them more extendable.\n\n## OOPs Concepts in PHP\n\nPHP is an object oriented scripting language; it supports all of the above principles. The above principles are achieved via;\n\n* **Encapsulation** – via the use of “get” and “set” methods etc.\n* **Inheritance** – via the use of extends keyword\n* **Polymorphism** – via the use of implements keyword\n\nNow that we have the basic knowledge of OOP and how it is supported in PHP, let us look at examples that implement the above principles\n\n## What is UML?\n\nUnified Modeling Language UML is a technique used to design and document object oriented systems.\n\nUML produces a number of documents, but we will look at the class diagram which is very important to object oriented php programming.\n\n**Class Diagram Example**\n\n![](https://www.guru99.com/images/2013/04/employee_class.png)\n\n**Class Diagram Key**\n\n* The **Upper box** contains the class name\n* The **middle box** contains the class variables\n* The **lower box** contains the class methods\n* The **minus (-)** sign means private scope\n* The **plus (+)** sign means public scope\n* The **hash (#)** sign means protected scope\n\n## How to Create a class in PHP\n\nThe class keyword is used to define a class in PHP. Below are the rules for creating a class in PHP.\n\n* The class name should start with a letter\n* The class name cannot be a PHP reserved word\n* The class name cannot contain spaces\n\nLet’s say we want to create a class for representing animals.\n\nWe will start with identifying the features that are common to all animals.\n\n* All animals belong to a family such as a herbivore, carnival, etc.\n* All animals eat food\n\nThe diagram below shows the diagram for the animal\n\n![](https://www.guru99.com/images/2013/04/animal_class.png)\n\nLet’s now code our animal class\n\n    <?php\n    class Animal\n    {\n        private $family;\n        private $food;\n        public function __construct($family, $food)\n        {\n            $this->family = $family;\n            $this->food   = $food;\n        }\n        public function get_family()\n        {\n            return $this->family;\n        }\n        public function set_family($family)\n        {\n            $this->family = $family;\n        }\n        public function get_food()\n        {\n            return $this->food;\n        }\n        public function set_food($food)\n        {\n            $this->food = $food;\n        }\n    }\n    ?>\n\nFrom the above code,\n\n* “`private $family`, `$food`” means the variables cannot be accessed directly outside the class (Encapsulation).\n* “`public function __construct($family…)`” is the php constructor method. This function is called whenever an instance of the class has been created. In this case, we are setting the family and food.\n* “`public function get…()`” is the method used to access the family or food value (Encapsulation)\n* “`public function set…()`” is the method used to set the family or food value (Encapsulation)\n\n## How implement Inheritance in PHP\n\nWe will work with a cow and a lion. Both the cow and lion inherit from the Animal class.\n\nThe class diagram below shows the relationships.\n\n![](https://www.guru99.com/images/2013/04/inheritance.jpg)\n\nNote the cow inherits from the animal class and defines its own variable and methods too.\n\nLet’s now code the Cow class\n\n    <?php\n    class Cow extends Animal\n    {\n        private $owner;\n        public function __construct($family, $food)\n        {\n            parent::__construct($family, $food);\n        }\n        public function set_owner($owner)\n        {\n            $this->owner = $owner;\n        }\n        public function get_owner()\n        {\n            return $this->owner;\n        }\n    }\n    ?>\n\nLet’s now code the Lion class\n\n    <?php\n    class Lion extends Animal\n    {\n        public function __construct($family, $food)\n        {\n            parent::__construct($family, $food);\n        }\n    }\n    ?>\n\nHERE,\n\n* “`class … extends Animal`” makes the cow and lion use methods from the Animal class (Inheritance).\n\n### How to Create object of the class\n\nThe Animal, Cow, and Lion classes should all be in the same directory for simplicity’s sake.\n\nLet’s now create the application that uses our classes.\n\nPHP Class Example\n\n    <?php\n    require 'Animal.php';\n    require 'Cow.php';\n    require 'Lion.php';\n    $cow  = new Cow('Herbivore', 'Grass');\n    $lion = new Lion('Canirval', 'Meat');\n    echo '<b>Cow Object</b> <br>';\n    echo 'The Cow belongs to the ' . $cow->get_family() . ' family and eats ' . $cow->get_food() . '<br><br>';\n    echo '<b>Lion Object</b> <br>';\n    echo 'The Lion belongs to the ' . $lion->get_family() . ' family and eats ' . $lion->get_food();\n    ?>\n\n### Testing our application\n\nLet’s now view our application in a web browser\n\n![](https://www.guru99.com/images/2013/04/animal_object.png)\n\nFantastic right! Let’s now look at the third principle of OOP, polymorphism.\n\nLet’s say we want to develop an application that connects to different database engines such as MySQL and SQL Server but use the same uniform interface.\n\nWe can create an interface that defines the standard methods and an abstract class that implements the common methods.\n\n* **Interface** – it is similar to a class. It only defines the methods and parameters.\n* **Abstract class** – it is a class that cannot be used to create an object directly. Its purpose is to provide partial or whole implementations of common methods.\n\nThe class diagram below illustrates the relationship among our abstract class, interface, and implementation classes.\n\n![](https://www.guru99.com/images/2013/04/inheritance2.jpg)\n\nLet’s now create our abstract class\n\n    <?php\n    abstract class DBCommonMethods\n    {\n        private $host;\n        private $db;\n        private $uid;\n        private $password;\n        public function __construct($host, $db, $uid, $password)\n        {\n            $this->host     = $host;\n            $this->db       = $db;\n            $this->uid      = $uid;\n            $this->password = $password;\n        }\n    }\n    ?>\n\nHERE,\n\n* “`abstract class`” means the class cannot be used directly to php create object\n* “`$host,$db…`” are class variables common to all implementations\n* “`function __construct(…)`” is the php class constructor method that sets the common variables values at initialization\n\nLet’s now create the interface that contains the standard methods which will be implemented differently depending on the database engine.\n\n    <?php\n    interface DBInterface\n    {\n        public function db_connect();\n        public function insert($data);\n        public function read($where);\n        public function update($where);\n        public function delete($where);\n    }\n    ?>\n\nHERE,\n\n* “`interface`” is the keyword for creating interfaces\n* “`public function…(…)`” are the standard methods that should be implemented\n\nLet’s now create the concrete classes that will extend the DBCommonMethods class and extend the DBInterface interface. MySQLDriver.php\n\n    <?php class MySQLDriver extends \n    DBCommonMethods implements DBInterface { public function __construct($host, $db, $uid, $password) \n    { \n    parent::__construct($host, $db, $uid, $password); } \n    public function db_connect() { //connect code goes here } \n    public function delete($where) { //delete code goes here } \n    public function insert($data) { //insert code goes here } \n    public function read($where) { //read code goes here } \n    public function update($where) { //update code goes here } \n    } ?>\n\nMSSQLServerDriver.php\n\n    <?php \n    class MSSQLServerDriver extends \n    DBCommonMethods implements DBInterface { public function __construct($host, $db, $uid, $password)\n    { \n    parent::__construct($host, $db, $uid, $password); } \n    public function db_connect() { //connect code goes here } \n    public function delete($where) { //delete code goes here }\n    public function insert($data) { //insert code goes here }\n    public function read($where) { //read code goes here }\n    public function update($where) { //update code goes here }\n    } ?>\n\nHERE,\n\n* “`class … extends DBCommonMethods`” use the methods in the DBCommonMethods\n* “`… implements DBInterface`” ensures that the class provides standard methods regardless of the database driver used.\n\nUsage of the above code The code using the above class would look like this\n\n    <?php $db = new MySQLDriver($host,$db,$uid,$password); ?>\n\nOr\n\n    <?php $db = new MSSQLServerDriver ($host,$db,$uid,$password); ?>\n\nThe rest of the code would be the same for both drivers such as;\n\n    <?php\n    $db->db_connect();\n    $db->insert($data);\n    ?>\n\n### Summary\n\n* Object Oriented Programming OOP is a powerful technical that models applications after real world objects\n* A class is a representation of real world objects with properties and methods\n* The three basic principles of OOP are;\n    * Encapsulation\n    * Inheritance\n    * Polymorphism  \n"]},"Python":{"1":["Introduction to Python Programming","\n# Introduction to Python Programming\n\n![](https://www.crio.do/blog/content/images/2021/03/Python-projects.png)\n\nPython is a widely used general-purpose, high level programming language. \n\nPython is developed by **Guido van Rossum**. Guido van Rossum started implementing Python in 1989. \n\nIt was designed with an emphasis on code readability, and its syntax allows programmers to express their concepts in fewer lines of code\n\nPython is a very simple programming language so even if you are new to programming, you can learn python without facing any issues.\n\nPython is named after the comedy television show Monty Python’s Flying Circus. It is not named after the Python snake.\n\n### Features of Python programming language:\n\n![](https://miro.medium.com/v2/resize:fit:700/1*Sn5x7xwd3MDP5mXjB7Zihg.png)\n\n**Readable:** Python is a very readable language.\n\n**Easy to Learn:** Learning python is easy as this is a expressive and high level programming language, which means it is easy to understand the language and thus easy to learn.\n\n**Cross platform:** Python is available and can run on various operating systems such as Mac, Windows, Linux, Unix etc. This makes it a cross platform and portable language.\n\n**Open Source:** Python is a open source programming language.\n\n**Large standard library:** Python comes with a large standard library that has some handy codes and functions which we can use while writing code in Python.\n\n**Free:** Python is free to download and use. This means you can download it for free and use it in your application.\n\n**Supports exception handling:** If you are new, you may wonder what is an exception? An exception is an event that can occur during program exception and can disrupt the normal flow of program. Python supports exception handling which means we can write less error prone code and can test various scenarios that can cause an exception later on.\n\n**Advanced features:** Supports generators and list comprehensions. We will cover these features later.\n\n**Automatic memory management:** Python supports automatic memory management which means the memory is cleared and freed automatically. You do not have to bother clearing the memory.\n\n### Let's Write \"Hello World!\"\n\nLearning how to print “Hello, World!” in Python is a great way to get started with the language and start exploring its capabilities\n\nHere's the program:\n\n    print(\"Hello World!\")\n\nOutput:\n\n    \"Hello World!\"\n\nThe print() function in Python is used to print Python objects as strings as standard output\n\n\n### What Can You Do with Python?\n\nYou may be wondering what all are the applications of Python. There are so many applications of Python, here are some of the them.\n\n**Web development:** Web framework like Django and Flask are based on Python. They help you write server side code which helps you manage database, write backend programming logic, mapping urls etc.\n\n**Machine learning:** There are many machine learning applications written in Python. Machine learning is a way to write a logic so that a machine can learn and solve a particular problem on its own. For example, products recommendation in websites like Amazon, Flipkart, eBay etc. is a machine learning algorithm that recognizes user’s interest. Face recognition and Voice recognition in your phone is another example of machine learning.\n\n**Data Analysis:** Data analysis and data visualisation in form of charts can also be developed using Python.\n\n**Scripting:** Scripting is writing small programs to automate simple tasks such as sending automated response emails etc. Such type of applications can also be written in Python programming language.\n\n**Game Development:** You can develop games using Python.\n\n**Embedded Applications Development:** You can develop Embedded applications in Python.\n\n**Desktop applications:** You can develop desktop application in Python using library like TKinter or QT.\n\n### Why Python?\n\n* Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\n* Python has a simple syntax similar to the English language.\n* Python has syntax that allows developers to write programs with fewer lines than some other programming languages.\n* Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\n* Python can be treated in a procedural way, an object-orientated way or a functional way.\n\n### Python Syntax compared to other programming languages\n\n* Python was designed for readability, and has some similarities to the English language with influence from mathematics.\n* Python uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\n* Python relies on indentation, using white space, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.\n\nThis list is never-ending, with new additions to it every day, but I hope it is enough to motivate you to learn Python.\n"],"2":["Variables and Data Types","\n# Variables and Data Types\n\n![](https://res.cloudinary.com/teclado/image/upload/f_auto,q_auto,w_1280/python-30-day-2-strings-variables)\n\nVariables are the building blocks of any programming language, and Python is no exception.\n\nSimply put, a variable is like a container that stores a piece of information. It could be a number, a string of text, or even a complex data structure. \n\nThink of variables as labeled boxes that hold different types of data.\n\nIn Python, declaring a variable is as easy as pie. You don’t need to specify the type explicitly like in some other programming languages. \n\nPython is smart enough to figure it out on its own, thanks to its dynamic typing system. Let me show you an example:\n\n    # Declare a variable called 'name' and assign it a string value  \n    name = \"John Doe\"\n    \n    # Declare a variable called 'age' and assign it an integer value  \n    age = 25 \n    \n    # Declare a variable called 'is_student' and assign it a boolean value \n    is_student = True\n\nNotice how we didn’t have to mention the types of the variables explicitly? Python automatically infers the appropriate data types based on the values assigned.\n\n## Python’s Built-in Data Types\n\nPython provides several built-in data types that cover a wide range of use cases. \n\nLet’s take a closer look at some of the most commonly used ones:\n\n### 1. Numeric Types: Integers and Floats\n\nIntegers represent whole numbers without any decimal points, while floats are used to represent numbers with decimal points. Here’s an example:\n\n    # Integer  \n    my_integer = 42  \n    \n    # Float  \n    my_float = 3.14\n\n### 2. Strings: Handling Textual Data\n\nStrings are used to represent textual data such as names, addresses, and messages. They are denoted by enclosing the text within single quotes ('') or double quotes (\"\"). Take a look at this example:\n\n    message = \"Hello, world!\"\n\n### 3. Booleans: True or False\n\nBooleans are fundamental for decision-making in programming. They represent truth values, which `True` denote a condition is true, and `False` indicates it is false. Let's see an example:\n\n    is_sunny = True  \n    is_raining = False\n\n### 4. Lists: A Versatile Collection\n\nLists are an ordered collection of items. You can store any combination of data types within a list, including numbers, strings, and even other lists. Let me illustrate:\n\n    my_list = [1, 2, \"three\", 4.5, [6, 7, 8]]\n\n### 5. Tuples: Immutable Sequences\n\nSimilar to lists, tuples are ordered collections. However, unlike lists, tuples are immutable, meaning their elements cannot be modified once defined. Here’s an example to make things clearer:\n\n    my_tuple = (1, 2, 3, \"four\", 5.0)\n\n### 6. Dictionaries: Key-Value Pairs\n\nDictionaries are incredibly useful for organizing and retrieving data based on key-value pairs. Each value is associated with a unique key, allowing for fast and efficient access. Take a look:\n\n    student = {  \n        \"name\": \"John Doe\",  \n        \"age\": 20,  \n        \"major\": \"Computer Science\"  \n    }\n\n## Variable Naming and Best Practices\n\nWhile Python is quite flexible when it comes to naming variables, there are some guidelines to follow for clarity and maintainability. Here are a few best practices to keep in mind:\n\n1. Use descriptive names: Choose variable names that accurately describe their purpose.\n2. Follow naming conventions: Python uses snake_case (lowercase letters separated by underscores) for variable names, so try to adhere to this convention.\n3. Be mindful of reserved words: Avoid using reserved words as variable names, as they have predefined meanings in Python.\n\nNow that we have a solid understanding of variables and data types in Python, let’s put our knowledge into action with some hands-on examples.\n\n## Putting Variables to Work\n\n#### Example 1: Temperature Conversion\n\n    # Celsius to Fahrenheit conversion  \n    celsius = 30  \n    fahrenheit = (celsius * 9/5) + 32  \n    print(f\"The temperature in Fahrenheit is: {fahrenheit}°F\")\n\n#### Example 2: User Input and Conditionals\n\n    # Get user input  \n    name = input(\"What is your name? \")  \n    \n    # Greet the user  \n    if name:  \n        print(f\"Hello, {name}!\")  \n    else:  \n        print(\"Hello, stranger!\")\n\n#### Example 3: Shopping List\n\n    # Create a shopping list  \n    shopping_list = [\"apples\", \"bananas\", \"bread\"]  \n    \n    # Add an item  \n    shopping_list.append(\"cheese\")  \n    \n    # Remove an item  \n    shopping_list.remove(\"apples\")  \n    \n    # Print the updated list  \n    print(shopping_list)\n\n### Conclusion\n\nWe explored the concept of variables and their role in storing different types of data. \n\nWe also learned about Python’s built-in data types, including numbers, strings, booleans, lists, tuples, and dictionaries.\n\nRemember to choose meaningful variable names, follow naming conventions, and apply best practices to write clean and maintainable code. \n\nThe examples we covered showcased how variables can be used in various scenarios, from simple temperature conversion to user input and list manipulation.\n"],"3":["Basic Input and Output","\n# Basic Input and Output\n\n![](https://images.ctfassets.net/lzny33ho1g45/O97hZQ1aOEmlyKFuO2IuD/55f05f194e124c28674e713730124e7b/Python.jpg)\n\nInput and output are fundamental concepts in programming that allow developers to interact with users and display results to them. \n\nIn this lesson, we'll delve into the various ways to handle input and output in Python, along with extensive code examples for better understanding.\n\n## Taking Input from Users\n\n#### 1. Using the input() Function\n\nPython provides a simple and versatile method for taking input from users through the input() function. Here's how it works:\n\n    \n    # Taking input from the user\n    name = input(\"Enter your name: \")\n    \n    # Output\n    print(\"Hello, \" + name)\n    print(type(name))\n\nIn this example, the input() function prompts the user for input, and whatever they type is stored in the variable name. The subsequent print() statement displays a greeting message along with the entered name, followed by printing the data type of the input (which will be a string).\n\n**Output:**\n\n```\nEnter your name: Abdul Khalid\nHello, Abdul Khalid\n<class 'str'>\n```\n\n#### 2. Accepting Integer Input\n\nYou can also use the input() function to take integer input from users:\n\n    \n    # Taking input from the user as an integer\n    num = int(input(\"Enter a number: \"))\n    \n    add = num + 1\n    \n    # Output\n    print(add)\n    \n\nIn this snippet, the input is converted to an integer using the int() function, enabling mathematical operations.\n\n**Output:**\n\n```\nEnter a number: 25\n26\n```\n\n#### 3. Taking Multiple Inputs\n\nPython allows you to receive multiple inputs of the same data type at once using the split() method in combination with the map() function:\n\n    \n    a, b, c = map(int, input(\"Enter the Numbers: \").split())\n    print(\"The Numbers are:\", a, b, c)\n    \n\nHere, the user can input three space-separated numbers, and the map() function converts them to integers.\n\n## Input for Sequence Data Types\n\n### Taking List/Set Elements\n\nYou can collect list or set elements either by using iterative methods (like `append()` or `add()`) or by employing the `map()` and `list()`/`set()` methods:\n\n#### Method 1: Iterative Approach\n\n    \n    List = list()\n    Set = set()\n    l = int(input(\"Enter the size of the List: \"))\n    s = int(input(\"Enter the size of the Set: \"))\n    print(\"Enter the List elements:\")\n    for i in range(0, l):\n        List.append(int(input()))\n    print(\"Enter the Set elements:\")\n    for i in range(0, s):\n        Set.add(int(input()))\n    print(List)\n    print(Set)\n    \n\n#### Method 2: Using map() and list()/set()\n\n    \n    List = list(map(int, input(\"Enter List elements: \").split()))\n    Set = set(map(int, input(\"Enter the Set elements: \").split()))\n    print(List)\n    print(Set)\n    \n\n### Taking Input for Tuple\n\nWhile tuples are immutable, you can still add elements using a workaround:\n\n    \n    T = (2, 3, 4, 5, 6)\n    print(\"Tuple before adding new element:\", T)\n    L = list(T)\n    L.append(int(input(\"Enter the new element: \")))\n    T = tuple(L)\n    print(\"Tuple After adding the new element:\", T)\n    \n\n## Displaying Output\n\n### 1. Using the print() Function\n\nPython's print() function is a versatile tool for displaying output:\n\n    \n    print(\"EASC\")\n    \n    # Disabling softspace feature\n    print('E', 'A', 'S', 'C')\n\n**Output:**\n\n```\nEASC\nE A S C\n```    \n\nYou can adjust the sep and end parameters to control separation and line endings:\n\n    print(\"EASC\", end=\"@\", '\n')\n    print('E', 'A', 'S', 'C', sep=\"#\")\n\n**Output:**\n\n```\nEASC@\nE#A#S#C\n```\n\n### ll. Formatting Output\n\nPython offers various methods for output formatting:\n\n#### Using Formatted String Literals\nWe can use formatted string literals, by starting a string with f or F before opening quotation marks or triple quotation marks. \n\nIn this string, we can write Python expressions between { and } that can refer to a variable or any literal value.\n    \n    name = \"Khalid\"\n    print(f'Hello {name}! How are you?')\n    \n**Output:**\n\n```\nHello Khalid! How are you?\n```\n\n#### Using format() Method\nWe can also use `format()` function to format our output to make it look presentable. \nThe curly braces `{ }` work as placeholders. We can specify the order in which variables occur in the output. \n    \n    # Initializing variables\n    a = 20\n    b = 10\n    \n    # addition\n    sum = a + b\n    \n    # subtraction\n    sub = a- b\n    \n    # Output\n    print('The value of a is {} and b is {}'.format(a,b))\n    \n    print('{2} is the sum of {0} and {1}'.format(a,b,sum))\n    \n    print('{sub_value} is the subtraction of {value_a} and {value_b}'.format(value_a = a, value_b = b, sub_value = sub))\n\n**Output:**\n\n```\nThe value of a is 20 and b is 10\n30 is the sum of 20 and 10\n10 is the subtraction of 20 and 10\n```    \n\n#### Using % Operator\nWe can use ‘%’ operator. % values are replaced with zero or more value of elements. \n\nThe formatting using % is similar to that of ‘printf’ in the C programming language.\n- %d - integer\n- %f – float\n- %s – string\n- %x – hexadecimal\n- %o – octal\n\n```python\nnum = int(input(\"Enter a value: \"))\nadd = num + 5\nprint(\"The sum is %d\" % add)\n```\n    \n**Output:**\n\n```\nEnter a value: 50\nThe sum is 55\n``` \n\n## Conclusion\n\nIn this comprehensive guide, we explored the various ways of handling input and output in Python. \n\nFrom taking user input using input() to formatting and displaying output using the print() function, you've learned the essential techniques to communicate with users and showcase results effectively in Python programs. \n\nArmed with this knowledge, you're ready to embark on your programming journey with confidence!\n"],"4":["Conditional Statements","\n# Conditional Statements\n\n![](https://blog.vantagecircle.com/content/images/2020/12/Decision-making.png)\n\nConditional statements are an essential part of programming in Python. They allow you to make decisions based on the values of variables or the result of comparisons.\n\nIn this lesson, we'll explore how to use if, else, and elif statements in Python, along with some examples of how to use them in practice.\n\n### How to Use the `if` Statement in Python\n\nThe `if` statement allows you to execute a block of code if a certain condition is true. Here's the basic syntax:\n\n    if condition:\n        # code to execute if condition is true\n    \n\nThe condition can be any expression that evaluates to a Boolean value (True or False). If the condition is True, the code block indented below the if statement will be executed. If the condition is False, the code block will be skipped.\n\nHere's an example of how to use an `if` statement to check if a number is positive:\n\n    num = 5\n    \n    if num > 0:\n        print(\"The number is positive.\")\n    \n\nOutput:\n\n```\nThe number is positive.\n```\n    \n\nIn this example, we use the `>` operator to compare the value of `num` to 0. If `num` is greater than 0, the code block indented below the `if` statement will be executed, and the message \"The number is positive.\" will be printed.\n\n### How to Use the `else` Statement in Python\n\nThe `else` statement allows you to execute a different block of code if the `if` condition is False. Here's the basic syntax:\n\n    if condition:\n        # code to execute if condition is true\n    else:\n        # code to execute if condition is false\n    \n\nIf the condition is True, the code block indented below the `if` statement will be executed, and the code block indented below the `else` statement will be skipped.\n\nIf the condition is False, the code block indented below the `else` statement will be executed, and the code block indented below the `if` statement will be skipped.\n\nHere's an example of how to use an `if-else` statement to check if a number is positive or negative:\n\n    num = -5\n    \n    if num > 0:\n        print(\"The number is positive.\")\n    else:\n        print(\"The number is negative.\")\n    \n\nOutput:\n\n```\nThe number is negative.\n```\n    \n\nIn this example, we use an `if-else` statement to check if `num` is greater than 0. If it is, the message \"The number is positive.\" is printed. If it is not (that is, num is negative or zero), the message \"The number is negative.\" is printed.\n\n### How to Use the `elif` Statement in Python\n\nThe `elif` statement allows you to check multiple conditions in sequence, and execute different code blocks depending on which condition is true. Here's the basic syntax:\n\n    if condition1:\n        # code to execute if condition1 is true\n    elif condition2:\n        # code to execute if condition1 is false and condition2 is true\n    elif condition3:\n        # code to execute if condition1 and condition2 are false, and condition3 is true\n    else:\n        # code to execute if all conditions are false\n    \n\nThe `elif` statement is short for \"else if\", and can be used multiple times to check additional conditions.\n\nHere's an example of how to use an `if-elif-else` statement to check if a number is positive, negative, or zero:\n\n    num = 0\n    \n    if num > 0:\n        print(\"The number is positive.\")\n    elif num < \n    \n\n## Use Cases For Conditional Statements\n\n#### Example 1: Checking if a number is even or odd.\n\n    num = 4\n    \n    if num % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \n\nOutput:\n\n```\nThe number is even.\n```\n    \n\nIn this example, we use the modulus operator (%) to check if `num` is evenly divisible by 2.\n\nIf the remainder of num divided by 2 is 0, the condition num % 2 == 0 is True, and the code block indented below the `if` statement will be executed. It will print the message \"The number is even.\"\n\nIf the remainder is not 0, the condition is False, and the code block indented below the `else` statement will be executed, printing the message \"The number is odd.\"\n\n#### Example 2: Assigning a letter grade based on a numerical score\n\n    score = 85\n    \n    if score >= 90:\n        grade = \"A\"\n    elif score >= 80:\n        grade = \"B\"\n    elif score >= 70:\n        grade = \"C\"\n    elif score >= 60:\n        grade = \"D\"\n    else:\n        grade = \"F\"\n    \n    print(\"Your grade is:\", grade)\n    \n\nOutput:\n\n```\nYour grade is: B\n```\n    \n\nIn this example, we use an `if-elif-else` statement to assign a letter grade based on a numerical score.\n\nThe `if` statement checks if the score is greater than or equal to 90. If it is, the grade is set to \"A\". If not, the first `elif` statement checks if the score is greater than or equal to 80. If it is, the grade is set to \"B\". If not, the second `elif` statement checks if the score is greater than or equal to 70, and so on. If none of the conditions are met, the `else` statement assigns the grade \"F\".\n\n#### Example 3: Checking if a year is a leap year\n\n    year = 2000\n    \n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                print(year, \"is a leap year.\")\n            else:\n                print(year, \"is not a leap year.\")\n        else:\n            print(year, \"is a leap year.\")\n    else:\n        print(year, \"is not a leap year.\")\n    \n\nOutput:\n\n```\n2000 is a leap year.\n```\n    \n\nIn this example, we use nested `if` statements to check if a year is a leap year. A year is a leap year if it is divisible by 4, except for years that are divisible by 100 but not divisible by 400.\n\nThe outer `if` statement checks if year is divisible by 4. If it is, the inner `if` statement checks if it is also divisible by 100. If it is, the innermost `if` statement checks if it is divisible by 400. If it is, the code block indented below that statement will be executed, printing the message \"is a leap year.\"\n\nIf it is not, the code block indented below the `else` statement inside the inner `if` statement will be executed, printing the message \"is not a leap year.\".\n\nIf the year is not divisible by 4, the code block indented below the `else` statement of the outer `if` statement will be executed, printing the message \"is not a leap year.\"\n\n#### Example 4: Checking if a string contains a certain character\n\n    string = \"hello, world\"\n    char = \"w\"\n    \n    if char in string:\n        print(\"The string contains the character\", char)\n    else:\n        print(\"The string does not contain the character\", char)\n    \n\n**Outcome:**\n\n```\nThe string contains the character w\n```\n    \n\nIn this example, we use the `in` operator to check if the character `char` is present in the string string. If it is, the condition `char` in string is True, and the code block indented below the `if` statement will be executed, printing the message \"The string contains the character\" followed by the character itself.\n\nIf `char` is not present in string, the condition is False, and the code block indented below the `else` statement will be executed, printing the message \"The string does not contain the character\" followed by the character itself.\n\n## Conclusion\n\nConditional statements (if, else, and elif) are fundamental programming constructs that allow you to control the flow of your program based on conditions that you specify. They provide a way to make decisions in your program and execute different code based on those decisions.\n\nIn this lesson, we have seen several examples of how to use these statements in Python, including checking if a number is even or odd, assigning a letter grade based on a numerical score, checking if a year is a leap year, and checking if a string contains a certain character.\n\nBy mastering these statements, you can create more powerful and versatile programs that can handle a wider range of tasks and scenarios.\n\nIt is important to keep in mind that proper indentation is crucial when using conditional statements in Python, as it determines which code block is executed based on the condition.\n\nWith practice, you will become proficient in using these statements to create more complex and effective Python programs.\n\n"],"5":["Loops and Iterations","\n# Loops and Iterations\n\n![](https://icamera.pro/wp-content/uploads/2020/12/0_vvyKgpRGafakl_CW.jpeg)\n\nLoops are an essential concept in programming. They allow you to execute a block of code repeatedly based on certain conditions.\n\nPython offers two types of loops: for and while loops. In this lesson, we will explore both of these loop types and provide examples of how to use them in your Python code.\n\n## For Loop\n\nYou'll use a for loop when you want to iterate over a collection of items or when you know the exact number of times you want to execute a block of code.\n\nHere's the code for a for loop in Python:\n\n    for var in iterable:\n        # code to execute\n    \n\n* var is a variable that represents the current item in the iterable that we're iterating over.\n* iterable is a collection of items that we want to iterate over, such as a list, tuple, string, or range.\n\nFor example, let's say we have a list of numbers and we want to print each number:\n\n    numbers = [1, 2, 3, 4, 5]\n    for num in numbers:\n        print(num)\n    \n\nOutput\n\n```\n1\n2\n3\n4\n5\n```\n    \n\nWe can also use the `range()` function to specify a range of numbers to iterate over:\n\n    for num in range(1, 6):\n        print(num)\n\nOutput:\n\n```\n1\n2\n3\n4\n5\n```\n    \n\nThe `range()` function takes two arguments: the starting number and the ending number (exclusive). In this case, the loop will iterate over the numbers from 1 to 5.\n\n## While Loop\n\nYou'll use a while loop when you want to execute a block of code repeatedly based on a condition.\n\nHere's the syntax for a while loop in Python:\n\n    while condition:\n        # code to execute\n    \n\n`condition` is a boolean expression that determines whether the loop should continue or not.\n\nFor example, let's say we want to print the numbers from 1 to 5 using a while loop:\n\n    num = 1\n    while num <= 5:\n        print(num)\n        num += 1\n    \n\nIn this example, we initialize the `num` variable to 1 and then execute the loop as long as `num` is less than or equal to 5. \n\nInside the loop, we print the current value of `num` and then increment it by 1.\n\nWe can also use a while loop to keep asking the user for input until they enter a valid response:\n\n    valid_response = False\n    while not valid_response:\n        response = input(\"Enter 'yes' or 'no': \")\n        if response.lower() == 'yes' or response.lower() == 'no':\n            valid_response = True\n        else:\n            print(\"Invalid response. Please enter 'yes' or 'no'.\")\n    \n\nLet's take a look at some advanced uses of loops in Python.\n\n## Nested Loops\n\nNested loops are loops that are contained inside other loops. \n\nThey allow us to iterate over a collection of items multiple times and are useful for tasks such as generating all possible combinations of items.\n\nHere's an example of how to use nested loops to generate all possible pairs of numbers from two lists:\n\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    \n    for num1 in list1:\n        for num2 in list2:\n            print(num1, num2)\n    \n\nOutput:\n\n```\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n```\n    \n\nIn this example, we use a nested for loop to iterate over each item in list1 and list2, and print out all possible pairs of numbers.\n\n## List Comprehension\n\nList comprehensions are a concise way to create lists based on existing lists or other iterable objects. They use a for loop and an optional conditional statement to generate the new list.\n\nHere's an example of how to use list comprehension to create a new list of even numbers from an existing list:\n\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    print(even_numbers)\n    \n\nOutput:\n\n```\n[2, 4, 6, 8, 10]\n```\n    \n\nIn this example, we use a list comprehension to iterate over each number in the numbers list and add it to the `even_numbers` list if it is even (that is, the remainder when divided by 2 is 0).\n\n### How to Iterate Over a Dictionary in Python\n\nIn Python, we can iterate over the keys, values, or items (key-value pairs) of a dictionary using a for a loop.\n\nHere's an example of how to iterate over the items of a dictionary and print out the key-value pairs:\n\n    fruits = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n    \n    for fruit, color in fruits.items():\n        print(f\"The {fruit} is {color}.\")\n    \n\nOutput:\n\n```\nThe apple is red.\nThe banana is yellow.\nThe orange is orange.\n```\n\nIn this example, we use the `items()` method of the `fruits` dictionary to iterate over each key-value pair, and then print out a formatted string that includes the fruit and its corresponding color.\n\n## Conclusion\n\nLoops are an essential part of programming in Python. They allow us to automate repetitive tasks and manipulate data in powerful ways.\n\nBy understanding the basics of for and while loops, as well as more advanced concepts such as nested loops and list comprehensions, you'll be able to write efficient and effective code in Python.\n"],"6":["Lists and Tuples","\n# Lists and Tuples\n\n![](https://media.dev.to/cdn-cgi/image/width=1600,height=900,fit=cover,gravity=auto,format=auto/https://www.scaler.com/topics/images/what-is-list-in-python_thumbnail.webp)\n\nPython has several data types that can be used to store collections of data. \n\nTwo of these types are lists and tuples. Both lists and tuples are sequences, which means that they are ordered collections of objects. \n\nHowever, there are some key differences between the two types that can affect how they are used in Python programs.\n\n### Lists\n\nLists are one of the most basic and versatile data types in Python. \n\nThey are defined using square brackets and can contain any type of object, including other lists. \n\nHere is an example of a list that contains a mix of integers, strings, and floating point numbers:\n\n    my_list = [1, \"hello\", 3.14, [4, 5, 6]]\n\n### Creating a list.\n\nLists are mutable, which means that their contents can be modified after they are created. \n\nFor example, you can change the value of an element in a list, add new elements to a list, or remove elements from a list. \n\nHere are some examples of how you can modify a list:\n\n    # Change the value of an element \n    my_list[0]= 100\n    \n    # Add a new element to the end of the list \n    my_list.append(\"world\")\n    \n    # Insert a new element at a specific index \n    my_list.insert(1, \"inserted\")\n    \n    # Remove an element from the list\n    del my_list[2]\n\n### Modifying a list.\n\nLists also support slicing, which allows you to extract a sub-sequence from the list. Here is an example of using slicing to extract a sub-list:\n\n    # Get a sub-list containing the second and third elements \n    sub_list = my_list[1:3]\n\n### Slicing to extract from a list.\n\nIn addition to these basic operations, lists also have a number of built-in methods that can be used to manipulate their contents. \n\nSome examples of these methods include `sort()`, which sorts the elements of the list in ascending order, and `reverse()`, which reverses the order of the elements in the list.\n\n### Tuples\n\nTuples are similar to lists, but they are immutable, which means that their contents cannot be modified after they are created. \n\nTuples are defined using parentheses, and like lists, they can contain any type of object. Here is an example of a tuple:\n\n    my_tuple = (1, \"hello\", 3.14, [4, 5, 6])\n\n### Creating a tuple.\n\nSince tuples are immutable, you cannot modify their contents using the assignment operator or any of the list modification methods. \n\nHowever, you can still access the elements of a tuple using indexing or slicing, just like you can with a list.\n\nOne of the main differences between lists and tuples is that tuples are often used for data that should not be modified. \n\nFor example, you might use a tuple to store a fixed set of values, such as the days of the week or the months of the year. \n\nTuples can also be used as keys in dictionaries and as elements in sets, which are both data types that do not allow mutable objects.\n\n### Comparison of Lists and Tuples\n\nLet’s quickly recap. Lists and tuples are both types of sequences in Python, but they have some key differences:\n\n* Lists are mutable, while tuples are immutable.\n* Lists have a number of built-in methods for modifying their contents, while tuples do not.\n* Tuples are often used for data that should not be modified, while lists are more flexible and can be used for a wider range of purposes.\n\nHere is an example of how lists and tuples can be used in a Python program:\n\n    # Define a list and a tuple\n    my_list = [1, 2, 3]\n    my_tuple = (4, 5,\n    6)\n    \n    # Access elements using indexing \n    \n    print(my_list[@]) # Output: 1 \n    print(my_tuple [1]) # Output: 5\n    \n    # Modify an element in a list\n    my_list[1] = 10\n    print(my_list) # Output: [1, 10, 3]\n    \n    # Try to modify an element in a tuple (this will raise an error)\n    my_tuple[1] = 20\n\n### Using lists and tuples.\n\nIn this example, we define a list and a tuple that contain the same values. We then access the elements of each sequence using indexing, and we modify an element in the list. \n\nFinally, we try to modify an element in the tuple, which raises an error because tuples are immutable.\n\nIt’s important to choose the right data type for your needs when working with Python. \n\nLists are a good choice when you need a mutable sequence that you can modify, while tuples are a good choice when you need an immutable sequence or when you need to use the sequence as a key in a dictionary or as an element in a set.\n"],"7":["Dictionaries and Sets","\n# Dictionaries and Sets\n\n![](https://miro.medium.com/v2/resize:fit:1200/0*IkBprj2jlkh4H_qO.png)\n\nThe Python programming language is an object-oriented programming language and offers us a wide variety of simplistic and elegant operations to perform numerous tasks.\n\nOne of many such characteristic features of Python is the availability of Data Structures for compactness of code as well as computing various operations.\n\nData Structures are a collection of data elements that are structured in some way. Data Structures are the core of any programming language, and this holds true for Python as well.\n\nThere are many built-in data structures in Python. These range from lists, dictionaries, sets, strings, frozen sets, and tuples. Each of them has its own unique use cases for various tasks.\n\nIn this lesson, we will focus on two such Data Structures, namely, Dictionaries and Sets. We will focus on the core understanding of these concepts with codes and gain an intuition of how and when to use these aspects of Data Structures while coding.\n\n## Sets\n\nSet is a Data Structure in Python with an unordered and unindexed collection of elements. Every element in a Set is always unique. The Set Data Structure does not allow any duplication of elements.\n\nThe Set is similar to the list Data Structure when it comes to mutability. Both Sets and Lists are mutable. This means that elements can be added or removed from these ‘Sets’ data structures that are created.\n\nSets can be used to perform mathematical set operations like union, intersection, symmetric difference, etc. Hence, they find their usage for mathematical computations making it an overall important data structure for performing specific operations.\n\nNow that we have a basic understanding of sets, let us proceed to understand some of the basic operations and functionalities of Sets. We will cover most of the essential concepts you need to know to master the Set Data Structure.\n\n## Creation of Sets\n\nThere are two main methods of creating a set. One method is to use the set function that is available in Python. The other method is to use the curly braces ‘{}’ and type the list of various elements.\n\nThe sets that are created cannot be indexed because they are unordered elements. If any element is repeated in the set, it is not accounted for and will be disregarded. The elements in a set are always arranged in ascending order.\n\nLet us explore this topic with a few code blocks to gain a better understanding of the topic.\n\n    #set of integers\n    s = {1, 2, 3}\n    print(s)\n    \n    #print type of s\n    print(type(s))\n\n**Output:**\n\n```\nset([1, 2, 3])  \n<type 'set'>\n```\n\nThe code block described above provides us with one of the methods of creating a Set of elements. We can notice that we have made use of the curly braces to create a list. The type function is used to indicate that the variable ‘s’ defined by the user now belongs to the class ‘set’.\n\nIn the next code block, we will look at the other method to create a set.\n\n    a = set([1, 2, 3, 8, 4, 2])\n\nIn the second method of creating a set, we can notice that I tried to implement a set and provided a repetition of the element 2 and arranged the order of elements in an unorganized manner. \n\nHowever, the set function removed any duplicate elements and arranged all of the elements in an organized ascending order.\n\n**Note:** Trying to index an element in a set is not possible because it is unordered and unindexed. Trying to do so will result in the following error.\n\n```\nTypeError: 'set' object does not support indexing\n```\n\n## Adding Elements To A Set\n\nWe have already discussed that the set data structure is mutable. Hence, it is possible to add additional elements to the set. \n\nThere are two main methods of performing this operation. We can acknowledge this with the add() and the update() functions provided in the Set data structure.\n\nThe add() method adds an element to the set. If the element is already present in the set, then the following function will skip the adding operation and no further step is required.\n\nLet us look at the operation of the add() function in the set data structure.\n\n    s = {1,2}\n    s.add(3)\n    print(s)\n\n**Output:**\n\n```\n{1, 2, 3}\n```\n\nIn the above code block, we can notice that the initial defined set had the elements 1 and 2. \n\nWith the use of the add() function, we were able to add an additional element 3 to the existing set.\n\nIn the next code block, we will look at the update() function which can be used to add multiple elements to the set. \n\nIf there are any repetitions, then those elements are ignored.\n\ns = {1,2,3}\ns.update([3,4,5,6])\nprint(s)\n\n**Output:**\n\n```\n{1, 2, 3, 4, 5, 6}\n```\n\nThe update() function as described in the above code block can add multiple elements to the particular set. Similar to the add() function, any repetition of elements is disregarded and all the elements are arranged in the ascending order.\n\n## Removing Elements From A Set\n\nWe already determined multiple times that a set is mutable and hence even removing elements from a set is possible. \n\nThe removing of elements from a set can be done in mainly three ways, namely, remove(), discard(), and pop. Let us look at the code block below and the respective output received from the following lines of codes to determine how exactly these functions work.\n\n    # remove function\n    \n    s = {1,2,3,4,5}\n    s.remove(5)\n    print(s)\n    \n    # discard function\n    \n    s = {1,2,3,4,5}\n    s.discard(5)\n    print(s)\n    \n    # pop function\n    \n    s = {1,2,3,4,5}\n    s.pop()\n    print(s)\n\n**Output:**\n\n```\n{1, 2, 3, 4}\n{1, 2, 3, 4}  \n{2, 3, 4, 5}\n```\n\nThe remove function is used to remove a pre-existing element from the set. In case the element you are trying to remove does not exist in the set, you will receive the a key error.\n\nTo combat this issue, we have the discard function. If the element to be present in the set is present, then the element is removed. If the element is absent in the set, then the operation proceeds normally without any errors.\n\nThe pop() function is used to randomly remove an element from the set. The pop() method assigned to a variable results in a random value, and you can obtain then the pop() method returns the removed element to the variable. Refer to the below example to understand this statement more clearly.\n\n```\nx = s.pop() \n``` \nHere, 'x' would store the value of 1.\n\n## Important Functions Of Sets\n\nThe set data structure allows the user to perform a variety of unique mathematical computations and operations. \n\nThese operations can easily be understood by viewers who have read concepts of sets and Venn diagrams in their high school.\n\nLet us analyze some of the operations that can be performed with the various functions available in the set data structure.\n\n### 1. Union\n\nThe union of a collection of sets is the set of all elements in the collection. \n\nIn Python sets, we can use the ‘|’ operator or the union function to perform this operation. This operation can be computed as follows:\n\n    s1 = {1,2,3}\n    s2 = {3,4,5}\n    su1 = s1 | s2\n    su2 = s1.union(s2)\n    print(su1)\n    print(su2)\n\n**Output:**\n\n```\n{1, 2, 3, 4, 5}  \n{1, 2, 3, 4, 5}\n```\n\n### 2. Intersection\n\nThe intersection function is used to obtain similar elements from two particular sets. \n\nIn Python sets, we can use the ‘&’ operator or the intersection function to perform this operation. This operation can be computed as follows:\n\n    s1 = {1,2,3}\n    s2 = {3,4,5}\n    si1 = s1 & s2\n    si2 = s1.intersection(s2)\n    print(si1)\n    print(si2)\n\n**Output:**\n\n```\n{3}  \n{3}\n```\n\n### 3. Set Difference and Other Operations\n\nThe set difference is the set of elements that are only in set1 but not in set2. This operation can be performed as follows:\n\n    s1 = {1,2,3}\n    s2 = {3,4,5}\n    sd1 = s1 - s2\n    sd2 = s1.difference(s2)\n    \n    print(sd1)\n    print(sd2)\n\n**Output:**\n\n```\n{1, 2}\n{1, 2}\n```\n\nThe symmetric difference is set of elements in both set1 and set2 except those that are common in both. \n\nThis operation can be performed as follows:\n\n    s1 = {1,2,3}\n    s2 = {3,4,5}\n    \n    ssd1 = s1 ^ s2\n    ssd2 = s1.symmetric_difference(s2)\n    \n    print(ssd1)\n    print(ssd2)\n\n**Output:**\n\n```\n{1, 2, 4, 5}  \n{1, 2, 4, 5}\n```\n\nWith this, we have covered most of the essential concepts of sets and can proceed to the other data structures.\n\n## Frozen Sets\n\nFrozen sets are similar to the set data type and have similar characteristics of sets, but once the respective elements are assigned, then it is not possible to add, modify, remove, or update these data structures. \n\nThe property of frozen sets is they are immutable. The similarity between sets and frozen sets is similar to lists and tuples. \n\nWhile tuple are immutable lists, frozen sets are immutable sets. \n\nFrozen sets can be created using the frozenset() function. This can be done as follows according to the code block provided below.\n\n    s = frozenset([1, 2, 3, 4])\n    print(s)\n    \n    #print type of s\n    print(type(s))\n\n**Output:**\n\n```\nfrozenset({1, 2, 3, 4})  \n<class 'frozenset'>\n```\n\nThe above code block and output is a representation of how to define the frozen set data structure. \n\nThe type function is used to indicate that the variable ‘s’ defined by the user now belongs to the class ‘frozenset’.\n\nSets being mutable are not hashable, so they can’t be used as dictionary keys. On the other hand, frozen sets are hashable and can be used as keys to a dictionary.\n\nThis datatype supports methods like copy(), difference(), intersection(), isdisjoint(), issubset(), issuperset(), symmetric_difference() and union(). Being immutable it does not have method that add or remove elements.\n\nThe addition or removing of elements is not supported in frozen sets. Indexing also is not supported in frozen sets similar to the set data structure. \n\nThe following errors are resulted in trying to do so.\n\n```\nAttributeError: 'frozenset' object has no attribute 'add'  \n```\n\n```\nTypeError: 'frozenset' object does not support indexing\n```\n\nThe operations performed by the frozen sets are similar to the other set functions that are mentioned in the previous section. \n\nSo, We would highly recommend checking out the other functions of sets because it is very similar to frozen sets and the following computations can be performed accordingly.\n\n**Note:** The frozen set is comparatively smaller than sets and dictionaries. The function is not really used that much in Python programming or Data Science due to its limited usage. However, it is still a cool data structure to understand due to the unique operations you can perform with it.\n\n## Dictionaries\n\nThe dictionary Data Structure in Python is an unordered collection of items. While other Data Structures use only one value as the element, the dictionary is a slightly more compound data structure. \n\nIt makes use of two elements i.e. a pair of elements, namely, a key and a value.\n\nLet us look at some of the primary functions and methodologies of the dictionary data structure. \n\nMost of the important aspects of dictionaries for beginners will be covered in this lesson.\n\n### Creation Of Dictionary Data Structure:\n\nThe dictionary data structure can be created in two main ways. \n\nThe first approach to create a dictionary is to define a key and value element inside the curly braces ‘{}’ and the other method is to call the dict() function available in Python.\n\nLet us look at the below two code blocks to understand the creation of dictionaries and the various possibilities with which the following actions can be performed. \n\nThe codes are mostly self-explanatory with the comment lines. But, feel free to let me know in the comments below if you have any other queries with respect to this topic.\n\n**Approach-1:**\n\n    # Dictionary with integer keys\n    my_dict = {1: 'A', 2: 'B'}\n    print(my_dict)\n    \n    # Dictionary with string keys\n    my_dict = {'name': 'X', 'age': 10}\n    print(my_dict)\n    \n    # Dictionary with mixed keys\n    my_dict = {'name': 'X', 1: ['A', 'B']}\n    print(my_dict)\n\n**Output:**\n\n```\n{1: 'A', 2: 'B'}  \n{'name': 'X', 'age': 10}  \n{'name': 'X', 1: ['A', 'B']}\n\n```\n\n**Approach-2:**\n\n    # Create empty Dictionary using dict()\n    \n    my_dict = dict([(1, 'A'), (2, 'B')])  #create a dict with list of tuples\n    print(my_dict)\n\n**Output:**\n\n```\n{1: 'A', 2: 'B'}\n```\n\nYou can access the dictionary values with their respective keys. \n\nTo access a specific value in the dictionary data set, you need to index the right key. \n\nDictionaries in Python are mutable and the elements in a dictionary can be added, removed, modified, and changed accordingly.\n\n### Adding And Removing Elements In A Dictionary\n\nAs discussed previously, dictionaries in Python are mutable and the elements in a dictionary can be added, removed, modified, and changed accordingly. \n\nThe below code block is a complete representation of adding more elements to a dictionary or removing a particular element from the dictionary.\n\n    # Adding elements to a Dictionary\n    \n    my_dict = {1: 'A', 2: 'B'}\n    my_dict[3] = 'C'\n    print(my_dict)\n    \n    \n    # Removing elements in a Dictionary\n    \n    my_dict = {1: 'A', 2: 'B', 3: 'C'}\n    my_dict.pop(2)\n    print(my_dict)\n\n**Output:**\n\n```\n{1: 'A', 2: 'B', 3: 'C'}  \n{1: 'A', 3: 'C'}\n```\n\nThe procedure to add and remove elements or index the various elements of the dictionary data structure is quite simple. It can be easily completed and processed as shown in the above code lines.\n\n### Other Important Functions In Dictionaries\n\nThe dictionary data structure offers a wide variety of functions and methods. \n\nThe below code block can be used to gain access to all the available methods and attributes of the dictionary. There are so many essential aspects and functions of dictionaries. \n\nIn this lesson, we will only focus on a few of the main ones that are used frequently in the field of programming and data science.\n\n    # List of all available methods and attributes of dictionary\n    \n    my_dict = {}\n    print(dir(my_dict))\n\n**Output:**\n\n```\n['__class__', '__contains__', '__delattr__', '__delitem__',\n'__dir__', '__doc__', '__eq__', '__format__', '__ge__', \n'__getattribute__', '__getitem__', '__gt__', '__hash__', \n'__init__', '__init_subclass__', '__iter__', '__le__',\n'__len__', '__lt__', '__ne__', '__new__', '__reduce__', \n'__reduce_ex__', '__repr__', '__setattr__', '__setitem__', \n'__sizeof__', '__str__', '__subclasshook__', 'clear',\n'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', \n'popitem', 'setdefault', 'update', 'values']\n```\n\nThe above output shows the numerous methods and functions available in the dictionary data structure. \n\nSome of them are extremely useful and are of great importance in the field of Python programming and Data Science. Let us cover three of the most used functions in the dictionary data structure. \n\nThis representation can be seen from the code block below.\n\n    # Return a list of tuples of the dictionary items in the (key, value) form\n    my_dict = {1: 'A', 2: 'B', 3: 'C'}\n    print(my_dict.items()) \n    \n    # Return a new view of the dictionary keys\n    my_dict = {1: 'A', 2: 'B', 3: 'C'}\n    print(my_dict.keys()) \n    \n    # Return a new view of the dictionary values\n    my_dict = {1: 'A', 2: 'B', 3: 'C'}\n    print(my_dict.values()) \n\n**Output:**\n\n```\ndict_items([(1, 'A'), (2, 'B'), (3, 'C')])\ndict_keys([1, 2, 3])\ndict_values(['A', 'B', 'C']\n```\n\nWith the completion of some of the important aspects of the numerous function methods available in the dictionary data structure, let us proceed to the final topic of dictionary comprehensions.\n\n## Dictionary Comprehensions\n\nDictionary comprehensions provide a concise way to create dictionaries. The code block below is a representation of how dictionary comprehension is an elegant and concise way to create dictionaries.\n\n    # Creating a new dictionary with only pairs where the value is larger than 2\n    \n    d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    new_dict = {k:v for k, v in d.items() if v > 2}\n    print(new_dict)\n\nOne of the main uses of the dictionary data structure in machine learning is its compatibility with the panda’s module. \n\nThe dictionary data structure with its keys and their respective values can be converted into a pandas data frame, which can be used for machine learning or deep learning modeling.\n\nHence, the dictionary data structure finds multiple uses in the field of Data Science. \n\nNot only does it provide basic functionality for programming, but it also opens an option to create unique and outstanding Python and Data Science projects.\n\n## Summary\n\nPython is a versatile and simplistic programming language that provides high-level interactivity to its users. \n\nIt provides a list of options to use numerous Data Structures that can be used to perform a variety of tasks. \n\nThe usefulness of these data structures ranges from creating simple Python projects to complex machine learning and deep learning computations.\n\nIn this lesson, we discussed about three such Data Structures, namely, sets, frozen sets, and dictionaries, that find their use cases in the field of Python programming.\n"],"8":["Functions in Python","\n# Functions in Python\n\n![](https://miro.medium.com/v2/resize:fit:1400/0*Co9iVkTePHcvc7Dw)\n\nPython Functions is a block of statements that return the specific task.\n\nThe idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs.\n\nWe can say that, Functions helps us to write code which will be reusable and readable!\n\n## Function Declaration\n\n![Python Functions](https://media.geeksforgeeks.org/wp-content/uploads/20220721172423/51.png)\n\n### Types of Functions\n\nThere are mainly two types of functions in Python.\n\n- **Built-in library function:** These are Standard functions in Python that are available to use.\n- **User-defined function:** We can create our own functions based on our requirements.\n\n## Creating a Function\n\nWe can define a function in Python, using the **def** keyword. We can add any type of functionalities and properties to it as we require.\n\n    # A simple Python function\n\n    def fun():\n    print(\"Welcome to Zenith!\")\n\n### Calling a Python Function\n\nAfter creating a function in Python we can call it by using the name of the function followed by parenthesis containing parameters of that particular function.\n\n    # A simple Python function\n    def fun():\n        print(\"Welcome to Zenith!\")\n\n\n    # Driver code to call a function\n    fun()\n\n**Output:**\n\n```\nWelcome to Zenith!\n```\n\n### Python Function with Parameters\n\nIf you have experience in C/C++ or Java then you must be thinking about the return type of the function and data type of arguments. That is possible in Python as well (specifically for Python 3.5 and above).\n\n**Defining and calling a function with parameters**\n\n    def function_name(parameter: data_type) -> return_type:\n        \"\"\"Docstring\"\"\"\n        # body of the function\n        return expression\n\nThe following example uses arguments and parameters that you will learn later in this lesson so you can come back to it again if not understood.\n\n    def add(num1: int, num2: int) -> int:\n        \"\"\"Add two numbers\"\"\"\n        num3 = num1 + num2\n\n        return num3\n\n    # Driver code\n    num1, num2 = 5, 15\n    ans = add(num1, num2)\n    print(f\"The addition of {num1} and {num2} results {ans}.\")\n\n**Output:**\n\n```\nThe addition of 5 and 15 results 20.\n```\n\nThe following examples are defined using syntax 1, try to convert them in syntax 2 for practice.\n\n    # some more functions\n    def is_prime(n):\n        if n in [2, 3]:\n            return True\n        if (n == 1) or (n % 2 == 0):\n            return False\n        r = 3\n        while r * r <= n:\n            if n % r == 0:\n                return False\n            r += 2\n        return True\n    print(is_prime(78), is_prime(79))\n\n**Output:**\n\n```\nFalse True\n```\n\n## Function Arguments\n\nArguments are the values passed inside the parenthesis of the function. A function can have any number of arguments separated by a comma.\n\nIn this example, we will create a simple function in Python to check whether the number passed as an argument to the function is even or odd.\n\n    # A simple Python function to check\n    # whether x is even or odd\n    def evenOdd(x):\n        if (x % 2 == 0):\n            print(\"even\")\n        else:\n            print(\"odd\")\n\n\n    # Driver code to call the function\n    evenOdd(2)\n    evenOdd(3)\n\n**Output:**\n\n```\neven  \nodd\n```\n\n### Types of Python Function Arguments\n\nPython supports various types of arguments that can be passed at the time of the function call. In Python, we have the following 4 types of function arguments.\n\n- **Default argument**\n- **Keyword arguments (named arguments)**\n- **Positional arguments**\n- **Arbitrary arguments** (variable-length arguments *args and **kwargs)\n\nLet’s discuss each type in detail.\n\n### **Default Arguments**\n\nA default argument is a parameter that assumes a default value if a value is not provided in the function call for that argument. The following example illustrates Default arguments.\n\n    # Python program to demonstrate\n    # default arguments\n    def myFun(x, y=50):\n        print(\"x: \", x)\n        print(\"y: \", y)\n\n\n    # Driver code (We call myFun() with only\n    # argument)\n    myFun(10)\n\n**Output:**\n\n```\nx: 10  \ny: 50\n```\n\nLike C++ default arguments, any number of arguments in a function can have a default value.\n\nBut once we have a default argument, all the arguments to its right must also have default values.\n\n### **Keyword Arguments**\n\nThe idea is to allow the caller to specify the argument name with values so that the caller does not need to remember the order of parameters.\n\n    # Python program to demonstrate Keyword Arguments\n    def student(firstname, lastname):\n        print(firstname, lastname)\n\n\n    # Keyword arguments\n    student(firstname='Abdul', lastname='Khalid')\n    student(lastname='Siva', firstname='Prasath')\n\n**Output:**\n\n```\nAbdul Khalid\nSiva Prasath\n```\n\n### Positional Arguments\n\nWe used the Position argumentduring the function call so that the first argument (or value) is assigned to name and the second argument (or value) is assigned to age.\n\nBy changing the position, or if you forget the order of the positions, the values can be used in the wrong places, as shown in the Case-2 example below, where 27 is assigned to the name and Surya is assigned to the age.\n\n    def nameAge(name, age):\n        print(\"Hi, I am\", name)\n        print(\"My age is \", age)\n\n\n    # You will get correct output because\n    # argument is given in order\n    print(\"Case-1:\")\n    nameAge(\"Surya\", 27)\n    # You will get incorrect output because\n    # argument is not in order\n    print(\"\nCase-2:\")\n    nameAge(27, \"Surya\")\n\n**Output:**\n\n```\nCase-1:\nHi, I am Surya  \nMy age is 27\n```\n\n```\nCase-2:\nHi, I am 27  \nMy age is Surya\n```\n\n### Arbitrary Keyword Arguments\n\nIn Python Arbitrary Keyword Arguments, *args, and **kwargs can pass a variable number of arguments to a function using special symbols. There are two special symbols:\n\n- *args in Python (Non-Keyword Arguments)\n- **kwargs in Python (Keyword Arguments)\n\n**Example 1:** Variable length non-keywords argument\n\n    # Python program to illustrate\n    # *args for variable number of arguments\n    def myFun(*argv):\n        for arg in argv:\n            print(arg)\n\n\n    myFun('Hello', 'Welcome', 'to', 'Zenith')\n\n**Output:**\n\n```\nHello  \nWelcome  \nto  \nZenith\n```\n\n**Example 2:** Variable length keyword arguments\n\n    # Python program to illustrate\n    # *kwargs for variable number of keyword arguments\n\n\n    def myFun(**kwargs):\n        for key, value in kwargs.items():\n            print(\"%s == %s\" % (key, value))\n\n\n    # Driver code\n    myFun(first='Quick', mid='Brown', last='Fox')\n\n**Output:**\n\n```\nfirst == Quick  \nmid == Brown\nlast == Fox\n```\n\n### Docstring\n\nThe first string after the function is called the Document string or Docstring in short.\n\nThis is used to describe the functionality of the function. The use of docstring in functions is optional but it is considered a good practice.\n\nThe below syntax can be used to print out the docstring of a function:\n\n```\nprint(function_name.**doc**)\n```\n\n**Example:** Adding Docstring to the function\n\n    # A simple Python function to check\n    # whether x is even or odd\n\n\n    def evenOdd(x):\n        \"\"\"Function to check if the number is even or odd\"\"\"\n\n        if (x % 2 == 0):\n            print(\"even\")\n        else:\n            print(\"odd\")\n\n\n    # Driver code to call the function\n    print(evenOdd.__doc__)\n\n**Output:**\n\n```\nFunction to check if the number is even or odd\n```\n\n## Anonymous Functions in Python\n\nIn Python, an anonymous function means that a function is without a name.\n\nAs we already know the def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions.\n\n    # Python code to illustrate the cube of a number\n    # using lambda function\n    def cube(x): return x*x*x\n\n    cube_v2 = lambda x : x*x*x\n\n    print(cube(7))\n    print(cube_v2(7))\n\n**Output:**\n\n```\n343  \n343\n```\n\n## Recursive Functions in Python\n\n**Recursion** in Python refers to when a function calls itself.\n\nThere are many instances when you have to build a recursive function to solve **Mathematical and Recursive Problems.**\n\nUsing a recursive function should be done with caution, as a recursive function can become like a non-terminating loop.\n\nIt is better to check your exit statement while creating a recursive function.\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    print(factorial(4))\n\n**Output**\n\n```\n24\n```\n\nHere we have created a recursive function to calculate the factorial of the number.\n\nYou can see the end statement for this function is when n is equal to 0.\n\n## Return Statement in Python Function\n\nThe function return statement is used to exit from a function and go back to the function caller and return the specified value or data item to the caller.\n\nThe syntax for the return statement is:\n\n```\nreturn [expression_list]\n```\n\nThe return statement can consist of a variable, an expression, or a constant which is returned at the end of the function execution.\n\nIf none of the above is present with the return statement a None object is returned.\n\n**Example:** Python Function Return Statement\n\n    def square_value(num):\n        \"\"\"This function returns the square\n        value of the entered number\"\"\"\n        return num**2\n\n\n    print(square_value(2))\n    print(square_value(-4))\n\n**Output:**\n\n```\n4\n16\n```\n\n### Pass by Reference and Pass by Value\n\nOne important thing to note is, in Python every variable name is a reference.\n\nWhen we pass a variable to a function, a new reference to the object is created. Parameter passing in Python is the same as reference passing in Java.\n\n    # Here x is a new reference to same list lst\n    def myFun(x):\n        x[0] = 20\n\n\n    # Driver Code (Note that lst is modified)\n    # after function call.\n    lst = [10, 11, 12, 13, 14, 15]\n    myFun(lst)\n    print(lst)\n\n**Output:**\n\n```\n[20, 11, 12, 13, 14, 15]\n```\n"],"9":["File Handling","\n# File Handling in Python\n\n![](https://i.pcmag.com/imagery/articles/07j4drmpStcjSFR40VAjuKb-3..v1595527254.jpg)\n\nIn this lesson, you will learn how to open a file, write to the file, and close it. You will also learn how to read from the file using Python.\n\nBy the end of this lesson, you should know the basics of how to use files in Python.\n\nFile handling is an important activity. The types of activities that you can perform on the opened file are controlled by Access Modes. \n\n## File Accessing Modes\n\nFile accessing modes describe how the file will be used after it has been opened.\n\nThese modes also specify where the file handle should be located within the file. Similar to a pointer, a file handle indicates where data should be read or put into the file.\n\nIn Python, there are six methods or access modes, which are:\n\n1. **Read Only ('r’):** This mode opens the text files for reading only. The start of the file is where the handle is located. It raises the I/O error if the file does not exist. This is the default mode for opening files as well.\n2. **Read and Write ('r+’):** This method opens the file for both reading and writing. The start of the file is where the handle is located. If the file does not exist, an I/O error gets raised.\n3. **Write Only ('w’):** This mode opens the file for writing only. The data in existing files are modified and overwritten. The start of the file is where the handle is located. If the file does not already exist in the folder, a new one gets created.\n4. **Write and Read ('w+’)**: This mode opens the file for both reading and writing. The text is overwritten and deleted from an existing file. The start of the file is where the handle is located.\n5. **Append Only ('a’)**: This mode allows the file to be opened for writing. If the file doesn't yet exist, a new one gets created. The handle is set at the end of the file. The newly written data will be added at the end, following the previously written data.\n6. **Append and Read (‘a+’):** Using this method, you can read and write in the file. If the file doesn't already exist, one gets created. The handle is set at the end of the file. The newly written text will be added at the end, following the previously written data.\n\nBelow is the code required to create, write to, and read text files using the Python file handling methods or access modes.\n\n## How to Create Files in Python\n\nIn Python, you use the `open()` function with one of the following options – \"x\" or \"w\" – to create a new file:\n\n* **\"x\" – Create**: this command will create a new file if and only if there is no file already in existence with that name or else it will return an error.\n\nExample of creating a file in Python using the \"x\" command:\n\n    #creating a text file with the command function \"x\"\n    \n    f = open(\"myfile.txt\", \"x\")\n\nWe've now created a new empty text file! But if you retry the code above – for example, if you try to create a new file with the same name as you used above (if you want to reuse the filename above) you will get an error notifying you that the file already exists, like the below one:\n\n```\nTraceback (most recent call last):\nFile \"C:Users\u0000xabdulkhalidDesktoppy\readfile.py\", line 27, in <module>\n    f = open(\"myfile.txt\", \"x\")\nFileExistsError: [Errno 17] File exists: ‘myfile.txt'\n```\n\n* **\"w\" – Write**: this command will create a new text file whether or not there is a file in the memory with the new specified name. It does not return an error if it finds an existing file with the same name – instead it will overwrite the existing file.\n\nExample of how to create a file with the \"w\" command:\n\n    #creating a text file with the command function \"w\"\n    \n    f = open(\"myfile.txt\", \"w\")\n\nWith the code above, whether the file exists or the file doesn't exist in the memory, you can still go ahead and use that code. \n\nThis \"w\" command can also be used create a new file but unlike the the \"x\" command the \"w\" command will overwrite any existing file found with the same file name.\n\nJust keep in mind that it will overwrite the file if it finds an existing file with the same name.\n\n## How to Write to a File in Python\n\nThere are two methods of writing to a file in Python, which are:\n\n### The `write()` method:\n\nThis function inserts the string into the text file on a single line.\n\nBased on the file we have created above, the below line of code will insert the string into the created text file, which is \"myfile.txt.”\n\n```\nfile.write(\"Hello There\n\")\n```\n\n### The `writelines()` method:\n\nThis function inserts multiple strings at the same time. A list of string elements is created, and each string is then added to the text file.\n\nUsing the previously created file above, the below line of code will insert the string into the created text file, which is \"myfile.txt.”\n\n```\nf.writelines([\"Hello World \", \"You are welcome to Zenith\n\"])\n```\n\nExample:\n\n    #This program shows how to write data in a text file.\n    \n    file = open(\"myfile.txt\",\"w\")\n    L = [\"Salaam Alaikum \n\", \"This is 0xabdulkhalid \n\",\"From Zenith \n\"]\n    \n    # i assigned [\"Salaam Alaikum \n\", \"This is 0xabdulkhalid \n\",\"From Zenith \n\"] to #variable L, you can use any letter or word of your choice.\n    # Variable are containers in which values can be stored.\n    # The \n is placed to indicate the end of the line.\n    \n    file.write(\"Hello There \n\")\n    file.writelines(L)\n    file.close()\n    \n    # Use the close() to change file access modes\n\n## How to Read From a Text File in Python\n\nThere are three methods of reading data from a text file in Python. They are:\n\n### The `read()` method:\n\nThis function returns the bytes read as a string. If no n is specified, it then reads the entire file.\n\nExample:\n\n    f = open(\"myfiles.txt\", \"r\")\n    #('r’) opens the text files for reading only\n    print(f.read())\n    #The \"f.read\" prints out the data in the text file in the shell when run.\n\n### The `readline()` method:\n\nThis function reads a line from a file and returns it as a string. It reads at most n bytes for the specified n. But even if n is greater than the length of the line, it does not read more than one line.\n\n    f = open(\"myfiles.txt\", \"r\")\n    print(f.readline())\n    \n\n### The `readlines()` method:\n\nThis function reads all of the lines and returns them as string elements in a list, one for each line.\n\nYou can read the first two lines by calling `readline()` twice, reading the first two lines of the file:\n\n    f = open(\"myfiles.txt\", \"r\")\n    print(f.readline())\n    print(f.readline())\n    \n\n## How to Close a Text File in Python\n\nIt is good practice to always close the file when you are done with it.\n\n### Example of closing a text file:\n\nThis function closes the text file when you are done modifying it:\n\n    f = open(\"myfiles.txt\", \"r\")\n    print(f.readline())\n    f.close()\n\nThe close() function at the end of the code tells Python that well, I am done with this section of either creating or reading – it is just like saying End.\n\n### Example:\n\nThe program below shows more examples of ways to read and write data in a text file. Each line of code has comments to help you understand what's going on:\n\n    # Program to show various ways to read and\n    # write data in a text file.\n    \n    file = open(\"myfile.txt\",\"w\")\n    L = [\"Salaam Alaikum \n\", \"This is 0xabdulkhalid \n\",\"From Zenith \n\"]\n    \n    #i assigned [\"Salaam Alaikum \n\", \"This is 0xabdulkhalid \n\", \"From Zenith \n\"]\n    #to variable L\n    \n    #The \n is placed to indicate End of Line\n    \n    file.write(\"Hello There \n\")\n    file.writelines(L)\n    file.close()\n    # use the close() to change file access modes\n    \n    file = open(\"myfile.txt\",\"r+\") \n    print(\"Output of the Read function is \")\n    print(file.read())\n    print()\n    \n    # The seek(n) takes the file handle to the nth\n    # byte from the start.\n    file.seek(0) \n    \n    print( \"The output of the Readline function is \")\n    print(file.readline()) \n    print()\n    \n    file.seek(0)\n    \n    # To show difference between read and readline\n    \n    print(\"Output of Read(12) function is \") \n    print(file.read(12))\n    print()\n    \n    file.seek(0)\n    \n    print(\"Output of Readline(8) function is \") \n    print(file.readline(8))\n    \n    file.seek(0)\n    # readlines function\n    print(\"Output of Readlines function is \") \n    print(file.readlines()) \n    print()\n    file.close()\n\nThis is the output of the above code when run in the shell. I assigned \"Salaam Alaikum\",  \"This is 0xabdulkhalid\", and \"This is Zenith\" to \"L\" and then asked it to print using the ''file.read''  function.\n\nThe code above shows that the \"readline()\" function is returning the letter based on the number specified to it, while the \"readlines()\" function is returning every string assigned to \"L\" including the `\n`. \n\nThat is, the \"readlines()\" function will print out all data in the file.\n\n```\nOutput of the Read function is\nHello There\nSalaam Alaikum\nThis is 0xabdulkhalid\nThis is Zenith\n\nThe output of the Readline function is\nHello There\n\nOutput of Read(12) function is\nHello There\n\nOutput of Readline(8) function is\n\nHello Th\nOutput of Readlines function is\n['Hello There \n', 'Salaam Alaikum \n', 'This is 0xabdulkhalid \n', 'From Zenith \n']\n```\n\nHopefully, after going through this lesson, you should understand what file handling is in Python. \n\nWe also learned the modes/methods required to create, write, read, and close() a text file using some basic examples from Python.\n"],"10":["Introduction to Object-Oriented Programming (OOP)","\n# Introduction to Object-Oriented Programming (OOP)\n\n![](https://miro.medium.com/v2/resize:fit:1050/1*PoQAqKyCfCajVmKnlgRNiA.jpeg)\n\nPython is a fantastic programming language that allows you to use both functional and object-oriented programming paradigms.\n\nPython programmers should be able to use fundamental object-oriented programming concepts, whether they are software developers, machine learning engineers, or something else.\n\nAll four core aspects of a generic OOP framework are supported by Python's object-oriented programming system: encapsulation, abstraction, inheritance, and polymorphism.\n\nIn this lesson, we'll take a quick look at these features and get some practice with them.\n\n## What are Classes and Objects?\n\nPython, like every other object-oriented language, allows you to define classes to create objects. In-built Python classes are the most common data types in Python, such as strings, lists, dictionaries, and so on.\n\nA class is a collection of instance variables and related methods that define a particular object type. \n\nYou can think of a class as an object's **blueprint or template**. Attributes are the names given to the variables that make up a class.\n\n![](https://p4.wallpaperbetter.com/wallpaper/755/124/912/home-plan-sketch-pencil-wallpaper-preview.jpg)\n\nA class instance with a defined set of properties is called an object. As a result, the same class can be used to construct as many objects as needed.\n\nLet’s define a class named _Book_ for a bookseller’s sales software.\n\n    class Book:\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.price = price\n    \n\nThe `__init__` special method, also known as a **Constructor**, is used to initialize the Book class with attributes such as title, quantity, author, and price.\n\nIn Python, built-in classes are named in lower case, but user-defined classes are named in Camel or Snake case, with the first letter capitalized.\n\nThis class can be instantiated to any number of objects. Three books are instantiated in the following example code:\n\n    book1 = Book('Book 1', 12, 'Author 1', 120)\n    book2 = Book('Book 2', 18, 'Author 2', 220)\n    book3 = Book('Book 3', 28, 'Author 3', 320)\n\nbook1, book2 and book3 are distinct objects of the class _Book_. The term **self** in the attributes refers to the corresponding instances (objects).\n\n    print(book1)\n    print(book2)\n    print(book3)\n\nOutput:\n\n```\n<__main__.Book object at 0x00000156EE59A9D0>\n<__main__.Book object at 0x00000156EE59A8B0>\n<__main__.Book object at 0x00000156EE59ADF0>\n```\n\nThe class and memory location of the objects are printed when they are printed. We can't expect them to provide specific information on the qualities, such as the title, author name, and so on. But we can use a specific method called `__repr__` to do this.\n\nIn Python, a special method is a defined function that starts and ends with two underscores and is invoked automatically when certain conditions are met.\n\n    class Book:\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.price = price\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.price}\"\n    \n    \n    book1 = Book('Book 1', 12, 'Author 1', 120)\n    book2 = Book('Book 2', 18, 'Author 2', 220)\n    book3 = Book('Book 3', 28, 'Author 3', 320)\n    \n    print(book1)\n    print(book2)\n    print(book3)\n    \n\nOutput:\n\n```\nBook: Book 1, Quantity: 12, Author: Author 1, Price: 120\nBook: Book 2, Quantity: 18, Author: Author 2, Price: 220\nBook: Book 3, Quantity: 28, Author: Author 3, Price: 320\n```\n\n## What is Encapsulation?\n\nEncapsulation is the process of preventing clients from accessing certain properties, which can only be accessed through specific methods.\n\n![](https://logicmojo.com/assets/dist/new_pages/images/encapsulation-image.jpg)\n\nPrivate attributes are inaccessible attributes, and information hiding is the process of making particular attributes private. \n\nYou use two underscores to declare private characteristics.\n\nLet's introduce a private attribute called `__discount` in the `Book` class.\n\n    class Book:\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.price = price\n            self.__discount = 0.10\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.price}\"\n    \n    \n    book1 = Book('Book 1', 12, 'Author 1', 120)\n    \n    print(book1.title)\n    print(book1.quantity)\n    print(book1.author)\n    print(book1.price)\n    print(book1.__discount)\n\nOutput:\n\n```\nBook 1\n12\nAuthor 1\n120\nTraceback (most recent call last):\nFile \"C:Users\u0000xabdulkhalidDesktoppy\test.py\", line 19, in <module>\n    print(book1.__discount)\nAttributeError: 'Book' object has no attribute '__discount'\n```\n\nWe can see that all the attributes are printed except the private attribute `__discount`. You use getter and setter methods to access private attributes.\n\nWe make the price property private in the following code example, and we use a setter method to assign the discount attribute and a getter function to get the price attribute.\n\n    class Book:\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.__price = price\n            self.__discount = None\n    \n        def set_discount(self, discount):\n            self.__discount = discount\n    \n        def get_price(self):\n            if self.__discount:\n                return self.__price * (1-self.__discount)\n            return self.__price\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n\nThis time we'll create two objects, one for the purchase of single book and another for the purchase of books in bulk quantity. \n\nWhile purchasing books in bulk quantity, we get a discount of 20%, so we'll use the `set_discount()` method to set the discount to 20% in that case.\n\n    single_book = Book('Two States', 1, 'Chetan Bhagat', 200)\n    \n    bulk_books = Book('Two States', 25, 'Chetan Bhagat', 200)\n    bulk_books.set_discount(0.20)\n    \n    print(single_book.get_price())\n    print(bulk_books.get_price())\n    print(single_book)\n    print(bulk_books)\n\nOutput:\n\n```\n200\n160.0\nBook: Two States, Quantity: 1, Author: Chetan Bhagat, Price: 200\nBook: Two States, Quantity: 25, Author: Chetan Bhagat, Price: 160.0\n```\n\n## What is Inheritance?\n\nInheritance is regarded as the most significant characteristics of OOP. A class's ability to inherit methods and/or characteristics from another class is known as inheritance.\n\n![](https://codestall.files.wordpress.com/2017/09/inheritance.png)\n\nThe subclass or child class is the class that inherits. The superclass or parent class is the class from which methods and/or attributes are inherited.\n\nTwo new classes have been added to our bookseller's sales software: a _Novel_ class and _Academic_ class.\n\nWe can see that regardless of whether a book is classified as novel or academic, it may have some similar attributes like title and author, as well as common methods like `get_price()` and `set_discount()`. Rewriting all that code for each new class is a waste of time, effort, and memory.\n\n    class Book:\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.__price = price\n            self.__discount = None\n    \n        def set_discount(self, discount):\n            self.__discount = discount\n    \n        def get_price(self):\n            if self.__discount:\n                return self.__price * (1-self.__discount)\n            return self.__price\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n    \n    \n    class Novel(Book):\n        def __init__(self, title, quantity, author, price, pages):\n            super().__init__(title, quantity, author, price)\n            self.pages = pages\n    \n    \n    class Academic(Book):\n        def __init__(self, title, quantity, author, price, branch):\n            super().__init__(title, quantity, author, price)\n            self.branch = branch\n\nLet's create objects for these classes to visualize them.\n\n    novel1 = Novel('Two States', 20, 'Chetan Bhagat', 200, 187)\n    novel1.set_discount(0.20)\n    \n    academic1 = Academic('Python Foundations', 12, 'PSF', 655, 'IT')\n    \n    print(novel1)\n    print(academic1)\n\nOutput:\n\n```\nBook: Two States, Quantity: 20, Author: Chetan Bhagat, Price: 160.0\nBook: Python Foundations, Quantity: 12, Author: PSF, Price: 655\n```\n\n## What is Polymorphism?\n\nThe term '**polymorphism**' comes from the Greek language and means '_something that takes on multiple forms._'\n\n![](https://i.ibb.co/p103pmn/socket-metaphor.webp)\n\nPolymorphism refers to a subclass's ability to adapt a method that already exists in its superclass to meet its needs. To put it another way, a subclass can use a method from its superclass as is or modify it as needed.\n\n    class Academic(Book):\n        def __init__(self, title, quantity, author, price, branch):\n            super().__init__(title, quantity, author, price)\n            self.branch = branch\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Branch: {self.branch}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n\nThe _Book_ superclass has a specific method called `__repr__`. This method can be used by subclass Novel so that it is called whenever an object is printed.\n\nThe _Academic_ subclass, on the other hand, is defined with its own `__repr__` special function in the example code above. \n\nThe _Academic_ subclass will invoke its own method by suppressing the same method present in its superclass, thanks to polymorphism.\n\n    novel1 = Novel('Two States', 20, 'Chetan Bhagat', 200, 187)\n    novel1.set_discount(0.20)\n    \n    academic1 = Academic('Python Foundations', 12, 'PSF', 655, 'IT')\n    \n    print(novel1)\n    print(academic1)\n\nOutput:\n\n```\nBook: Two States, Quantity: 20, Author: Chetan Bhagat, Price: 160.0\nBook: Python Foundations, Branch: IT, Quantity: 12, Author: PSF, Price: 655\n```\n\n## What is Abstraction?\n\nAbstraction isn't supported directly in Python. Calling a magic method, on the other hand, allows for abstraction.\n\nIf an abstract method is declared in a superclass, subclasses that inherit from the superclass must have their own implementation of the method.\n\nA superclass's abstract method will never be called by its subclasses. But the abstraction aids in the maintenance of a similar structure across all subclasses.\n\nIn our parent class _Book_, we have defined the `__repr__` method. Let's make that method abstract, forcing every subclass to compulsorily have its own `__repr__` method.\n\n    from abc import ABC, abstractmethod\n    \n    \n    class Book(ABC):\n        def __init__(self, title, quantity, author, price):\n            self.title = title\n            self.quantity = quantity\n            self.author = author\n            self.__price = price\n            self.__discount = None\n    \n        def set_discount(self, discount):\n            self.__discount = discount\n    \n        def get_price(self):\n            if self.__discount:\n                return self.__price * (1-self.__discount)\n            return self.__price\n    \n        @abstractmethod\n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n    \n    \n    class Novel(Book):\n        def __init__(self, title, quantity, author, price, pages):\n            super().__init__(title, quantity, author, price)\n            self.pages = pages\n    \n    \n    class Academic(Book):\n        def __init__(self, title, quantity, author, price, branch):\n            super().__init__(title, quantity, author, price)\n            self.branch = branch\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Branch: {self.branch}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n    \n    \n    novel1 = Novel('Two States', 20, 'Chetan Bhagat', 200, 187)\n    novel1.set_discount(0.20)\n    \n    academic1 = Academic('Python Foundations', 12, 'PSF', 655, 'IT')\n    \n    print(novel1)\n    print(academic1)\n\nIn the above code, we have inherited the _ABC_ class to create the _Book_ class. We've made the `__repr__` method abstract by adding the `@abstractmethod` decorator.\n\nWhile creating the Novel class, we intentionally missed the implementation of the `__repr__` method to see what happens.\n\nOutput:\n\n```\nTraceback (most recent call last):\nFile \"C:Users\u0000xabdulkhalidDesktoppy\test.py\", line 40, in <module>\n    novel1 = Novel('Two States', 20, 'Chetan Bhagat', 200, 187)\nTypeError: Can't instantiate abstract class Novel with abstract method __repr__\n```\n\nWe get a **TypeError** saying we cannot instantiate object of the Novel class. Let's add the implementation of the `__repr__` method and see what happens now.\n\n    class Novel(Book):\n        def __init__(self, title, quantity, author, price, pages):\n            super().__init__(title, quantity, author, price)\n            self.pages = pages\n    \n        def __repr__(self):\n            return f\"Book: {self.title}, Quantity: {self.quantity}, Author: {self.author}, Price: {self.get_price()}\"\n\nOutput:\n\n```\nBook: Two States, Quantity: 20, Author: Chetan Bhagat, Price: 160.0\nBook: Python Foundations, Branch: IT, Quantity: 12, Author: PSF, Price: 655\n```\n\nNow it works fine.\n\n## Method Overloading\n\nThe concept of method overloading is found in almost every well-known programming language that follows object-oriented programming concepts. \nIt simply refers to the use of many methods with the same name that take various numbers of arguments within a single class.\n\nLet's now understand method overloading with the help of the following code:\n\n    class OverloadingDemo:\n        def add(self, x, y):\n            print(x+y)\n    \n        def add(self, x, y, z):\n            print(x+y+z)\n    \n    \n    obj = OverloadingDemo()\n    obj.add(2, 3)\n    \n\nOutput:\n\n```\nTraceback (most recent call last):\nFile \"C:Users\u0000xabdulkhalidDesktoppysetup.py\", line 10, in <module>\n    obj.add(2, 3)\nTypeError: add() missing 1 required positional argument: 'z'\n```\n\nYou're probably wondering why this happened. As a result, the error is displayed because Python only remembers the most recent definition of add(self, x, y, z), which takes three parameters in addition to self. \n\nAs a result, three arguments must be passed to the `add()` method when it is called. To put it another way, it disregards the prior definition of add().\n\nThus, Python **doesn't support** Method Overloading by default.\n\nWhen a method with the same name and arguments is used in both a derived class and a base or super class, we say that the derived class method \"overrides\" the method provided in the base class.\n\nWhen the overridden method gets called, the derived class's method is always invoked. The method that was used in the base class is now hidden.\n\n    class ParentClass:\n        def call_me(self):\n            print(\"I am parent class\")\n    \n    \n    class ChildClass(ParentClass):\n        def call_me(self):\n            print(\"I am child class\")\n    \n    pobj = ParentClass()\n    pobj.call_me()\n    \n    cobj = ChildClass()\n    cobj.call_me()\n\nOutput:\n\n```\nI am parent class\nI am child class\n```\n\nIn the above code, when the `call_me()` method was called on the child object, the `call_me()` from the child class was invoked. \n\nWe can invoke the parent class's `call_me()` method from the child class using `super()`, like this:\n\n    class ParentClass:\n        def call_me(self):\n            print(\"I am parent class\")\n    \n    \n    class ChildClass(ParentClass):\n        def call_me(self):\n            print(\"I am child class\")\n            super().call_me()\n    \n    pobj = ParentClass()\n    pobj.call_me()\n    \n    cobj = ChildClass()\n    cobj.call_me()\n\nOutput:\n\n```\nI am parent class\nI am child class\nI am parent class\n```\n"]},"JavaScript":{"1":["Introduction to JavaScript","# Introduction to JavaScript\n\n![](https://i.ibb.co/mB8gnNp/introduction.png)\n\nJavaScript is a lightweight, cross-platform, single-threaded, and interpreted compiled programming language. \n\nIt is also known as the scripting language for webpages. It is well-known for the development of web pages, and many non-browser environments also use it.\n\nJavaScript is a dynamically typed language. It can be used for Client-side developments as well as Server-side developments. \n\nJavaScript is both an imperative and declarative type of language. JavaScript contains a standard library of objects, like Array, Date, and Math, and a core set of language elements like operators, control structures, and statements.\n\n###  Key Features of JavaScript\n\n* **Client-side:** It supplies objects to control a browser and its Document Object Model (DOM). Like if client-side extensions allow an application to place elements on an HTML form and respond to user events such as **mouse clicks**, **form input**, and **page navigation**. Useful libraries for the client side are **AngularJS**, **ReactJS**, **VueJS,** and so many others.\n* **Server-side:** It supplies objects relevant to running JavaScript on a server. For if the server-side extensions allow an application to communicate with a database, and provide continuity of information from one invocation to another of the application, or perform file manipulations on a server. The useful framework which is the most famous these days is **node.js**.\n* **Imperative language:** In this type of language we are mostly concerned about how it is to be done. It simply controls the flow of computation. The procedural programming approach, object, oriented approach comes under this as async await we are thinking about what is to be done further after the async call.\n* **Declarative programming:** In this type of language we are concerned about how it is to be done, basically here logical computation requires. Her main goal is to describe the desired result without direct dictation on how to get it as the arrow function does.\n\n### How to Link JavaScript File in HTML ?\n\nJavaScript can be added to HTML file in two ways:\n\n* **Internal JS:** We can add JavaScript directly to our HTML file by writing the code inside the `<script>` tag. The `<script>` tag can either be placed inside the `<head>` or the `<body>` tag according to the requirement.\n*  **External JS:** We can write JavaScript code in another files having an extension.js and then link this file inside the <head> tag of the HTML file in which we want to add this code.\n\n**Syntax:**\n\n```xml\n<script>  \n    // JavaScript Code  \n</script> \n``` \n\n**Example:**\n\n```xml\n<!DOCTYPE html> \n<html lang=\"en\">\n    <head>\n      <title> \n          Basic Example to Describe JavaScript \n      </title>\n    </head>\n    <body>\n      <!-- JavaScript code can be embedded inside \n          head section or body section -->\n      <script> \n          console.log(\"Welcome to Zenith\"); \n      </script> \n    </body>\n</html>\n```\n\n**Output:** \n\n###### Output will be displayed on the console.\n\n```\nWelcome to Zenith\n```  \n\n## History of JavaScript\n\nIt was created in 1995 by Brendan Eich while he was an engineer at Netscape. \n\nIt was originally going to be named LiveScript but was renamed. Unlike most programming languages, JavaScript language has no concept of input or output. \n\nIt is designed to run as a scripting language in a host environment, and it is up to the host environment to provide mechanisms for communicating with the outside world. \n\nThe most common host environment is the browser.\n\n## Why JS is so popular ?\n\nAccording to a recent survey conducted by **Stack Overflow**, JavaScript is the most popular language on earth.\n\nWith advances in browser technology and JavaScript having moved into the server with Node.js and other frameworks, JavaScript is capable of so much more. \n\nHere are a few things that we can do with JavaScript:\n\n* JavaScript was created in the first place for DOM manipulation. Earlier websites were mostly static, after JS was created dynamic Web sites were made.\n* Functions in JS are objects. They may have properties and methods just like other objects. They can be passed as arguments in other functions.\n* Can handle date and time.\n* Performs Form Validation although the forms are created using HTML.\n* No compiler is needed.\n\n## Applications of JavaScript\n\n* **Web Development:** Adding interactivity and behavior to static sites JavaScript was invented to do this in 1995. By using AngularJS that can be achieved so easily.\n* **Web Applications:** With technology, browsers have improved to the extent that a language was required to create robust web applications. When we explore a map in Google Maps then we only need to click and drag the mouse. All detailed view is just a click away, and this is possible only because of JavaScript. It uses Application Programming Interfaces(APIs) that provide extra power to the code. The Electron and React are helpful in this department.\n* **Server Applications:** With the help of Node.js, JavaScript made its way from client to server and Node.js is the most powerful on the server side.\n* **Games:** Not only in websites, but JavaScript also helps in creating games for leisure. The combination of JavaScript and HTML 5 makes JavaScript popular in game development as well. It provides the EaseJS library which provides solutions for working with rich graphics.\n* **Smartwatches:** JavaScript is being used in all possible devices and applications. It provides a library PebbleJS which is used in smartwatch applications. This framework works for applications that require the Internet for their functioning.\n* **Art:** Artists and designers can create whatever they want using JavaScript to draw on HTML 5 canvas, and make the sound more effective also can be used **p5.js** library.\n* **Machine Learning:** This JavaScript ml5.js library can be used in web development by using machine learning.\n* **Mobile Applications:** JavaScript can also be used to build an application for non-web contexts. The features and uses of JavaScript make it a powerful tool for creating mobile applications. This is a Framework for building web and mobile apps using JavaScript. Using React Native, we can build mobile applications for different operating systems. We do not require to write code for different systems. Write once use it anywhere!\n\n## Limitations of JavaScript\n\n* **Security risks:** JavaScript can be used to fetch data using AJAX or by manipulating tags that load data such as `<img>`, `<object>`, `<script>`. These attacks are called cross-site script attacks. They inject JS that is not part of the site into the visitor’s browser thus fetching the details.\n* **Performance:** JavaScript does not provide the same level of performance as offered by many traditional languages as a complex program written in JavaScript would be comparatively slow. But as JavaScript is used to perform simple tasks in a browser, so performance is not considered a big restriction in its use.\n* **Complexity:** To master a scripting language, programmers must have a thorough knowledge of all the programming concepts, core language objects, and client and server-side objects otherwise it would be difficult for them to write advanced scripts using JavaScript.\n* **Type checking facilities:** It is a dynamically typed language as there is no need to specify the data type of the variable. So wrong type checking is not performed by compile.\n\n### Why JavaScript is known as a lightweight programming language ?\n\nJavaScript is considered lightweight due to the fact that it has low CPU usage, is easy to implement, and has a minimalist syntax. Minimalist syntax as in, has no data types. \n\nEverything is treated here as an object. It is very easy to learn because of its syntax similar to C++ and Java.\n\nA lightweight language does not consume much of your CPU’s resources. It doesn’t put excess strain on your CPU or RAM. \n\nJavaScript runs in the browser even though it has complex paradigms and logic which means it uses fewer resources than other languages. \n\nFor example, NodeJs, a variation of JavaScript not only performs faster computations but also uses fewer resources than its counterparts such as Dart or Java.\n\nAdditionally, when compared with other programming languages, it has fewer in-built libraries or frameworks, contributing as another reason for it being lightweight. \n\nHowever, this brings a drawback in that we need to incorporate external libraries and frameworks.\n\n### Is JavaScript Compiled or Interpreted or both ?\n\nJavaScript is both compiled and interpreted. In the earlier versions of JavaScript, it used only the interpreter that executed code line by line and shows the result immediately. \n\nBut with time the performance became an issue as interpretation is quite slow. \n\nTherefore, in the newer versions of JS, probably after the V8, the JIT compiler was also incorporated to optimize the execution and display the result more quickly. \n\n![](https://i.stack.imgur.com/Qym1Q.jpg)\n\nThis JIT compiler generates a bytecode that is relatively easier to code. This bytecode is a set of highly optimized instructions.\n\nThe V8 engine initially uses an interpreter, to interpret the code. On further executions, the V8 engine finds patterns such as frequently executed functions, and frequently used variables, and compiles them to improve performance.\n\nJavaScript is best known for web page development but it is also used in a variety of non-browser environments."],"2":["Setting Up the Development Environment","\n# Setting Up Development Environment\n\n![](https://i.ibb.co/2jk1G24/environment.jpg)\n\nBefore diving into JavaScript development, it's essential to set up a proper development environment. \n\nThis typically involves installing a code editor (e.g., Visual Studio Code), understanding the browser's developer tools, and learning how to create and run a simple HTML5 file with embedded JavaScript code.\n\n## Code Editor Installation\n\nChoose a code editor suitable for JavaScript development. Visual Studio Code is a popular choice due to its lightweight nature and robust features. \n\n![](https://code.visualstudio.com/opengraphimg/opengraph-home.png)\n\nDownload and install the code editor from Visual Studio Code.\n\n## Browser Developer Tools\n\nAll the popular web browsers have built-in JavaScript engines. Hence, you can run JavaScript on a browser. To run JavaScript on a browser,\n\nOpen your favorite browser (here we will use Google Chrome).\n\n![](https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/opening_developer_tool.png)\n\nOpen the developer tools by right clicking on an empty area and select Inspect. **Shortcut:** `F12`.\n    \n![](https://www.programiz.com/sites/tutorial2program/files/inspect-browser.png)\n\nShortcut to open Developer Console,\n\n**Mac**\n\n```\nCommand+Option+J\n```\n\n**Windows/Linux**\n\n```\nCtl+Shift+J\n```\n    \nOn the developer tools, go to the console tab. Then, write JavaScript code and press enter to run the code.\n    \n![](https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/opening_chrome_console_shortcut.png)\n    \n###### Console tab in Browser\n\nAfter you open the Google Chrome console, try to explore the marked buttons. \n\nWe will spend most of the time on the Console. The Console is the place where your JavaScript code goes. \n\nThe Google Console V8 engine changes your JavaScript code to machine code. \n\nLet us write a JavaScript code on the Google Chrome console\n\n![](https://raw.githubusercontent.com/Asabeneh/30-Days-Of-JavaScript/master/images/js_code_on_chrome_console.png)\n\nTo write our first JavaScript code, we used a built-in function `console.log()`. \n\nWe passed an argument as input data, and the function displays the output. \n\nWe passed 'Hello, World' as input data or argument in the console.log() function.\n\n### Creating a Simple HTML5 File\n\nStart by creating a basic HTML5 file that includes a `<script>` tag for embedding JavaScript code. \n\nUnderstand the placement of the `<script>` tag within the HTML5 document and how it interacts with the DOM.\n\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n\n    <h1>Hello, JavaScript!</h1>\n\n    <script>\n        // Your JavaScript code goes here\n        console.log(\"Hello World from JavaScript!\");\n    </script>\n\n</body>\n</html>\n```\n\nThis simple HTML5 file demonstrates the integration of JavaScript within a web page.    \n\n\nOpen the `xml` file using a browser and check if our JS code ran or not, **Right click on the web page > Inspect** > **Choose console tab**."],"3":["Variables and Data Types","\n# Variables and Data Types\n\n![](https://i.ibb.co/tZLVrJP/8f48.png)\n\nIn JavaScript, variables are containers for storing data values. They allow for dynamic manipulation and storage of information within a program. \n\nData types in JavaScript include primitives like strings, numbers, booleans, and symbols, as well as complex types like objects and functions. \n\nUnderstanding variables and data types is fundamental for storing, retrieving, and processing information in JavaScript programs, enabling developers to create dynamic and interactive web applications efficiently.\n\n## Data Types\n\nJavaScript supports various data types, which are crucial for storing and manipulating information in a program. The main data types in JavaScript include:\n\n### 1. Primitive Data Types:\n- String: Represents textual data. Enclosed in single (`'`) or double (`\"`) quotes.\n  Example: 'Hello, World!'\n\n- Number: Represents numeric data. Can be integers or floating-point numbers.\n  Example: 42, 3.14\n\n- Boolean: Represents a logical value, either `true` or `false`.\n  Example: true\n\n- Null: Represents the absence of a value or a placeholder.\n  Example: null\n\n- Undefined: Represents an uninitialized variable or an object property.\n  Example: undefined\n\n### 2. Object Data Type:\n- Object: Represents a collection of key-value pairs. Objects can store various data types and functions.\n  Example:\n\n    const person = {\n      name: 'John',\n      age: 30,\n      isStudent: false\n    };\n\n\n### 3. Composite Data Types:\n- Array: Represents an ordered list of values.\n  Example:\n\n      const numbers = [1, 2, 3, 4, 5];\n\n- Function: Represents a reusable block of code. Functions can be assigned to variables, passed as arguments, and returned from other functions.\n  Example:\n  \n      function add(a, b) {\n        return a + b;\n      }\n\n## Variables and Constants\n\nIn JavaScript, variables are used to store and manage data, while constants are used for values that should not be reassigned. Here's how to declare them:\n\n### Variables:\n- Declaration with `var`, `let`, and `const`:\n  - `var` (older way, with function-scoped variables)\n  - `let` (block-scoped variables, can be reassigned)\n  - `const` (block-scoped constants, cannot be reassigned)\n\n### var\n- Variables declared with `var` can have a global or local scope. Global scope is for variables declared outside functions.\n\n    var number = 50; \n    // Declaring a global scoped variable 'number' and assigning the value 50\n\n### let\n- Introduces block-scoped variables. It’s commonly used for variables that may change their value.\n\n    let age = 25; \n    // Declaring a variable 'age' and assigning the value 25\n\n### Constants:\n- Declares variables that cannot be reassigned. It’s block-scoped as well.\n- Constants cannot be reassigned after their initial assignment\n\n    const pi = 3.14; \n    // Declaring a constant 'pi' and assigning the value 3.14\n\n## Wrap up\n\nHere's a table summary showing the differences between these keywords:\n\n|Keyword|Scope|Redeclaration & Reassignment|Hoisting|\n|:----|:---|:---:|:---|\n|`var`|Global| Local|yes & yes|yes| with default value|\n|`let`|Global| Local| Block|no & yes|yes| without default value|\n|`const`|Global| Local| Block|no & no|yes| without default value|\n\nThese factors we explained plays an important role in determining how you declare variables in JavaScript.\n\nIf you never want a variable to change, `const` is the keyword to use.\n\nIf you want to reassign values:\n\n* and you want the hoisting behavior, `var` is the keyword to use\n* if you don't want it, `let` is the keyword for you\n\nThe hoisting behavior can cause unexpected bugs in your application. That's why developers are generally advised to avoid `var` and stick to `let` and `const`.\n"],"4":["Control Flow and Functions","\n# Control Flow & Functions\n\n![](https://miro.medium.com/v2/0*CwEe5c4uGr0FQ0uf.jpg)\n\nControl flow is the order in which statements are executed in a program. \n\nThe default control flow is for statements to be read and executed in order from left-to-right, top-to-bottom in a program file.\n\nControl structures such as conditionals (if statements and the like) alter control flow by only executing blocks of code if certain conditions are met. \n\nThese structures essentially allow a program to make decisions about which code is executed as the program runs.\n\n## Conditional Statements:\n\n### If Statement:\nThe `if` statement is used to execute a block of code if a specified condition evaluates to true. If the condition is false, an optional `else` block can be executed.\n\n    if (condition) {\n    // Code to be executed if the condition is true\n    } else {\n    // Code to be executed if the condition is false\n    }\n\n### Else If Statement:\nThe `else if` statement allows you to specify multiple conditions to be tested sequentially. If the first condition is false, subsequent conditions are checked until a true condition is found, and the corresponding block is executed.\n\n    if (condition1) {\n    // Code to be executed if condition1 is true\n    } else if (condition2) {\n    // Code to be executed if condition2 is true\n    } else {\n    // Code to be executed if no conditions are true\n    }\n\n### Switch Statement:\nThe `switch` statement is used to perform different actions based on different conditions. It evaluates an expression against multiple possible case values and executes the block of code associated with the first matching case.\n\n    switch (expression) {\n    case value1:\n        // Code to be executed if expression is equal to value1\n        break;\n    case value2:\n        // Code to be executed if expression is equal to value2\n        break;\n    default:\n        // Code to be executed if expression doesn't match any cases\n    }\n\n## Looping Statements:\n\n### For Loop:\nThe `for` loop is used to repeatedly execute a block of code until a specified condition is false. It consists of an initialization, a condition, and an iteration statement.\n\n    for (initialization; condition; iteration) {\n    // Code to be executed in each iteration\n    }\n\n### While Loop:\nThe `while` loop continues to execute a block of code as long as a specified condition is true. It checks the condition before each iteration.\n\n    while (condition) {\n    // Code to be executed as long as the condition is true\n    }\n\n### Do-while Loop:\nSimilar to the `while` loop, the `do-while` loop executes a block of code as long as a specified condition is true. The key difference is that the condition is checked after the block is executed, guaranteeing at least one iteration.\n\n    do {\n    // Code to be executed at least once\n    } while (condition);\n\n## Functions in JavaScript\n\nFunctions are one of the fundamental building blocks in JavaScript. A function is a reusable set of statements to perform a task or calculate a value. \n\nFunctions can be passed one or more values and can return a value at the end of their execution. \n\nIn order to use a function, you must define it somewhere in the scope where you wish to call it.\n\n    // Defining the function:\n    function sum(num1, num2) {\n      return num1 + num2;\n    }\n    \n    // Calling the function:\n    sum(3, 6); // 9\n\nThe above example code provided contains a function that takes in 2 values and returns the sum of those numbers\n\n### Function Declaration:\nA function declaration defines a named function with a specified set of parameters and a code block that is executed when the function is called.\n\n    function functionName(parameters) {\n    // Code to be executed when the function is called\n    }\n\n### Function Expression:\nA function expression involves assigning an anonymous function to a variable. The function can be invoked using the variable name.\n\n    let functionName = function(parameters) {\n    // Code to be executed when the function is called\n    };\n\n### Returning values from Functions\n\nFunctions return (pass back) values using the `return` keyword. \n\n`return` ends function execution and returns the specified value to the location where it was called. \n\nA common mistake is to forget the `return` keyword, in which case the function will return `undefined` by default.\n\n**Example:**\n\n    // With return\n    function sum(num1, num2) {\n      return num1 + num2;\n    }\n    \n    // Without return, so the function doesn't output the sum\n    function sum(num1, num2) {\n      num1 + num2;\n    }\n\n### Calling Functions\n\nFunctions can be called, or executed, elsewhere in code using parentheses following the function name. \n\nWhen a function is called, the code inside its function body runs. Arguments are values passed into a function when it is called.\n\n**Example:**\n\n    // Defining the function\n    function sum(num1, num2) {\n      return num1 + num2;\n    }\n    \n    // Calling the function\n    sum(2, 4); // 6\n\n### Arrow Functions:\nArrow functions provide a concise syntax for writing functions. They are often used for short, anonymous functions.\n\n    let functionName = (parameters) => {\n    // Code to be executed when the function is called\n    };\n\n### Function with Default Parameters:\nDefault parameters allow you to specify default values for function parameters. If a value is not provided when the function is called, the default value is used.\n\n    function functionName(parameter1, parameter2 = defaultValue) {\n    // Code to be executed when the function is called\n    }\n\n## Practical Implementation\n\nLet's use the knowledge we gained by this lesson to create a Star pattern program with `for` loops & reusable function block,\n\n    function generateStarPattern(size) {\n        for (let i = 1; i <= size; i++) {\n            let pattern = '';\n            for (let j = 1; j <= i; j++) {\n                pattern += '* ';\n            }\n            console.log(pattern);\n        }\n    }\n\n    generateStarPattern(5);\n\n**Output:**\n\n```\n* \n* * \n* * * \n* * * * \n* * * * * \n```\n"],"5":["Arrays and Objects","\n# Arrays and Objects\n\n![](https://miro.medium.com/v2/resize:fit:1100/1*Gf4YfYLdOCCG3RikV_uLAQ.jpeg)\n\nArrays and objects are fundamental data structures in JavaScript.\n\nThey offer powerful ways to organize and manipulate data in your programs. \n\nUnderstanding how to work with arrays for ordered collections and objects for key-value pairs is essential for effective JavaScript development.\n\n## Arrays in JavaScript\n\nAn array is a data structure that stores a collection of elements. \n\nIn JavaScript, arrays can hold values of different data types, and the elements are accessed by their index.\n\nSuppose we need to record the age of **5** students. Instead of creating **5** separate variables, we can simply create an array:\n\n![](https://www.programiz.com/sites/tutorial2program/files/javascript-array-updated.png)\n\n###### Array of 5 elements\n\n### Creating an Array\n\nWe can create an array by placing elements inside an array literal `[]`, separated by commas. For example,\n\n    const numbers = [10, 30, 40, 60, 80]\n\nHere,\n\n* `numbers` - name of the array\n* `[10, 30, 40, 60, 80]` - elements of the array\n\nExamples of JavaScript Array,\n\n    // empty array\n    const emptyArray = [];\n    \n    // array of strings\n    const actions = [ 'eat', 'work', 'sleep'];\n    \n    // array with mixed data types\n    const mixedArray = ['work', 1, true];\n\n### Accessing Elements from Array\n\nEach element of an array is associated with a number called an index. \n\nThe index specifies the position of the element inside the array.\n\nFor the array,\n\n    let numbers = [10, 30, 40, 60, 80]\n\nHere is the indexing of each element:\n\n![](https://www.programiz.com/sites/tutorial2program/files/javascript-array-index-updated.png)\n\nIndex of Array Elements\n\nWe can use an array index to access the elements of the array.\n\n* `numbers[0]` - access the first element **1**.\n* `numbers[2]` - access the third element **3**.\n\nLet's look at an example.\n\n    let numbers = [10, 30, 40, 60, 80]\n    \n    // access first element\n    console.log(numbers[0]);\n    \n    // access third element\n    console.log(numbers[2]);\n\n**Output**\n\n```\n10\n40\n```\n\n**Note**: The index of arrays starts with **0**, not **1**.\n\n### Add Element to an Array\n\nWe can add elements to an array using built-in methods like `push()` and `unshift()`.\n\n  The `push()` method adds an element at the end of the array.\n\n    let dailyActivities = ['eat', 'sleep'];\n    \n    // add an element at the end\n    dailyActivities.push('exercise');\n    \n    console.log(dailyActivities);\n\n**Output**\n\n```\n[ 'eat', 'sleep', 'exercise' ]\n```\n\nThe `unshift()` method adds an element at the beginning of the array.\n\n    let dailyActivities = ['eat', 'sleep'];\n    \n    // add an element at the start\n    dailyActivities.unshift('work'); \n    \n    console.log(dailyActivities);\n\n**Output**\n\n```\n[ 'work', 'eat', 'sleep' ]\n```\n\n### Change/Update the Elements of an Array\n\nWe can add or change elements by accessing the index value. For example,\n\n    let dailyActivities = [ 'eat', 'sleep'];\n    \n    // insert in index 1\n    dailyActivities[1] = 'exercise';\n    \n    console.log(dailyActivities);\n\n**Output**\n\n```\n[ 'eat', 'exercise' ]\n```\n\nHere, we changed the array element using the array index. \n\nThe element `sleep` is replaced by `exercise` as we inserted the element in index **1**.\n\n### Removing Elements from an Array\n\nWe can remove an element from any specified index of an array using the `splice()` method.\n\n    let numbers = [1, 2, 3, 4, 5];\n    \n    // remove one element at the index 2\n    numbers.splice(2, 1);\n    \n    console.log(numbers);\n\n**Output**\n\n```\n[ 1, 2, 4, 5 ]\n```\n\nIn this example, we removed one element at index **2** using the `splice()` method.\n\n### Finding Length of an Array\n\nWe can find the length of an array using the `length` property. For example,\n\n    const dailyActivities = [ 'eat', 'sleep'];\n    \n    // return the length of array\n    console.log(dailyActivities.length);\n\n**Output**\n\n```\n2\n```\n\n### Array Methods\n\nIn JavaScript, there are various methods available that make it easier to perform useful operations with arrays. \n\nSome commonly used array methods in JavaScript are:\n\n| Method | Description |\n|---|---|\n| concat() | Joins two or more arrays and returns a result. |\n| indexOf() | Searches an element of an array and returns its position. |\n| find() | Returns the first value of an array element that passes a test. |\n| findIndex() | Returns the first index of an array element that passes a test. |\n| forEach() | Calls a function for each element. |\n| includes() | Checks if an array contains a specified element. |\n| sort() | Sorts the elements alphabetically in strings and in ascending order. |\n| slice() | Selects the part of an array and returns the new array. |\n| splice() | Removes or replaces existing elements and/or adds new elements. |\n\n### Visualizing Array Methods\n\n![](https://i.ibb.co/Y312KVY/array-methods.webp)\n\n## Objects in JavaScript\n\nJavaScript object is a non-primitive data-type that allows you to store multiple collections of data.\n\n**Note**: If you are familiar with other programming languages, JavaScript objects are a bit different. You do not need to create classes in order to create objects.\n\nHere is an example of a JavaScript object.\n\n    // object\n    const student = {\n        firstName: 'ram',\n        class: 10\n    };\n\nHere, `student` is an object that stores values such as strings and numbers.\n\n### JavaScript Object Declaration\n\nThe syntax to declare an object is:\n\n    const object_name = {\n        key1: value1,\n        key2: value2\n    }\n\nHere, an object `object_name` is defined. Each member of an object is a **key: value** pair separated by commas and enclosed in curly braces `{}`.\n\nFor example,\n\n    // object creation\n    const person = { \n        name: 'John',\n        age: 20\n    };\n    console.log(typeof person); // object\n    \nYou can also define an object in a single line.\n\n    const person = { name: 'John', age: 20 };\n\nIn the above example, `name` and `age` are keys, and `John` and `20` are values respectively.\n\n### JavaScript Object Properties\n\nIn JavaScript, \"key: value\" pairs are called **properties**. For example,\n\n    let person = { \n        name: 'John',\n        age: 20\n    };\n\nHere, `name: 'John'` and `age: 20` are properties.\n\n![](https://cdn.programiz.com/sites/tutorial2program/files/javascript-object-properties.png)\n\n### Accessing Object Properties\n\nYou can access the **value** of a property by using its **key**.\n\nWe're gonna use this object for examples,\n\n    const person = { \n        name: 'John', \n        age: 20, \n    };\n\n#### 1. Using dot Notation\n\nHere's the syntax of the dot notation.\n\n    objectName.key\n\nFor example,\n    \n    // accessing property\n    console.log(person.name); // John\n\n#### 2. Using bracket Notation\n\nHere is the syntax of the bracket notation.\n\n    objectName[\"propertyName\"]\n\nFor example,\n    \n    // accessing property\n    console.log(person[\"name\"]); // John\n\n### Nesting Objects\n\nAn object can also contain another object. For example,\n\n    // nested object\n    const student = { \n        name: 'John', \n        age: 20,\n        marks: {\n            science: 70,\n            math: 75\n        }\n    }\n    \n    // accessing property of student object\n    console.log(student.marks); // {science: 70, math: 75}\n    \n    // accessing property of marks object\n    console.log(student.marks.science); // 70\n\nIn the above example, an object `student` contains an object value in the `marks` property.\n\n### Object Methods\n\nIn JavaScript, an object can also contain a function. For example,\n\n    const person = {\n        name: 'Sam',\n        age: 30,\n        // using function as a value\n        greet: function() { console.log('hello') }\n    }\n    \n    person.greet(); // hello\n\nHere, a function is used as a value for the greet key. \n\nThat's why we need to use `person.greet()` instead of `person.greet` to call the function inside the object.\n\nA JavaScript **method** is a property containing a function declaration.\n\n### Relationship between Arrays and Objects in JavaScript\n\nIn JavaScript, arrays are objects, with numbered indexes.\n\nSince arrays are objects, the array elements are stored by reference. Hence, when an array value is copied, any change in the copied array will also reflect in the original array. For example,\n\n    let arr = ['h', 'e'];\n    let arr1 = arr;\n    arr1.push('l');\n    \n    console.log(arr);\n    console.log(arr1); \n\n**Output**\n\n```\n[ 'h', 'e', 'l' ]\n[ 'h', 'e', 'l' ]\n```\n\nHere, we modified the copied array `arr1` which also modified the original array `arr`.\n"],"6":["Document Object Model (DOM)","\n# Document Object Model (DOM)\n\n![](https://i.ibb.co/THy3Rpy/js-dom.webp)\n\nThe Document Object Model (DOM) is an essential part of web development. It provides a way for programmers to interact with and manipulate the structure of a website.\n\nWith the help of the DOM, developers can access and change the different parts of a webpage. This allows them to create dynamic and interactive websites, where user interactions can trigger changes in the page's layout and content.\n\nUnderstanding the DOM is crucial for creating responsive and user-friendly websites. So in this lesson, we will delve deeper into what the DOM can do and how you can use it in JavaScript.\n\n## What is the DOM?\n\nThe DOM, or Document Object Model, is like a map of a website. Just like how a map shows you where all the streets and buildings are in a city, the DOM shows you where everything is on a website.\n\nThe DOM helps your computer understand the different parts of a website and how they are put together.\n\nJust like you can use a map to find your way around a city, programmers can use the DOM to find different parts of a website and change their properties. For example, they can make a button change color when a user hovers over it or make pictures move around on the screen.\n\nThe DOM is like a big puzzle. But using JavaScript, we can move the puzzle pieces around and make a website look and work however we want it to work.\n\n## The DOM + JavaScript\n\nJavaScript is a programming language that helps us interact with the DOM. The DOM and JavaScript are like two friends that work together to make websites cool and interactive. Again, the DOM is like a big map that shows where all the different parts of the website are located.\n\nOn the other hand, JavaScript is like a magic wand that can change a website by using the map (DOM) to find the different parts of the website. It can make a button change color when you click on it or make a picture move to a different spot on the page.\n\nTogether, the DOM and JavaScript make the website come alive and respond to what you do, like moving your mouse or clicking on a button.\n\nIn summary, the DOM is like a map that shows where everything is and JavaScript is like a magic wand that can change things on that map.\n\n## DOM Structure – Understanding the DOM Tree\n\nImagine a website is like a big book, and each page in that book represents a different part of the website. The DOM tree is like a table of contents for that book. It shows you all the different parts of the website, and how they are organized.\n\nEach part of the website is called an \"element\" and these elements are arranged in a tree-like structure.\n\nThe top of the tree is called the \"root\" and it represents the entire website. From there, the tree branches out into different sections, like the headings, paragraphs, images, and others that make up the entire website.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/DOM-tree-5.png)\n\nIllustration of the DOM tree\n\nJust like how the table of contents in a book helps you find specific pages, the DOM tree helps computers find specific elements on a website. In addition, it allows developers to access and change those elements, so they can make the website interactive.\n\nIn short, the DOM tree represents the structure of a website in a way that computers can understand. Developers can use it to access and manipulate different elements in that structure to create dynamic web pages.\n\n## How to Access the DOM\n\nAccessing elements in the DOM means finding specific parts of a website and changing or manipulating them.\n\nTo access an element on a website, you need to know the specific element you want to access.\n\nJavaScript provides different methods to access the elements in the DOM, such as `getElementById`, `getElementsByTagName`, `querySelector`, and `querySelectorAll`.\n\nThese methods allow you to find an element based on its `id`, `tagname`, or `classname` and select it for manipulation.\n\nFor example, you can access a button on a webpage and change its text or color when a user clicks on it. Or, you can access an image on a webpage and change it to a different image when a user hovers over it.\n\nHere's an example of how you might use the DOM to access an element on a webpage:\n\nLet's say you have a webpage that displays a list of students and you want to change the background color of a specific student when they are clicked.\n\nYou can use the DOM method `getElementById` to access the specific element that represents the student and then use the `style` property in JavaScript to change the background color of that element.\n\nHere's how that might look:\n  \n```xml\n<div id=\"student-list\">\n      <div id=\"student-1\" class=\"student\">John</div>\n      <div id=\"student-2\" class=\"student\">Alice</div>\n      <div id=\"student-3\" class=\"student\">Bob</div>\n</div>\n```\n  \n```css\n.student {\n    padding: 40px;\n    margin-bottom: 10px;\n    cursor: pointer;\n  }\n  .student:hover {\n    background-color: #f1f1f1;\n  }\n```\n\n    let student1 = document.getElementById(\"student-1\");\n\n    student1.addEventListener(\"click\", () => {\n      student1.style.backgroundColor = \"lightblue\";\n    });\n  \nIn this example, JavaScript is using the `getElementById` method to select the element with the id \"student-1\" and it changes its `backgroundColor` property to \"light blue\" when you click on it.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/Document_4.gif)\n\nSimilarly, you can use `getElementsByClassName` to select all elements with a specific class and `querySelector` to select an element based on a CSS selector.\n\nThis is just a basic example, but it illustrates how you can use the DOM to access specific elements on a webpage and change their properties in response to user interaction.\n\n## How to Add, Remove, and Modify DOM Elements\n\nAdding, removing, and modifying elements in the DOM refers to adding new elements to a webpage, removing existing elements, and changing the properties of existing elements.\n\nFor example, if you want to add a new button to a webpage, you would use JavaScript to create a new element and then use the DOM to add that element to the webpage. Similarly, if you want to remove an element, you would use the DOM to find the element and then delete it.\n\nModifying elements also involves making changes to the properties of an existing element. For example, you could use the DOM to change the text inside a button.\n\nHere’s how you can express this in code.:\n\n```xml\n<div id=\"wrapper\" class=\"btn-wrapper\">\n  <button id=\"create-btn\" class=\"btn\">Create new button</button>\n</div>\n```\n\n```css\n.btn-wrapper {\n  display: flex;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n```\n    \n    let createButton = document.getElementById(\"create-btn\");\n    let wrapper = document.getElementById(\"wrapper\");\n\n    createButton.addEventListener(\"click\", () => {\n      let newButton = document.createElement(\"button\");\n      newButton.innerHTML = \"Click me\";\n      wrapper.appendChild(newButton);\n    });\n\n  \nIn the above example, we are creating a new button element and setting the text inside the button to \"Click me\". Then we're using the `appendChild` method to add this new button element to the webpage.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/Document.gif)\n\n## Recap\n\nThe Document Object Model (DOM) is an essential tool for creating interactive, dynamic web pages using JavaScript. It allows developers to access and manipulate the contents of a webpage in real time.\n\nUnderstanding the DOM tree and how to access, add, remove, and modify elements is crucial for JavaScript developers.\n\nWe've seen how the DOM represents a webpage as a tree of objects and how we can use different methods like `getElementById`, `getElementsByTagName`, `querySelector`, and `querySelectorAll` to access specific elements on a webpage. With these methods, we can change the content, style, or layout of a webpage after it has loaded in the browser.\n\nAdditionally, we've seen how to add new elements to a webpage, remove existing elements, and change the properties of existing elements.\n\nHope this lesson has given you a better understanding of the Document Object Model and how to use it to create dynamic web pages.\n\nRemember that the DOM is a powerful tool that you can use to create amazing websites, so don't be afraid to experiment and try new things.\n"],"7":["Asynchronous JavaScript"," \n# Asynchronous JavaScript\n\n![](https://miro.medium.com/v2/resize:fit:1100/1*2VC-BOYDyr0frdRpbKgNJA.png) \n\nTo understand what asynchronous programming means, think about multiple people working on a project simultaneously, each on a different task.\n\nIn traditional (synchronous) programming, each person would have to wait for the person before them to finish their task before starting their own.\n\nBut with asynchronous programming, everyone can start and work on their tasks simultaneously without waiting for the others to finish.\n\nSimilarly, in a computer program, asynchronous programming allows a program to work on multiple tasks simultaneously instead of completing one task before moving on to the next one. This can make the program get more things done in a shorter amount of time.\n\nFor example, a program can send a request to a server while handling user input and processing data, all at the same time. This way, the program can run more efficiently.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/image-321.png)\n\nIn this lesson, we will delve into the world of asynchronous programming in JavaScript, exploring the different techniques and concepts that are used to achieve this powerful programming paradigm.\n\nFrom callbacks to promises and async/await, you will understand how to harness the power of asynchronous programming in your JavaScript projects.\n\nUnderstanding asynchronous programming is essential for building high-performance web applications, whether you're a seasoned developer or just getting started with JavaScript. So, read on to learn more about this vital concept.\n\n## What is Synchronous Programming?\n\nSynchronous programming is a way for computers to do things one step at a time, in the order they are given the instructions.\n\nImagine you're cooking dinner and have a list of tasks, like boiling water for pasta, frying chicken, and making a salad.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/image-343.png)\n\nYou would do these tasks one at a time and wait for each one to finish before moving to the next.\n\nSynchronous programming works similarly, where the computer will complete one task before moving on to the next. This makes it easy to understand and predict what the computer will do at any given time.\n\nHere's an example of synchronous code in JavaScript:\n\n    // Define three functions\n    function firstTask() {\n      console.log(\"Task 1\");\n    }\n\n    function secondTask() {\n      console.log(\"Task 2\");\n    }\n\n    function thirdTask() {\n      console.log(\"Task 3\");  \n    }\n\n    // Execute the functions\n    firstTask();\n    secondTask();\n    thirdTask();\n\nThis code will output the following messages in the order they appear:\n\n```\n\"Task 1\"\n\"Task 2\"\n\"Task 3\"\n```\n\nThe code will execute the tasks in the order you see them and wait for each task to be completed before moving on to the next one.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/image-244.png)\n\nDiagram showing how synchronous programming works.\n\nHowever, synchronous programming can be problematic in certain situations, particularly when dealing with tasks that take a significant amount of time to complete.\n\nFor example, let's say that a synchronous program performs a task that requires waiting for a response from a remote server. The program will be stuck waiting for the response and cannot do anything else until the response is returned. This is known as _blocking_, and it can lead to an application appearing unresponsive or \"frozen\" to the user.\n\nConsider the following code:\n\n    function someLongRunningFunction() {\n        let start = Date.now();\n        while (Date.now() - start < 5000) {\n            // do nothing\n        }\n        return \"Hello\";\n    }\n\n    console.log('Starting...');\n\n    let result = someLongRunningFunction();\n    console.log(result);\n\n    console.log('...Finishing');\n\nIn this example:\n\n* The program starts by logging _\"Starting...\"_ to the console.\n* Then it calls the `someLongRunningFunction`, which simulates a long-running task that takes 5 seconds to complete. This function will block the execution of the rest of the program while it runs.\n* Once the function completes, it will return _\"Hello\"_, and the program will log it on the console.\n* Finally, the program will log _\"Finishing\"_ to the console.\n\nDuring the 5 seconds that `someLongRunningFunction()` is being executed, the program will be blocked, become unresponsive, and be unable to execute the next line of code. This can cause the program to take a long time to complete and make the application unresponsive to the user.\n\nHowever, if the program is executed asynchronously, it will continue to run the next line of code instructions rather than becoming blocked. This will enable the program to remain responsive and execute other code instructions while waiting for the timeout to complete.\n\n## What is Asynchronous Programming?\n\nAsynchronous programming is a way for a computer program to handle multiple tasks simultaneously rather than executing them one after the other.\n\n![image-336](https://www.freecodecamp.org/news/content/images/2023/01/image-336.png)\n\nDiagram showing how asynchronous programming works.\n\nAsynchronous programming allows a program to continue working on other tasks while waiting for external events, such as network requests, to occur. This approach can greatly improve the performance and responsiveness of a program.\n\nFor example, while a program retrieves data from a remote server, it can continue to execute other tasks such as responding to user inputs.\n\nHere's an example of an asynchronous program using the `setTimeout` method:\n\n    console.log(\"Start of script\");\n\n    setTimeout(function() {\n      console.log(\"First timeout completed\");\n    }, 2000);\n\n    console.log(\"End of script\");\n    \n\nIn this example, the `setTimeout` method executes a function after a specified time. The function passed to `setTimeout` will be executed asynchronously, which means that the program will continue to execute the next line of code without waiting for the timeout to complete.\n\nWhen you run the code, the output will be:\n\n```\n\"Start of script\"\n\"End of script\"\n\"First timeout completed\"\n```\n    \nAs you can see, `console.log(\"First timeout completed\")` will be executed after 2 seconds. Meanwhile, the script continues to execute the next code statement and doesn't cause any \"blocking\" or \"freezing\" behaviour.\n\nIn JavaScript, asynchronous programming can be achieved through a variety of techniques. One of the most common methods is the use of _callbacks_.\n\n## How to Use a Callback Function\n\nLet's say you want to plan a birthday party for your child. You have to invite the guests, order a cake, and plan the games. But you also want to hire a clown to entertain the guests. You can only have the clown come to the party once all the other party arrangements are done, and the guests have arrived.\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/image-341.png)\n\n###### Illustration of a clown\n\nSo, you tell the clown to come to the party only after you have notified him that the guests have arrived. In this case, the clown represents a callback function, and the \"guests arriving\" represents the function that has to complete execution before the callback can be executed.\n\nIn code, a callback function is a function that is passed as an argument to another function, and it is executed after the first function has finished running. It's commonly used in JavaScript to handle asynchronous operations like fetching data from a server, waiting for a user's input, or handling events.\n\nHere is a simple example of how you can use a callback function to handle an asynchronous operation:\n\n    // Declare function\n    function fetchData(callback) {\n      setTimeout(() => {\n        const data = {name: \"John\", age: 30};\n        callback(data);\n      }, 3000);\n    }\n\n    // Execute function with a callback\n    fetchData(function(data) {\n      console.log(data);\n    });\n\n    console.log(\"Data is being fetched...\");\n\nIn this example:\n\n* We have a function called `fetchData` that uses the `setTimeout` method to simulate an asynchronous operation. The function takes a callback as an argument.\n* The callback function is then passed the data retrieved by the function after the timeout has been completed.\n\nThe `setTimeout` method is used to execute the callback after a specified time (in this case, 3 seconds). The callback will be executed asynchronously, which means that the program will continue to execute the next line of code without waiting for the timeout to complete.\n\nWhen you run the code, the output will be:\n\n    Data is being fetched...\n    {name: \"John\", age: 30}\n    \n\nAs you can see, `console.log(\"First timeout completed\")` will be executed after 3 seconds. Meanwhile, the script continues to execute the next statement, `console.log(\"Data is being fetched...\");`.\n\nThis is the core concept of asynchronous programming. The script doesn't wait for the asynchronous operation to complete. It just continues to execute the next instruction.\n\n## What is Callback Hell?\n\nCallbacks provide a useful way to handle asynchronous operations. However, when many callbacks are nested, the code can be complex and hard to read and understand.\n\nThis happens when you chain multiple callbacks together, one after the other, creating a pyramid-like structure of indentation called callback hell, also known as the \"Pyramid of Doom\".\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/image-340.png)\n\nHere is an example of callback hell:\n\n    getData(function(a) {\n      getMoreData(a, function(b) {\n        getEvenMoreData(b, function(c) {\n          getEvenEvenMoreData(c, function(d) {\n            getFinalData(d, function(finalData) {\n              console.log(finalData);\n            });\n          });\n        });\n      });\n    });\n    \n\nIn this example:\n\n1.  The `getData` function takes a callback as an argument and is executed after data is retrieved.\n2.  The callback function then takes the data and calls the `getMoreData` function, which also takes a callback as an argument, and so on.\n\nThis nesting of callbacks can make the code difficult to maintain, and the indentation makes it even harder to see the overall structure of the code.\n\nTo avoid callback hell, you can use a more modern way of handling async operations known as promises. Promises provide a more elegant way of handling the asynchronous flow of a program compared to callback functions. This is the focus of the next section.\n\n## How Do Promises Work?\n\nA promise represents a way of handling asynchronous operations in a more organized way. It serves the same purpose as a callback but offers many additional capabilities and a more readable syntax.\n\nA promise in JavaScript is a placeholder for a future value or action. By creating a promise, you are essentially telling the JavaScript engine to \"promise\" to perform a specific action and notify you once it is completed or fails.\n\n![image-339](https://www.freecodecamp.org/news/content/images/2023/01/image-339.png)\n\nNext, callback functions are then attached to the promise to handle the outcome of the action. These callbacks will be invoked when the promise is fulfilled (action completed successfully) or rejected (action failed).\n\nAs a JavaScript developer, you will likely spend more time consuming promises returned by asynchronous Web APIs and managing their outcomes rather than creating them yourself.\n\n### How to Create a Promise\n\nTo create a promise_,_ you'll create a new instance of the `Promise` object by calling the `Promise` constructor.\n\nThe constructor takes a single argument: a function called `executor`. The \"executor\" function is called immediately when the promise is created, and it takes two arguments: a `resolve` function and a `reject` function.\n\n![image-345](https://www.freecodecamp.org/news/content/images/2023/01/image-345.png)\n\n###### Anatomy of a promise.\n\nWrite the following line of code to declare a promise:\n\n    // Initialize a promise\n    const myPromise = new Promise(function(resolve, reject) => {})\n\nNow, let's inspect the `myPromise` object by logging it to the console.\n\n    console.log(myPromise);\n\n![](https://www.freecodecamp.org/news/content/images/2023/01/promise-object.jpg)\n\nThis image represents an output of inspecting the `promise` object. \n\nAs you can see, the promise has a _pending_ status and an _undefined_ value. This is because nothing has been set up for the promise object yet, so it's going to sit there in a pending state forever without any value or result.\n\nNow, let's set up `myPromise` to resolve with a string printed to the console after 2 seconds.\n\n    const myPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n          resolve(\"Hello from the promise!\");\n      }, 2000);\n    });\n\nNow, when you inspect `myPromise` object, you'll find that it has a status of _\"fulfilled_\", and a value set to the string you passed to the `resolve` function.\n\n![myPromise-obj](https://www.freecodecamp.org/news/content/images/2023/01/myPromise-obj.jpg)\n\nA promise has three states:\n\n* **Pending:** initial state, neither fulfilled nor rejected.\n* **Fulfilled:** meaning that an operation was completed successfully.\n* **Rejected:** meaning that an operation failed.\n\n![image-347](https://www.freecodecamp.org/news/content/images/2023/01/image-347.png)\n\nIt's important to note that a promise is said to be settled when it is resolved or rejected.\n\nNow that you know how promises are created, let's look at how you may consume them.\n\n### How to Consume a Promise\n\nConsuming a promise involves the following steps:\n\n1.  **Obtain a reference to the promise:** To consume a promise, you first need to obtain a reference to it. Based on the code from the previous section, our reference to a promise will be the `myPromise` object.\n2.  **Attach callbacks to the promise:** Once you have a reference, you can attach callback functions by using the `.then` and `.catch` methods. The `.then` method is called when a promise is fulfilled and the `.catch` method is called when a promise is rejected.\n3.  **Wait for the promise to be fulfilled or rejected:** Once you've attached callbacks to the promise, you can wait for the promise to be fulfilled or rejected.\n\nHere is an example of how you might consume a promise:\n\n    myPromise\n        .then((result) => {\n            console.log(result);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    \n\nOnce the promise is fulfilled, the `.then` callback method will be called with the resolved value. And if the promise is rejected, the `.catch` method will be called with an error message.\n\nYou can also add the `.finally()` method, which will be called after a promise is settled. This means that `.finally()` will be invoked regardless of the status of a promise (whether resolved or rejected).\n\n    myPromise\n      .then((result) => {\n        console.log(result);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        //code here will be executed regardless of the status\n        //of a promise (fulfilled or rejected)\n      });\n\n### How to Chain Promises\n\nPromise chaining is a pattern that allows for a clear and easy-to-understand approach to handling asynchronous operations.\n\nThe pattern involves connecting multiple promises in a sequence, where the output of one promise is passed as input to the next promise.\n\nThe linking of the promises is achieved using the `then()` method. This method uses a callback function as an argument and returns a new promise. The new promise is then resolved with the value returned by the callback function.\n\nHere is an example of promise chaining:\n\n    fetch('https://example.com/data')\n        .then(response => response.json())\n        .then(data => processData(data))\n        .then(processedData => {\n            // do something with the processed data\n        })\n        .catch(error => console.log(error))\n\nFrom the above code:\n\n* The first promise, which is the `fetch API` function, is fetching data from a server.\n* The second promise is parsing the response as JSON.\n* The third promise is processing the data.\n* The fourth promise is performing action on the data.\n* The `.catch` method at the end of the chain will handle any errors that occurred in any of the previous promises.\n\nIt's important to keep in mind that `.then` methods are executed asynchronously and in order, each one waiting for the previous one to be resolved, and that the returned value of each `.then` will be passed as an argument to the next one.\n\n### Error Handling\n\nWhen a promise is rejected, it will trigger the `.catch()` method, which handles errors. The `.catch()` method takes a single argument, which is the error thrown.\n\nAnother way of handling errors in a promise is by using the \"try-catch\" block inside a `.then` method.\n\nHere is an example:\n\n    fetch(\"https://api.github.com/users/octocat\")\n      .then((response) => response.json())\n      .then((data) => {\n        try {\n          //processing received data\n          console.log(data);\n        } catch (error) {\n          console.log(error);\n        }\n      })\n      .catch((error) => console.log(error));\n\nFrom the above code:\n\n* The `fetch()` function makes a request to the GitHub API to fetch user data.\n* The \"try-catch\" block is used inside the second `.then` method to handle any error that may occur when processing the data received from the server.\n* And the outer `.catch` method will only catch errors that occur during the fetch request.\n\nHandling errors is very important because promises are used to handle asynchronous operations, and these operations may fail for various reasons.\n\nIf an error occurs during the execution of a promise and it is not handled, the program will continue to execute and may lead to unexpected behaviour or crashes.\n\nBy handling errors, we can ensure that the program can continue to function even when an error occurs and also provide meaningful feedback to the user about the problem.\n\n### How to Use the Promise.all Method\n\nThe `Promise.all()` method takes an array of promises as input and returns a single promise that is fulfilled when all input promises have been fulfilled. It can be useful when you wait for multiple promises to be resolved before taking action.\n\nFor example, if you want to fetch data from multiple URLs.\n\n    let promise1 = fetch('https://jsonplaceholder.typicode.com/posts/1');\n    let promise2 = fetch('https://jsonplaceholder.typicode.com/posts/2');\n    let promise3 = fetch('https://jsonplaceholder.typicode.com/posts/3');\n    \n\nHere, `promise1`, `promise2`, and `promise3` are promises that are fetching data from three different URLs.\n\nNow, you can use `Promise.all([promise1, promise2, promise3])` to wait for all the promises to resolve before doing something with the data, as shown below.\n\n    Promise.all([promise1, promise2, promise3])\n    .then((values) => {\n      console.log(values);\n    })\n        \n\nIn the above example:\n\n* `Promise.all()` takes an array of promises as input and returns a new promise.\n* The `then` method is then called on the returned promise to log the resolved values of all the input promises in the order they were passed to `Promise.all()`.\n\n![Screenshot-2023-01-26-103003-1](https://www.freecodecamp.org/news/content/images/2023/01/Screenshot-2023-01-26-103003-1.jpg)\n\nNote that in an instance where any input promises are rejected, the returned promise will also be rejected with the value of the first rejected promise.\n\n### How to Use the Fetch API with Promises\n\nI have been using the Fetch API for some examples in this lesson, and I understand that it may be unfamiliar to some readers. So I created this section to explain the basics of the Fetch API for those who may need to become more familiar with it.\n\nThe Fetch API is a built-in JavaScript feature that allows you to make network requests, such as fetching data from a server. It is a modern alternative to the older XMLHttpRequest API and is designed to be easier and more powerful.\n\nHere is an example of how to use the Fetch API to fetch data from a server:\n\n    fetch('https://some-api.com/data')\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n    \n\nIn this example,\n\n* The `fetch()` method is used to make a request to the server located at \"[https://some-api.com/data](https://some-api.com/data)\". The returned value is a promise that will be fulfilled with the server's response.\n* The first `.then()` method is called to consume the promise and extract JSON data from the response.  \n* The next `then()` method is called to log the extracted data to the console.\n* If any errors occur, they will be caught in the `catch()` method and logged to the console.\n\nI hope the above explanation helps to clear up any confusion about the Fetch API and allows you to better understand the examples provided in this lesson.\n\n### Async Functions\n\n`Async/Await` is a feature that allows you to write asynchronous code in a more synchronous, readable way.\n\n* `async` is a keyword that is used to declare a function as asynchronous.\n* `await` is a keyword that is used inside an `async` function to pause the execution of the function until a promise is resolved.\n\nHere's an example of how you can use `async/await`:\n\n    async function getData() {\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n      const data = await response.json();\n      console.log(data);\n    }\n\n    getData();\n    \n\nIn this example,\n\n* the `getData` function is declared as an asynchronous function using the `async` keyword.\n* Inside the asynchronous function, we use the `await` keyword to wait for the `fetch` function to complete and retrieve some data from an API.\n* Once the data is retrieved, we use `await` again to wait and parse the retrieved data as JSON.\n* And then finally, we log the data to the console.\n\n\"Aync/Await\" is a powerful tool for handling asynchronous operations. It allows for more readable and maintainable code by eliminating the need for callbacks and providing a more intuitive way to handle asynchronous operations.\n\nUsing the \"async\" keyword before a function definition and the \"await\" keyword before an asynchronous operation makes the code look more like synchronous code, making it easier to understand.\n\nOverall, \"Async/Await\" is valuable to the JavaScript developer's toolbox and can significantly simplify handling asynchronous operations in your code.\n"],"8":["Error Handling and Debugging","\n# Error Handling and Debugging\n\n![](https://kinsta.com/wp-content/uploads/2021/11/errors-in-javascript.jpg)\n\nErrors in programming refer to situations that don’t let a program function normally. It can happen when a program doesn’t know how to handle the job at hand, such as when trying to open a non-existent file or reaching out to a web-based API endpoint while there’s no network connectivity.\n\nThese situations push the program to throw errors to the user, stating that it doesn’t know how to proceed. The program collects as much information as possible about the error and then reports that it can not move ahead.\n\nIntelligent programmers try to predict and cover these scenarios so that the user doesn’t have to figure out a technical error message like “404” independently. Instead, they show a much more understandable message: “The page could not be found.”\n\nErrors in JavaScript are objects shown whenever a programming error occurs. These objects contain ample information about the type of the error, the statement that caused the error, and the stack trace when the error occurred. JavaScript also allows programmers to create custom errors to provide extra information when debugging issues.\n\n### Properties of an Error\n\nNow that the definition of a JavaScript error is clear, it’s time to dive into the details.\n\nErrors in JavaScript carry certain standard and custom properties that help understand the cause and effects of the error. By default, errors in JavaScript contain three properties:\n\n1.  **message**: A string value that carries the error message\n2.  **name**: The type of error that occurred (We’ll dive deep into this in the next section)\n3.  **stack**: The stack trace of the code executed when the error occurred.\n\nAdditionally, errors can also carry properties like _columnNumber, lineNumber, fileName,_ etc., to describe the error better. However, these properties are not standard and may or may not be present in every error object generated from your JavaScript application.\n\n### Understanding Stack Trace\n\nA stack trace is the list of method calls a program was in when an event such as an exception or a warning occurs. This is what a sample stack trace accompanied by an exception looks like:\n\n![The error “TypeError: Numeric argument is expected” is shown on a gray background with additional stack details.](https://kinsta.com/wp-content/uploads/2021/11/type-error-output-numeric.png)\n\nExample of a Stack Trace.\n\nAs you can see, it starts by printing the error name and message, followed by a list of methods that were being called. Each method call states the location of its source code and the line at which it was invoked. You can use this data to navigate through your codebase and identify which piece of code is causing the error.\n\nThis list of methods is arranged in a stacked fashion. It shows where your exception was first thrown and how it propagated through the stacked method calls. Implementing a catch for the exception will not let it propagate up through the stack and crash your program. However, you might want to leave fatal errors uncaught to crash the program in some scenarios intentionally.\n\n### Errors vs Exceptions\n\nMost people usually consider errors and exceptions as the same thing. However, it’s essential to note a slight yet fundamental difference between them.\n\nAn exception is an error object that has been thrown.\n\nTo understand this better, let’s take a quick example. Here is how you can define an error in JavaScript:\n\n    const wrongTypeError = TypeError(\"Wrong type found, expected character\")\n\nAnd this is how the `_wrongTypeError_` object becomes an exception:\n\n    throw wrongTypeError\n\nHowever, most people tend to use the shorthand form which defines error objects while throwing them:\n\n    throw TypeError(\"Wrong type found, expected character\")\n\nThis is standard practice. However, it’s one of the reasons why developers tend to mix up exceptions and errors. Therefore, knowing the fundamentals is vital even though you use shorthands to get your work done quickly.\n\n## Types of Errors in JavaScript\n\nThere’s a range of predefined error types in JavaScript. They are automatically chosen and defined by the JavaScript runtime whenever the programmer doesn’t explicitly handle errors in the application.\n\nThis section will walk you through some of the most common types of errors in JavaScript and understand when and why they occur.\n\n### RangeError\n\nA RangeError is thrown when a variable is set with a value outside its legal values range. It usually occurs when passing a value as an argument to a function, and the given value doesn’t lie in the range of the function’s parameters. It can sometimes get tricky to fix when using poorly documented third-party libraries since you need to know the range of possible values for the arguments to pass in the correct value.\n\nSome of the common scenarios in which RangeError occurs are:\n\n* Trying to create an array of illegal lengths via the Array constructor.\n* Passing bad values to numeric methods like `toExponential()`, `toPrecision()`, `toFixed()`, etc.\n* Passing illegal values to string functions like `normalize()`.\n\n### ReferenceError\n\nA ReferenceError occurs when something is wrong with a variable’s reference in your code. You might have forgotten to define a value for the variable before using it, or you might be trying to use an inaccessible variable in your code. In any case, going through the stack trace provides ample information to find and fix the variable reference that is at fault.\n\nSome of the common reasons why ReferenceErrors occur are:\n\n* Making a typo in a variable name.\n* Trying to access block-scoped variables outside of their scopes.\n* Referencing a global variable from an external library before it’s loaded.\n\n### SyntaxError\n\nThese errors are one of the simplest to fix since they indicate an error in the syntax of the code. Since JavaScript is a scripting language that is interpreted rather than compiled, these are thrown when the app executes the script that contains the error. In the case of compiled languages, such errors are identified during compilation. Thus, the app binaries are not created until these are fixed.\n\nSome of the common reasons why SyntaxErrors might occur are:\n\n* Missing inverted commas\n* Missing closing parentheses\n* Improper alignment of curly braces or other characters\n\nIt’s a good practice to use a linting tool in your IDE to identify such errors for you before they hit the browser.\n\n### TypeError\n\nTypeError is one of the most common errors in JavaScript apps. This error is created when some value doesn’t turn out to be of a particular expected type. Some of the common cases when it occurs are:\n\n* Invoking objects that are not methods.\n* Attempting to access properties of null or undefined objects\n* Treating a string as a number or vice versa\n\nThere are a lot more possibilities where a TypeError can occur. We’ll look at some famous instances later and learn how to fix them.\n\n### InternalError\n\nThe InternalError type is used when an exception occurs in the JavaScript runtime engine. It may or may not indicate an issue with your code.\n\nMore often than not, InternalError occurs in two scenarios only:\n\n* When a patch or an update to the JavaScript runtime carries a bug that throws exceptions (this happens very rarely)\n* When your code contains entities that are too large for the JavaScript engine (e.g. too many switch cases, too large array initializers, too much recursion)\n\nThe most appropriate approach to solve this error is to identify the cause via the error message and restructure your app logic, if possible, to eliminate the sudden spike of workload on the JavaScript engine.\n\n# Most Common Errors in JavaScript\n\nNow that you understand the common error types, it’s time to look at some of the most common errors you’ll face when writing JavaScript code\n\n### 1. Uncaught RangeError\n\nThis error occurs in Google Chrome under a few various scenarios. First, it can happen if you call a recursive function and it doesn’t terminate. You can check this out yourself in the Chrome Developer Console:\n\n![The error “Uncaught RangeError: Maximum call stack size exceeded” is shown on a red background beside a red cross icon with a recursive function’s code above it.](https://kinsta.com/wp-content/uploads/2021/11/recur-range-error.png)\n\nRangeError example with a recursive function call.\n\nSo to solve such an error, make sure to define the border cases of your recursive function correctly. Another reason why this error happens is if you have passed a value that is out of a function’s parameter’s range. Here’s an example:\n\n![The error “Uncaught RangeError: toExponential() argument must be between 0 and 100” is shown on a red background beside a red cross icon with a toExponential() function call above it.](https://kinsta.com/wp-content/uploads/2021/11/toExponential-range-error.png)\n\nRangeError example with toExponential() call.\n\nThe error message will usually indicate what is wrong with your code. Once you make the changes, it will be resolved.\n\n![num = 4. num.toExponential(2). Output: 4.00e+0.](https://kinsta.com/wp-content/uploads/2021/11/toExponential-error-fixed.png)\n\nOutput for the toExponential() function call.\n\n### 2. Uncaught TypeError: Cannot set property\n\nThis error occurs when you set a property on an undefined reference. You can reproduce the issue with this code:\n\n    var list\n    list.count = 0\n\nHere’s the output that you’ll receive:\n\n![The error “Uncaught TypeError: Cannot set properties of undefined” is shown on a red background beside a red cross icon with a list.count = 0 assignment above it.](https://kinsta.com/wp-content/uploads/2021/11/list-count-type-error.png)\n\nTypeError example.\n\nTo fix this error, initialize the reference with a value before accessing its properties. Here’s how it looks when fixed:\n\n![Setting list.count = 10 after initializing list with {} due to which the output is 10.](https://kinsta.com/wp-content/uploads/2021/11/list-count-fixed.png)\n\nHow to fix TypeError.\n\n### 3. Uncaught TypeError: Cannot read property\n\nThis is one of the most frequently occurring errors in JavaScript. This error occurs when you attempt to read a property or call a function on an undefined object. You can reproduce it very easily by running the following code in a Chrome Developer console:\n\n    var func\n    func.call()\n\nHere’s the output:\n\n![The error “Uncaught TypeError: Cannot read properties of undefined” is shown on a red background beside a red cross icon with func.call() above it.](https://kinsta.com/wp-content/uploads/2021/11/func-call-type-error.png)\n\nTypeError example with undefined function.\n\nAn undefined object is one of the many possible causes of this error. Another prominent cause of this issue can be an improper initialization of the state while rendering the UI. Here’s a real-world example from a React application:\n\n    import React, { useState, useEffect } from \"react\";\n    \n    const CardsList = () => {\n    \n        const [state, setState] = useState();\n    \n        useEffect(() => {\n            setTimeout(() => setState({ items: [\"Card 1\", \"Card 2\"] }), 2000);\n        }, []);\n    \n        return (\n            <>\n                {state.items.map((item) => (\n                    <li key={item}>{item}</li>\n                ))}\n            </>\n        );\n    };\n    \n    export default CardsList;\n\nThe app starts with an empty state container and is provided with some items after a delay of 2 seconds. The delay is put in place to imitate a network call. Even if your network is super fast, you’ll still face a minor delay due to which the component will render at least once. If you try to run this app, you’ll receive the following error:\n\n![The error “undefined is not an object” is shown on a grey background.](https://kinsta.com/wp-content/uploads/2021/11/undefined-type-error-output.png)\n\nTypeError stack trace in a browser.\n\nThis is because, at the time of rendering, the state container is undefined; thus, there exists no property `items` on it. Fixing this error is easy. You just need to provide an initial default value to the state container.\n\n    // ...\n    const [state, setState] = useState({items: []});\n    // ...\n\nNow, after the set delay, your app will show a similar output:\n\n![A bulleted list with two items reading \"Card 1\" and \"Card 2\".](https://kinsta.com/wp-content/uploads/2021/11/cards-list-output.png)\n\nCode output.\n\nThe exact fix in your code might be different, but the essence here is to always initialize your variables properly before using them.\n\n### 4. TypeError: ‘undefined’ is not an object\n\nThis error occurs in Safari when you try to access the properties of or call a method on an undefined object. You can run the same code from above to reproduce the error yourself.\n\n![The error “TypeError: undefined is not an object” shown on a red background beside a red exclamation point icon with func.call() method call above it.](https://kinsta.com/wp-content/uploads/2021/11/func-call-type-error-undefined.png)\n\nTypeError example with undefined function.\n\nThe solution to this error is also the same — make sure that you have initialized your variables correctly and they are not undefined when a property or method is accessed.\n\n### 5. TypeError: null is not an object\n\nThis is, again, similar to the previous error. It occurs on Safari, and the only difference between the two errors is that this one is thrown when the object whose property or method is being accessed is `null` instead of `undefined`. You can reproduce this by running the following piece of code:\n\n    var func = null\n    \n    func.call()\n\nHere’s the output that you’ll receive:\n\n![The \"TypeError: null is not an object\" error message, shown on a red background beside a red exclamation point icon.](https://kinsta.com/wp-content/uploads/2021/11/null-object-error.png)\n\nTypeError example with null function.\n\nSince `null` is a value explicitly set to a variable and not assigned automatically by JavaScript. This error can occur only if you’re trying to access a variable you set `null` by yourself. So, you need to revisit your code and check if the logic that you wrote is correct or not.\n\n### 6. TypeError: Cannot read property ‘length’\n\nThis error occurs in Chrome when you try to read the length of a `null` or `undefined` object. The cause of this issue is similar to the previous issues, but it occurs quite frequently while handling lists; hence it deserves a special mention. Here’s how you can reproduce the problem:\n\n![The error “Uncaught TypeError: Cannot read property 'length' of undefined” shown on a red background beside a red cross icon with myButton.length call above it.](https://kinsta.com/wp-content/uploads/2021/11/myButton-length-type-error.png)\n\nTypeError example with an undefined object.\n\nHowever, in the newer versions of Chrome, this error is reported as `Uncaught TypeError: Cannot read properties of undefined`. This is how it looks now:\n\n![The error “Uncaught TypeError: Cannot read properties of undefined” shown on a red background beside a red cross icon with myButton.length call above it.](https://kinsta.com/wp-content/uploads/2021/11/length-type-error.png)\n\nTypeError example with an undefined object on newer Chrome versions.\n\nThe fix, again, is to ensure that the object whose length you’re trying to access exists and is not set to `null`.\n\n### 7. TypeError: ‘undefined’ is not a function\n\nThis error occurs when you try to invoke a method that doesn’t exist in your script, or it does but can not be referenced in the calling context. This error usually occurs in Google Chrome, and you can solve it by checking the line of code throwing the error. If you find a typo, fix it and check if it solves your issue.\n\nIf you have used the self-referencing keyword `this` in your code, this error might arise if `this` is not appropriately bound to your context. Consider the following code:\n\n    function showAlert() {\n        alert(\"message here\")\n    }\n    \n    document.addEventListener(\"click\", () => {\n        this.showAlert();\n    })\n\nIf you execute the above code, it will throw the error we discussed. It happens because the anonymous function passed as the event listener is being executed in the context of the `document`.\n\nIn contrast, the function `showAlert` is defined in the context of the `window`.\n\nTo solve this, you must pass the proper reference to the function by binding it with the `bind()` method:\n\n    document.addEventListener(\"click\", this.showAlert.bind(this))\n\n### 8. ReferenceError: event is not defined\n\nThis error occurs when you try to access a reference not defined in the calling scope. This usually happens when handling events since they often provide you with a reference called `event` in the callback function. This error can occur if you forget to define the event argument in your function’s parameters or misspell it.\n\nThis error might not occur in Internet Explorer or Google Chrome (as IE offers a global event variable and Chrome attaches the event variable automatically to the handler), but it can occur in Firefox. So it’s advisable to keep an eye out for such small mistakes.\n\n### 9. TypeError: Assignment to constant variable\n\nThis is an error that arises out of carelessness. If you try to assign a new value to a constant variable, you’ll be met with such a result:\n\n![The error “Uncaught TypeError: Assignment to constant variable” shown on a red background beside a red cross icon with func = 6 assignment above it.](https://kinsta.com/wp-content/uploads/2021/11/func-type-error.png)\n\nTypeError example with constant object assignment.\n\nWhile it seems easy to fix right now, imagine hundreds of such variable declarations and one of them mistakenly defined as `const` instead of `let`! Unlike other scripting languages like PHP, there’s minimal difference between the style of declaring constants and variables in JavaScript. Therefore it’s advisable to check your declarations first of all when you face this error. You could also run into this error if you _forget_ that the said reference is a constant and use it as a variable. This indicates either carelessness or a flaw in your app’s logic. Make sure to check this when trying to fix this issue.\n\n### 10. (unknown): Script error\n\nA script error occurs when a third-party script sends an error to your browser. This error is followed by _(unknown) because_ the third-party script belongs to a different domain than your app. The browser hides other details to prevent leaking sensitive information from the third-party script.\n\nYou can not resolve this error without knowing the complete details. Here’s what you can do to get more information about the error:\n\n1.  Add the `crossorigin` attribute in the script tag.\n2.  Set the correct `Access-Control-Allow-Origin` header on the server hosting the script.\n3.  [Optional] If you don’t have access to the server hosting the script, you can consider using a proxy to relay your request to the server and back to the client with the correct headers.\n\nOnce you can access the details of the error, you can then set down to fix the issue, which will probably be with either the third-party library or the network.\n\n##  How to Identify and Prevent Errors\n\nWhile the errors discussed above are the most common and frequent in JavaScript, you’ll come across, relying on a few examples can never be enough. It’s vital to understand how to detect and prevent any type of error in a JavaScript application while developing it. Here is how you can handle errors in JavaScript\n\n### try\n\nThe `try` keyword is used to indicate that a block of code might throw an exception. Its syntax is:\n\n    try {\n        // error-prone code here\n    }\n\nIt’s important to note that a `catch` block must always follow the `try` block to handle errors effectively.\n\n### catch\n\nThe `catch` keyword is used to create a catch block. This block of code is responsible for handling the errors that the trailing `try` block catches. Here is its syntax:\n\n    catch (exception) {\n        // code to handle the exception here\n    }\n\nAnd this is how you implement the `try` and the `catch` blocks together:\n\n    try {\n        // business logic code\n    } catch (exception) {\n        // error handling code\n    }\n\nUnlike C++ or Java, you can not append multiple `catch` blocks to a `try` block in JavaScript. This means that you can not do this:\n\n    try {\n        // business logic code\n    } catch (exception) {\n        if (exception instanceof TypeError) {\n            // do something\n        }\n    } catch (exception) {\n        if (exception instanceof RangeError) {\n        // do something\n        }\n    }\n\nInstead, you can use an `if...else` statement or a switch case statement inside the single catch block to handle all possible error cases. It would look like this:\n\n    try {\n        // business logic code\n    } catch (exception) {\n        if (exception instanceof TypeError) {\n            // do something\n        } else if (exception instanceof RangeError) {\n            // do something else\n        }\n    }\n\n### finally\n\nThe `finally` keyword is used to define a code block that is run after an error has been handled. This block is executed after the try and the catch blocks.\n\n    try {\n        // code that may throw an exception\n    } catch (error) {\n        // code to handle the exception\n    } finally {\n        // code that will be executed regardless\n    }\n  \nAlso, the finally block will be executed regardless of the result of the other two blocks. This means that even if the catch block cannot handle the error entirely or an error is thrown in the catch block, the interpreter will execute the code in the finally block before the program crashes.\n\nTo be considered valid, the try block in JavaScript needs to be followed by either a catch or a finally block. Without any of those, the interpreter will raise a SyntaxError. Therefore, make sure to follow your try blocks with at least either of them when handling errors.  \n"],"9":["ES6 and Modern JavaScript Features","\n# ES6 and Modern JavaScript Features\n\n![](https://miro.medium.com/v2/resize:fit:1080/1*ChC-1PWD1vEXBwV_YRrYWw.jpeg)\n\nJavaScript, being a dynamic and versatile programming language, has undergone significant enhancements with the introduction of ECMAScript 2015 (ES6) and subsequent updates. In this comprehensive exploration, we'll dive into the key features of ES6 and modern JavaScript, providing in-depth explanations and examples.\n\n## 1. let and const Declarations\nES6 introduced block-scoped variables with the `let` and `const` keywords. Unlike `var`, which has function scope, `let` and `const` allow for block-level scoping, reducing unexpected variable hoisting issues.\n\n```javascript\nlet variable = 10;\nconst constantValue = 42;\n```\n\n## 2. Arrow Functions\nArrow functions provide a concise syntax for writing functions, with an implicit return for one-liners. They also inherit the `this` value from the enclosing scope.\n\n```javascript\nconst add = (a, b) => a + b;\n```\n\n## 3. Template Literals\nTemplate literals allow the embedding of expressions inside string literals using backticks. This feature simplifies string interpolation and multiline strings.\n\n```javascript\nconst name = 'John';\nconst greeting = `Hello, ${name}!`;\n```\n\n## 4. Destructuring Assignment\nDestructuring simplifies the extraction of values from arrays or objects, making code more readable and concise.\n\n```javascript\nconst person = { name: 'Alice', age: 30 };\nconst { name, age } = person;\n```\n\n## 5. Default Parameters\nES6 introduces default parameter values for function parameters, reducing the need for explicit checks for undefined values.\n\n```javascript\nfunction greet(name = 'Guest') {\n    console.log(`Hello, ${name}!`);\n}\n```\n\n## 6. Rest and Spread Operators\nThe rest (`...`) and spread operators simplify working with variable numbers of arguments in functions and array/object manipulations.\n\n```javascript\nconst numbers = [1, 2, 3];\nconst sum = (...args) => args.reduce((acc, val) => acc + val, 0);\nconst combined = [...numbers, 4, 5];\n```\n\n## 7. Classes\nES6 introduced a more convenient syntax for creating classes, providing a cleaner and more familiar way to define object-oriented structures.\n\n```javascript\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(`${this.name} makes a sound.`);\n    }\n}\n```\n\n## 8. Modules\nES6 modules enable better code organization by allowing developers to split code into separate files and import/export functionality.\n\n```javascript\n// math.js\nexport const add = (a, b) => a + b;\n\n// app.js\nimport { add } from './math';\nconsole.log(add(2, 3));\n```\n\n## 9. Promises\nPromises simplify asynchronous programming, providing a cleaner alternative to callback-based approaches. They represent the eventual completion or failure of an asynchronous operation.\n\n```javascript\nconst fetchData = () => {\n    return new Promise((resolve, reject) => {\n        // asynchronous operation\n        if (success) {\n            resolve(data);\n        } else {\n            reject(error);\n        }\n    });\n};\n```\n\n## 10. Async/Await\nAsync/Await is built on top of promises, offering a more concise syntax for handling asynchronous code. It enhances readability and reduces callback hell.\n\n```javascript\nconst fetchData = async () => {\n    try {\n        const result = await fetch('https://api.example.com/data');\n        const data = await result.json();\n        console.log(data);\n    } catch (error) {\n        console.error(error);\n    }\n};\n```\n\n## 11. Map and Set Data Structures\nES6 introduces the `Map` and `Set` data structures, providing efficient ways to work with key-value pairs and unique values, respectively.\n\n```javascript\nconst myMap = new Map();\nmyMap.set('key', 'value');\n\nconst mySet = new Set([1, 2, 3, 3, 4]);\n```\n\n## 12. Enhanced Object Literals\nObject literals in ES6 are more powerful, supporting dynamic property names and concise method syntax.\n\n```javascript\nconst dynamicKey = 'color';\nconst car = {\n    make: 'Toyota',\n    [dynamicKey]: 'blue',\n    start() {\n        console.log('Engine started.');\n    },\n};\n```\n\n## 13. Proxies and Reflect\nProxies enable the creation of custom behavior for fundamental operations on objects, providing a powerful tool for metaprogramming.\n\n```javascript\nconst handler = {\n    get(target, property) {\n        console.log(`Accessed ${property}`);\n        return target[property];\n    },\n};\nconst proxy = new Proxy({ x: 10, y: 20 }, handler);\nconsole.log(proxy.x); // Accessed x\n```\n\n## 14. Iterators and Generators\nIterators allow objects to define or customize their iteration behavior. Generators simplify the creation of iterators with a more concise syntax.\n\n```javascript\nfunction* generateNumbers() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst iterator = generateNumbers();\nconsole.log(iterator.next().value); // 1\n```\n\n## 15. Array and Object Methods\nES6 introduced a variety of useful methods for arrays and objects, making common operations more straightforward and expressive.\n\n```javascript\n// Array Methods\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\n\n// Object Methods\nconst person = { name: 'Alice', age: 30 };\nconst keys = Object.keys(person);\n```\n\nIn conclusion, the features introduced in ES6 and modern JavaScript have elevated the language to new heights, offering developers powerful tools to write cleaner, more maintainable, and efficient code. Understanding and leveraging these features is essential for any JavaScript developer aiming to stay at the forefront of web development. As the JavaScript language continues to evolve, embracing and mastering these features will be key to building robust and scalable applications.\n"],"10":["Building a Simple Web Application","\n# Building a Simple Web Application\n\n![](https://craftercms.com/static-assets/images/blog/top-javascript-frameworks.webp)\n\nIn this lesson, we will focus on the hands-on practice part. \n\nWe will build a beginner-friendly JavaScript application that will teach you the basics of creating HTML structure, working with CSS, and finally adding dynamic behaviour using JavaScript.\n\nAll set? Let's get started.\n\n## What Are We Building Today?\n\nWe will be building a project called Colorify. \n\nIt shows a coloured circle on the web page and has some buttons that let you change the colours by clicking on them.\n\nThe image below shows a red circle with three buttons labeled Red, Green, and Yellow. \n\nWhen you click on the Red, the circle colour will turn Red – the same for Green and Yello, respectively.\n\n![image-32](https://www.freecodecamp.org/news/content/images/2023/05/image-32.png)\n\nThe Colorify Project\n\nWe will use the following concepts of web development while creating this application:\n\n* Basic DIV styling with border-radius and centering\n* Laying out Buttons\n* Usage of Template Literals\n* Adding Click Handlers\n* DOM manipulation to set values\n\n## Creating a JavaScript Project Structure\n\nFirst things first, let's create the project structure. Create a folder called `colorify` and create these empty files inside it.\n\n* **index.html**: The HTML file that will contain the skeleton and markup of the application.\n* **index.css**: All the styles and beautification code of the application goes into this CSS file. We will include the CSS file in the HTML file created above.\n* **index.js**: The JavaScript code goes into this file. We will create functions to provide dynamic behaviour to the application. Like the CSS file, we will also include this file in the `index.html` file.\n\n![](https://www.freecodecamp.org/news/content/images/2023/05/unnamed.png)\n\nThe project structure\n\n## Building the HTML Structure\n\nLet's create the HTML page structure. We need a circle and three buttons as part of the project requirements. Copy the following code and paste it inside the `index.html` file:\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Colorify</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n    <script src=\"./index.js\" defer></script>\n</head>\n<body>\n    <div class=\"container\">\n    <h1>Colorify</h1>\n    <p class=\"subheading\">\n        With colorify we want to start\n        learning JavaScript.\n    </p>\n    <div class=\"circle\" id=\"circleID\"></div>\n    <div class=\"action\">\n        <button onclick=\"paint('red')\">Red</button>\n        <button onclick=\"paint('green')\">Green</button>\n        <button onclick=\"paint('yellow')\">Yellow</button>\n    </div>\n    </div>\n</body>\n</html>\n```\n\nThe HTML file has two primary sections:\n\n### The `<head>` section\n\nThe `<head>` section includes meta information like the supported character set, what version of Internet Explorer the page should be rendered using the X-UA-Compatible value, and the viewport information. We also provided a title to the web page.\n\nWe have included the CSS file using the link tag. We used the `href` attribute to point to the `index.css` file. Last, we added the `index.js` script file using the script tag.\n\nNote that we used the `defer` attribute to add the script to the HTML. You can tackle the script loading performance with attributes like defer and async.\n\n```xml\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Colorify</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n    <script src=\"./index.js\" defer></script>\n</head>\n```\n\n### The `<body>` section\n\nThe <body> section defines what will be visible to the users through the browser's rendering process. In the code below, we have first created a container div (a simple div tag with a class called `container`) that wraps all the HTML elements we plan to show on the web page.\n\nFirst is a heading that renders our application name. Next, a paragraph shows some text about the application. Then we have a div with an id called `circleID`. We will use this div to draw a circle. Last, we have three buttons wrapped inside another div.\n\nAlso notice that each of the buttons has a click handler associated with it using the `onClick`.\n\n```xml\n<div class=\"container\">\n    <h1>Colorify</h1>\n    <p class=\"subheading\">\n        With colorify we want to start\n        learning JavaScript.\n    </p>\n    <div class=\"circle\" id=\"circleID\"></div>\n    <div class=\"action\">\n        <button onclick=\"paint('red')\">Red</button>\n        <button onclick=\"paint('green')\">Green</button>\n        <button onclick=\"paint('yellow')\">Yellow</button>\n    </div>\n</div>\n```\n\nLet's run the application at this stage and see the output.\n\nNote that there are multiple ways to run the application. The simplest method is to navigate to the project folder and open the `index.html` file on a web browser. But this approach may only work for some scripts.\n\nThe recommended approach is to run the project as part of a `web server`. \n\nYou can use the `Live Server` extension in the `Visual Studio Code` editor for this.\n\n![](https://www.freecodecamp.org/news/content/images/2023/05/image-35.png)\n\n###### First Stage\n\nHang on! Where is the circle? We do not see the circle because we have just created a container for it but not provided the style elements to make it look like a circle.\n\nAlso, we can do a far better job aligning the HTML elements on the web page. Let's fix these issues using CSS.\n\n## How to Use CSS to Style the Code\n\nOpen the `index.css` file and add the following content to it:\n\n```css\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.circle {\n    border: 1px solid #000000;\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n}\n\n.action {\n    margin: 10px;\n}\n\nbutton {\n    cursor: pointer;\n}\n```\n\nWe have provided a flex layout to the outer container div specifying to centre the elements inside it in a column. We have provided an equal height and width to the circle div to make is appear like a square. Now we curve all side of the border with the the border-radius property to make it look like a circle.\n\n![](https://www.freecodecamp.org/news/content/images/2023/05/image-37.png)\n\n###### Second Stage\n\nNow the app looks much better!\n\nLet's click on the buttons. Oh! We see that an error gets logged into the console panel. The reason is, we have added the click handlers to the buttons but haven't defined the `paint()` function to execute when user clicks on these buttons.\n\n![](https://www.freecodecamp.org/news/content/images/2023/05/image-38.png)\n\n###### Third Stage showing the error\n\nIt's time to define the `paint()` function and get things working.\n\n## Adding Dynamic Behaviour using JavaScript\n\nNow open the `index.js` file and copy paste the following code snippet to it:\n\n    function paint(color) {\n    const circle = document.getElementById('circleID');\n    circle.style = `background-color:${color}`;\n    }\n\nWe have now defined a `paint()` function that we have passed to the `onClick` handlers of the buttons. You may have noticed (in the index.html file), we have passed the respective colours to the `paint()` function when user clicks on a button.\n\nLet's dive into the `paint()` method and understand things.\n\n* First we access the div element that represents the circle. We can identify the element using the id attribute value provided to it, that is `circleID`. We use the DOM method called `document.getElementById` to get it.\n* Once we have the element, we can add a style to it. We are adding a background colour style based on the colour name passed to the function. Note that we are using the template literal expressions here over a regular string concatenation.\n\nThat's it. Now every time a user clicks on a button, the respective colour gets added as a background colour to the circle. It works like the following example:\n\n![](https://www.freecodecamp.org/news/content/images/2023/05/Screen-Recording-2023-05-09-at-3.24.23-PM.gif)\n\n###### Final Stage\n\n## Task for You: Complete the QUIZ\n\nAlright, so you have learned how to create a color changer project using HTML, CSS, and plain JavaScript. \n\nLet's take it to one level further. Here is a task for you to complete.\n\n* Add another button called `Random` beside the existing buttons.\n* When user click on the `Random` button, you must add a random background colour to the circle.\n* You should reuse the existing `random()` function we have seen in the `index.js` file.\n"]},"MySQL":{"1":["Introduction to Databases and MySQL","\n# Introduction to Databases and MySQL\n\n![](https://www.cloudways.com/blog/wp-content/uploads/Main-Image_750x394-57.jpg)\n\n## What is a Database?\n\nA database is used to store a collection of data (which can either be structured or unstructured). Each database has one or more distinct APIs for creating, accessing, managing, searching and replicating the data it holds.\n\nOther kinds of data storages can also be used to manage data, such as files on the file system or large hash tables in memory, but data fetching and writing would not be so fast and easy with those type of systems.\n\nNowadays, we use relational database management systems (RDBMS) to store and manage huge volume of data. In such a database, the data is stored in a structured way with the help of different tables. Relations are established among these tables using primary keys or other keys known as **Foreign Keys**.\n\nA **Relational DataBase Management System (RDBMS)** is a software that −\n\n- Enables you to implement a database with tables, columns and indexes.\n- Guarantees the Referential Integrity between rows of various tables.\n- Updates the indexes automatically.\n- Interprets an SQL query and combines information from various tables.\n\n## RDBMS Terminology\n\nBefore we proceed to explain the MySQL database system, let us revise a few definitions related to the database.\n\n- **Database** − A database is a collection of tables, with related data.\n- **Table** − A table is a matrix with data. A table in a database looks like a simple spreadsheet.\n- **Column** − One column (data element) contains data of one and the same kind, for example the column postcode.\n- **Row** − A row (= tuple, entry or record) is a group of related data, for example the data of one subscription.\n- **Redundancy** − Storing data twice, redundantly to make the system faster.\n- **Primary Key** − A primary key is unique. A key value can not occur twice in one table. With a key, you can only find one row.\n- **Foreign Key** − A foreign key is the linking pin between two tables.\n- **Compound Key** − A compound key (composite key) is a key that consists of multiple columns, because one column is not sufficiently unique.\n- **Index** − An index in a database resembles an index at the back of a book.\n- **Referential Integrity** − Referential Integrity makes sure that a foreign key value always points to an existing row.\n\n## MySQL Database Features\n\nMySQL is a fast, easy-to-use RDBMS being used for many small and big businesses. MySQL is becoming so popular because of the following features\n\n- MySQL is released under an open-source license. So you have nothing to pay to use it.\n- MySQL is a very powerful program in its own right. It handles a large subset of the functionality of the most expensive and powerful database packages.\n- MySQL uses a standard form of the well-known SQL data language.\n- MySQL works on many operating systems and with many languages including PHP, PERL, C, C++, JAVA, etc.\n- MySQL works very quickly and works well even with large data sets.\n- MySQL is very friendly to PHP, the most appreciated language for web development.\n- MySQL supports large databases, up to 50 million rows or more in a table. The default file size limit for a table is 4GB, but you can increase this (if your operating system can handle it) to a theoretical limit of 8 million terabytes (TB).\n- MySQL is customizable. The open-source GPL license allows programmers to modify the MySQL software to fit their own specific environments.\n"],"2":["Data Types in MySQL","\n# Data Types in MySQL\n\n![](https://i.ibb.co/mzvMNSQ/sql.jpg)\n\nA Data Type specifies a particular type of data, like integer, floating points, Boolean, etc. It also identifies the possible values for that type, the operations that can be performed on that type, and the way the values of that type are stored. \n\nIn MySQL, each database table has many columns and contains specific data types for each column.\n\nWe can determine the data type in MySQL with the following characteristics:\n\n* The type of values (fixed or variable) it represents.\n* The storage space it takes is based on whether the values are a fixed-length or variable length.\n* Its values can be indexed or not.\n* How MySQL performs a comparison of values of a particular data type.\n\nMySQL supports a lot number of SQL standard data types in various categories. It uses many different data types that can be broken into the following categories: numeric, date and time, string types, spatial types, and JSON data types.\n\n### Numeric Data Type\n\nMySQL has all essential SQL numeric data types. These data types can include the exact numeric data types (For example, integer, decimal, numeric, etc.), as well as the approximate numeric data types (For example, float, real, and double precision). It also supports BIT datatype to store bit values. In MySQL, numeric data types are categories into two types, either signed or unsigned except for bit data type.\n\nThe following table contains all numeric data types that support in MySQL:\n\n| **Data Type Syntax** | **Description** |\n|---|---|\n| **TINYINT** | It is a very small integer that can be signed or unsigned. If signed, the allowable range is from -128 to 127. If unsigned, the allowable range is from 0 to 255. We can specify a width of up to 4 digits. It takes 1 byte for storage. |\n| **SMALLINT** | It is a small integer that can be signed or unsigned. If signed, the allowable range is from -32768 to 32767. If unsigned, the allowable range is from 0 to 65535. We can specify a width of up to 5 digits. It requires 2 bytes for storage. |\n| **MEDIUMINT** | It is a medium-sized integer that can be signed or unsigned. If signed, the allowable range is from -8388608 to 8388607. If unsigned, the allowable range is from 0 to 16777215. We can specify a width of up to 9 digits. It requires 3 bytes for storage. |\n| **INT** | It is a normal-sized integer that can be signed or unsigned. If signed, the allowable range is from -2147483648 to 2147483647. If unsigned, the allowable range is from 0 to 4294967295. We can specify a width of up to 11 digits. It requires 4 bytes for storage. |\n| **BIGINT** | It is a large integer that can be signed or unsigned. If signed, the allowable range is from -9223372036854775808 to 9223372036854775807. If unsigned, the allowable range is from 0 to 18446744073709551615. We can specify a width of up to 20 digits. It requires 8 bytes for storage. |\n| **FLOAT(m,d)** | It is a floating-point number that cannot be unsigned. You can define the display length (m) and the number of decimals (d). This is not required and will default to 10,2, where 2 is the number of decimals, and 10 is the total number of digits (including decimals). Decimal precision can go to 24 places for a float type. It requires 2 bytes for storage. |\n| **DOUBLE(m,d)** | It is a double-precision floating-point number that cannot be unsigned. You can define the display length (m) and the number of decimals (d). This is not required and will default to 16,4, where 4 is the number of decimals. Decimal precision can go to 53 places for a double. Real is a synonym for double. It requires 8 bytes for storage. |\n| **DECIMAL(m,d)** | An unpacked floating-point number that cannot be unsigned. In unpacked decimals, each decimal corresponds to one byte. Defining the display length (m) and the number of decimals (d) is required. Numeric is a synonym for decimal. |\n| **BIT(m)** | It is used for storing bit values into the table column. Here, M determines the number of bit per value that has a range of 1 to 64. |\n| **BOOL** | It is used only for the true and false condition. It considered numeric value 1 as true and 0 as false. |\n| **BOOLEAN** | It is Similar to the BOOL. |\n\n\n### Date and Time Data Type:\n\nThis data type is used to represent temporal values such as date, time, datetime, timestamp, and year. Each temporal type contains values, including zero. When we insert the invalid value, MySQL cannot represent it, and then zero value is used.\n\nThe following table illustrates all date and time data types that support in MySQL:\n\n| **Data Type Syntax** | **Maximum Size** | **Explanation** |\n|---|---|---|\n| **YEAR** | 24 | Year value as 2 digits or 4 digits. | The default is 4 digits. It takes 1 byte for storage. |\n| **DATE** | Values range from '1000-01-01' to '9999-12-31'. | Displayed as 'yyyy-mm-dd'. It takes 3 bytes for storage.  |\n| **TIME** | Values range from '-838:59:59' to '838:59:59'. | Displayed as 'HH:MM:SS'. It takes 3 bytes plus fractional seconds for storage. |\n| **DATETIME** | Values range from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. | Displayed as 'yyyy-mm-dd hh:mm:ss'. It takes 5 bytes plus fractional seconds for storage. |\n| **TIMESTAMP** | Values range from '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' TC. | Displayed as 'YYYY-MM-DD HH:MM:SS'. It takes 4 bytes plus fractional seconds for storage. |\n\n### String Data Types:\n\nThe string data type is used to hold plain text and binary data, for example, files, images, etc. MySQL can perform searching and comparison of string value based on the pattern matching such as LIKE operator, Regular Expressions, etc.\n\nThe following table illustrates all string data types that support in MySQL:\n\n| **Data Type Syntax** | **Maximum Size** | **Explanation** |\n|---|---|---|\n| **CHAR** | It can have a maximum size of 255 characters. | Here size is the number of characters to store. Fixed-length strings. Space padded on the right to equal size characters. |\n| **VARCHAR** | It can have a maximum size of 255 characters. | Here size is the number of characters to store. Variable-length string. |\n| **TINYTEXT** | It can have a maximum size of 255 characters. | Here size is the number of characters to store. |\n| **TEXT** | Maximum size of 65,535 characters. | Here size is the number of characters to store. |\n| **MEDIUMTEXT** | It can have a maximum size of 16,777,215 characters. | Here size is the number of characters to store. |\n| **LONGTEXT** | It can have a maximum size of 4GB or 4,294,967,295 characters. | Here size is the number of characters to store. |\n| **BINARY** | It can have a maximum size of 255 characters. | Here size is the number of binary characters to store. Fixed-length strings. Space padded on the right to equal size characters.\n| **VARBINARY** | It can have a maximum size of 255 characters. | Here size is the number of characters to store. Variable-length string.\n| **ENUM** | It takes 1 or 2 bytes that depend on the number of enumeration values. An ENUM can have a maximum of 65,535 values. | It is short for enumeration, which means that each column may have one of the specified possible values. It uses numeric indexes (1, 2, 3…) to represent string values. |\n| **SET** | It takes 1, 2, 3, 4, or 8 bytes that depends on the number of set members. It can store a maximum of 64 members. | It can hold zero or more, or any number of string values. They must be chosen from a predefined list of values specified during table creation. |\n\n### Binary Large Object Data Types (BLOB):\n\nBLOB in MySQL is a data type that can hold a variable amount of data. They are categories into four different types based on the maximum length of values can hold.\n\nThe following table shows all Binary Large Object data types that support in MySQL:\n\n| **Data Type Syntax** | **Maximum Size** |\n|---|---|\n| **TINYBLOB** | It can hold a maximum size of 255 bytes. |\n| **BLOB** | It can hold the maximum size of 65,535 bytes. |\n| **MEDIUMBLOB** | It can hold the maximum size of 16,777,215 bytes. |\n| **LONGBLOB** | It can hold the maximum size of 4gb or 4,294,967,295 bytes. |\n\n### JSON Data Type\n\nMySQL provides support for native JSON data type from the version v5.7.8. This data type allows us to store and access the JSON document quickly and efficiently.\n\nThe JSON data type has the following advantages over storing JSON-format strings in a string column:\n\n1. It provides automatic validation of JSON documents. If we stored invalid documents in JSON columns, it would produce an error.\n2. It provides an optimal storage format.\n"],"3":["Creating Tables","\n# Creating Tables\n\nIn the MySQL relational database system, SQL is used to store data in the form of structured tables. These tables consist of fields and records. \n\nA field represents a column that defines the type of data to be stored in a table, and a record is a row containing the actual data. \n\nMySQL provides various queries to interact with the data, allowing you to create tables, update them, delete them, etc.\n\n## Create Table Statement\n\nTo create a table in MySQL RDBMS in prompt, `CREATE TABLE` statement is used.\n\nOne can create any number of tables in an SQL Server database. \n\nHowever, a limit exists on the number of objects that can be present in a database. Including tables, views, indexes etc., a database cannot exceed 2,147,483,647 objects. \n\nTherefore, a single user-defined table can define a maximum of 1024 columns.\n\nA MySQL query to create a table must define the structure of a table. The structure consists of the name of a table and names of columns in the table with each column's data type. \n\nNote that each table must be uniquely named in a database.\n\nTo begin with, the table creation command requires the following details −\n\n* Name of the table.\n* Name of the columns.\n* Definitions for each column.\n\n**Syntax:**\n\nFollowing is the basic SQL syntax to create a MySQL table −\n\n    CREATE TABLE table_name(\n        column1 datatype,\n        column2 datatype,\n        .....\n        columnN datatype,\n        PRIMARY KEY( one or more columns )\n    );\n\n### Creating Tables from Command Prompt\n\nWe can create a MySQL table from the command prompt by defining its structure and columns.\n\nFollowing are the steps to perform to create a MySQL table from Command Prompt:\n\n* Firstly, open the command prompt and enter the following command: **mysql -u root -p** to access the MySQL database management system.\n    \n* After entering the command, enter the password to log into the MySQL server.\n    \n* Then, we can start creating a table using the respected SQL CREATE TABLE query.\n    \n**Example:**\n\nIn the following example, we are creating a MySQL table named **CUSTOMERS** from command prompt.\n\n    CREATE TABLE CUSTOMERS (\n        NAME VARCHAR(20) NOT NULL,\n        ID INT AUTO_INCREMENT,\n        AGE INT NOT NULL,\n        ADDRESS CHAR (25),\n        SALARY DECIMAL (18, 2),\n        PRIMARY KEY (ID)\n    );\n\nHere, a few items need explanation −\n\n* Field Attribute **AUTO_INCREMENT** in MySQL automatically increments the value in the ID column by one for each new record you add. It starts from the next available number.\n    \n* Field Attribute **NOT NULL** is being used because we do not want this field to be NULL. So, if a user tries to create a record with a NULL value in that field, then MySQL will raise an error.\n    \n* Keyword **PRIMARY KEY** is used to define a column as a primary key. It ensures that every record in that column is unique. You can also use it for multiple columns by separating them with commas.\n    \n**NOTE** − MySQL does not terminate a command until you give a semicolon (;) at the end of SQL command.\n\n**Output:**\n\nWhen we execute the above query, the output is obtained as follows −\n\n```\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n### Verification\n\nWe can verify if the table has been created successfully or not using the following query −\n\n    mysql> DESC CUSTOMERS;\n\nThe above query will show the structure and description of the CUSTOMERS table,\n\n| **Field** | **Type** | **Null** | **Key** | **Default** | **Extra** |\n|:---:|:---:|:---:|:---:|:---:|:---:|\n| ID | int | NO | PRI | NULL | auto_increment |\n| NAME | varchar(20) | NO | NULL |\n| AGE | int | NO | NULL |\n| ADDRESS | char(25) | YES | NULL |\n| SALARY | decimal(18,2) | YES | NULL |\n\n### Creating a Table from an Existing Table\n\nWe can create a duplicate table of an existing table including its structure and data, by using the SQL CREATE TABLE and SELECT statements. \n\nThe duplicate table has the same columns and their definitions, and it also gets filled with the same data as the original table.\n\n**Note** − As it is a completely new table, any changes made in it would not be reflected in the original table.\n\n**Syntax:**\n\nFollowing is the syntax for creating a table from another table −\n\n```\nCREATE TABLE NEW_TABLE_NAME AS\nSELECT [column1, column2...columnN]\nFROM EXISTING_TABLE_NAME\n[WHERE CONDITION];\n```\n\nHere, column1, column2... are the fields of the existing table and the same would be used to create fields of the new table. And the WHERE clause is optional to use.\n\n**Example:**\n\nLet us consider an existing table **CUSTOMERS** in the TUTORIALS database −\n\n    mysql> USE TUTORIALS;\n    mysql> SELECT * FROM CUSTOMERS;\n\nFollowing is the CUSTOMERS table,\n\n| **ID** | **NAME** | **AGE** | **ADDRESS** | **SALARY** |\n|:---:|:---:|:---:|:---:|:---:|\n| 1 | Ramesh | 32  | Ahmedabad | 2000.00 |\n| 2 | Khilan | 25  | Delhi | 1500.00 |\n| 3 | kaushik | 23 | Kota | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai | 6500.00 |\n| 5 | Hardik | 27 | Bhopal | 8500.00 |\n| 6 | Komal | 22 | Hyderabad | 4500.00 |\n| 7 | Muffy | 24 | Indore | 10000.00 |\n\nNow, Using the following query, we are creating a new table named **SAMPLE** with the same structure and records as CUSTOMERS.\n\n    CREATE TABLE SAMPLE AS\n    SELECT * FROM CUSTOMERS;\n\n**Output:**\n\nAs we can see in the output, the table SAMPLE is created successfully.\n\n```\nQuery OK, 7 rows affected (0.03 sec)\nRecords: 7  Duplicates: 0  Warnings: 0\n```\n\n### The `IF NOT EXISTS` clause\n\nIf you try to create a table with an existing name an error will be generated −\n\n    CREATE TABLE Employee(Name VARCHAR(255));\n    ERROR 1050 (42S01): Table 'employee' already exists\n\nIf you use the `IF NOT EXISTS` clause along with the CREATE statement as shown below a new table will be created and if a table with the given name, already exists the query will be ignored.\n\n    CREATE TABLE Test(Name VARCHAR(255));\n    Query OK, 0 rows affected (0.69 sec)\n"],"4":["Basic SQL Commands","\n# Basic SQL Commands\n\n![](https://blog.cloudsigma.com/wp-content/uploads/An-Introduction-to-Queries-in-MySQL.jpg)\n\nSQL commands are the instructions used to communicate with a database to perform tasks, functions, and queries with data.\n\nSQL commands can be used to search the database and to do other functions like creating tables, adding data to tables, modifying data, and dropping tables.\n\nHere is a list of Basic SQL commands (sometimes called clauses) you should know if you are going to work with SQL.\n\n### SELECT and FROM\n\nThe `SELECT` part of a query determines which columns of the data to show in the results. There are also options you can apply to show data that is not a table column.\n\nThe example below shows three columns `SELECT`ed `FROM` the “student” table and one calculated column. The database stores the studentID, FirstName, and LastName of the student. We can combine the First and the Last name columns to create the FullName calculated column.\n\n    SELECT studentID, FirstName, LastName, FirstName + ' ' + LastName AS FullName\n    FROM student;\n\n**Output:**\n\n```\n+-----------+-------------------+------------+------------------------+\n| studentID | FirstName         | LastName   | FullName               |\n+-----------+-------------------+------------+------------------------+\n|         1 | Monique           | Davis      | Monique Davis          |\n|         2 | Teri              | Gutierrez  | Teri Gutierrez         |\n|         3 | Spencer           | Pautier    | Spencer Pautier        |\n|         4 | Louis             | Ramsey     | Louis Ramsey           |\n|         5 | Alvin             | Greene     | Alvin Greene           |\n|         6 | Sophie            | Freeman    | Sophie Freeman         |\n|         7 | Edgar Frank \"Ted\" | Codd       | Edgar Frank \"Ted\" Codd |\n|         8 | Donald D.         | Chamberlin | Donald D. Chamberlin   |\n|         9 | Raymond F.        | Boyce      | Raymond F. Boyce       |\n+-----------+-------------------+------------+------------------------+\n9 rows in set (0.00 sec)\n```\n\n### CREATE TABLE\n\n`CREATE TABLE` does just what it sounds like: it creates a table in the database. You can specify the name of the table and the columns that should be in the table.\n\n    CREATE TABLE table_name (\n        column_1 datatype,\n        column_2 datatype,\n        column_3 datatype\n    );\n\n\n### WHERE\n\nThe `WHERE` clause is used to limit the number of rows returned.\n\nConditions: **(** `AND`, `OR`, `IN`, `BETWEEN`, and `LIKE` **)**\n\nAs an example, first we will show you a `SELECT` statement and results _without_ a `WHERE` statement. Then we will add a `WHERE` statement that uses all five qualifiers above.\n\n    SELECT studentID, FullName, sat_score, rcd_updated FROM student;\n\n**Output:**\n\n```\n+-----------+------------------------+-----------+---------------------+\n| studentID | FullName               | sat_score | rcd_updated         |\n+-----------+------------------------+-----------+---------------------+\n|         1 | Monique Davis          |       400 | 2017-08-16 15:34:50 |\n|         2 | Teri Gutierrez         |       800 | 2017-08-16 15:34:50 |\n|         3 | Spencer Pautier        |      1000 | 2017-08-16 15:34:50 |\n|         4 | Louis Ramsey           |      1200 | 2017-08-16 15:34:50 |\n|         5 | Alvin Greene           |      1200 | 2017-08-16 15:34:50 |\n|         6 | Sophie Freeman         |      1200 | 2017-08-16 15:34:50 |\n|         7 | Edgar Frank \"Ted\" Codd |      2400 | 2017-08-16 15:35:33 |\n|         8 | Donald D. Chamberlin   |      2400 | 2017-08-16 15:35:33 |\n|         9 | Raymond F. Boyce       |      2400 | 2017-08-16 15:35:33 |\n+-----------+------------------------+-----------+---------------------+\n9 rows in set (0.00 sec)\n```\n\nNow, we'll repeat the `SELECT` query but we'll limit the rows returned using a `WHERE` statement.\n\n    STUDENT studentID, FullName, sat_score, recordUpdated\n    FROM student\n    WHERE (studentID BETWEEN 1 AND 5 OR studentID = 8)\n            AND\n            sat_score NOT IN (1000, 1400);\n\n```\n+-----------+----------------------+-----------+---------------------+\n| studentID | FullName             | sat_score | rcd_updated         |\n+-----------+----------------------+-----------+---------------------+\n|         1 | Monique Davis        |       400 | 2017-08-16 15:34:50 |\n|         2 | Teri Gutierrez       |       800 | 2017-08-16 15:34:50 |\n|         4 | Louis Ramsey         |      1200 | 2017-08-16 15:34:50 |\n|         5 | Alvin Greene         |      1200 | 2017-08-16 15:34:50 |\n|         8 | Donald D. Chamberlin |      2400 | 2017-08-16 15:35:33 |\n+-----------+----------------------+-----------+---------------------+\n5 rows in set (0.00 sec)\n```\n\n### UPDATE\n\nTo update a record in a table you use the `UPDATE` statement.\n\nUse the `WHERE` condition to specify which records you want to update. It is possible to update one or more columns at a time. The syntax is:\n\n    UPDATE table_name\n    SET column1 = value1,\n        column2 = value2, ...\n    WHERE condition;\n\nHere is an example updating the Name of the record with Id 4:\n\n    UPDATE Person\n    SET Name = “Elton John”\n    WHERE Id = 4;\n\nYou can also update columns in a table by using values from other tables. Use the `JOIN` clause to get data from multiple tables. The syntax is:\n\n    UPDATE table_name1\n    SET table_name1.column1 = table_name2.columnA\n        table_name1.column2 = table_name2.columnB\n    FROM table_name1\n    JOIN table_name2 ON table_name1.ForeignKey = table_name2.Key\n\nHere is an example updating Manager of all records:\n\n    UPDATE Person\n    SET Person.Manager = Department.Manager\n    FROM Person\n    JOIN Department ON Person.DepartmentID = Department.ID\n\n### AVG()\n\n“Average” is used to calculate the average of a numeric column from the set of rows returned by a SQL statement.\n\nHere is the syntax for using the function:\n\n    SELECT groupingField, AVG(num_field)\n    FROM table1\n    GROUP BY groupingField\n\nHere’s an example using the student table:\n\n    SELECT studentID, FullName, AVG(sat_score)\n    FROM student\n    GROUP BY studentID, FullName;\n\n### AS\n\nIt allows you to rename a column or table using an alias.\n\n    SELECT user_only_num1 AS AgeOfServer, (user_only_num1 - warranty_period) AS NonWarrantyPeriod FROM server_table\n\nThis results in output as below.\n\n```\n+-------------+------------------------+\n| AgeOfServer | NonWarrantyPeriod      |\n+-------------+------------------------+\n|         36  |                     24 |\n|         24  |                     12 |\n|         61  |                     49 |\n|         12  |                      0 |\n|          6  |                     -6 |\n|          0  |                    -12 |\n|         36  |                     24 |\n|         36  |                     24 |\n|         24  |                     12 |\n+-------------+------------------------+\n```\n\nYou can also use AS to assign a name to a table to make it easier to reference in joins.\n\n    SELECT ord.product, ord.ord_number, ord.price, cust.cust_name, cust.cust_number FROM customer_table AS cust\n\n    JOIN order_table AS ord ON cust.cust_number = ord.cust_number\n\nThis results in output as below.\n\n```\n+-------------+------------+-----------+-----------------+--------------+\n| product     | ord_number | price     | cust_name       | cust_number  |\n+-------------+------------+-----------+-----------------+--------------+\n| RAM         |   12345    |       124 | John Smith      |  20          |\n| CPU         |   12346    |       212 | Mia X           |  22          |\n| USB         |   12347    |        49 | Elise Beth      |  21          |\n| Cable       |   12348    |         0 | Paul Fort       |  19          |\n| Mouse       |   12349    |        66 | Nats Back       |  15          |\n| Laptop      |   12350    |       612 | Mel S           |  36          |\n| Keyboard    |   12351    |        24 | George Z        |  95          |\n| Keyboard    |   12352    |        24 | Ally B          |  55          |\n| Air         |   12353    |        12 | Maria Trust     |  11          |\n+-------------+------------+-----------+-----------------+--------------+\n```\n\n### ORDER BY\n\n`ORDER BY` gives us a way to sort the result set by one or more of the items in the `SELECT` section. Here is an SQL sorting the students by FullName in descending order. The default sort order is ascending (`ASC`) but to sort in the opposite order (descending) you use `DESC`.\n\n    SELECT studentID, FullName, sat_score\n    FROM student\n    ORDER BY FullName DESC;\n\n### COUNT\n\n`COUNT` will count the number of rows and return that count as a column in the result set.\n\nHere are examples of what you would use COUNT for:\n\n- Counting all rows in a table (no group by required)\n- Counting the totals of subsets of data (requires a Group By section of the statement)\n\nThis SQL statement provides a count of all rows. Note that you can give the resulting COUNT column a name using “AS”.\n\n    SELECT count(*) AS studentCount FROM student;\n\n### DELETE\n\n`DELETE` is used to delete a record in a table.\n\nBe careful. You can delete all records of the table or just a few. Use the `WHERE` condition to specify which records you want to delete. The syntax is:\n\n    DELETE FROM table_name\n    WHERE condition;\n\nHere is an example deleting from the table Person the record with Id 3:\n\n    DELETE FROM Person\n    WHERE Id = 3;\n\n### INSERT\n\n`INSERT` is a way to insert data into a table.\n\n    INSERT INTO table_name (column_1, column_2, column_3)\n    VALUES (value_1, 'value_2', value_3);\n\n### LIKE\n\n`LIKE` is used in a `WHERE` or `HAVING` (as part of the `GROUP BY`) to limit the selected rows to the items when a column has a certain pattern of characters contained in it.\n\nThis SQL will select students that have `FullName` starting with “Monique” or ending with “Greene”.\n\n    SELECT studentID, FullName, sat_score, rcd_updated\n    FROM student\n    WHERE\n        FullName LIKE 'Monique%' OR\n        FullName LIKE '%Greene';\n\n**Output:**\n\n```\n+-----------+---------------+-----------+---------------------+\n| studentID | FullName      | sat_score | rcd_updated         |\n+-----------+---------------+-----------+---------------------+\n|         1 | Monique Davis |       400 | 2017-08-16 15:34:50 |\n|         5 | Alvin Greene  |      1200 | 2017-08-16 15:34:50 |\n+-----------+---------------+-----------+---------------------+\n2 rows in set (0.00 sec)\n```\n\nYou can place `NOT` before `LIKE` to exclude the rows with the string pattern instead of selecting them. \n\nThis SQL excludes records that contain “cer Pau” and “Ted” in the FullName column.\n\n    SELECT studentID, FullName, sat_score, rcd_updated\n    FROM student\n    WHERE FullName NOT LIKE '%cer Pau%' AND FullName NOT LIKE '%\"Ted\"%';\n\n**Output:**\n\n```\n+-----------+----------------------+-----------+---------------------+\n| studentID | FullName             | sat_score | rcd_updated         |\n+-----------+----------------------+-----------+---------------------+\n|         1 | Monique Davis        |       400 | 2017-08-16 15:34:50 |\n|         2 | Teri Gutierrez       |       800 | 2017-08-16 15:34:50 |\n|         4 | Louis Ramsey         |      1200 | 2017-08-16 15:34:50 |\n|         5 | Alvin Greene         |      1200 | 2017-08-16 15:34:50 |\n|         6 | Sophie Freeman       |      1200 | 2017-08-16 15:34:50 |\n|         8 | Donald D. Chamberlin |      2400 | 2017-08-16 15:35:33 |\n|         9 | Raymond F. Boyce     |      2400 | 2017-08-16 15:35:33 |\n+-----------+----------------------+-----------+---------------------+\n7 rows in set (0.00 sec)\n```\n\n"],"5":["Advanced SQL Queries","\n# Advanced SQL Commands\n\n![](https://miro.medium.com/v2/resize:fit:900/1*jRP97Bxh0I_6bSlnZ_lrVg.png)\n\nAdvanced SQL commands are a set of statements and operations that go beyond the basic functionalities of creating, reading, updating, and deleting data. \n\nThese commands are designed to provide users with more powerful tools for managing the structure of a database, handling complex queries, and ensuring data integrity. \n\nHere's an introduction to some of the advanced SQL commands:\n\n### ALTER TABLE\n\nChanges the structure of a table. Here is how you would add a column to a database:\n\n    ALTER TABLE table_name\n    ADD column_name datatype;\n\n### CHECK\n\nThe `CHECK` constraint is used to limit the value range that can be placed in a column.\n\nIf you define a `CHECK` constraint on a single column it allows only certain values for this column. If you define a `CHECK` constraint on a table it can limit the values in certain columns based on values in other columns in the row.\n\nThe following SQL creates a `CHECK` constraint on the “Age” column when the “Persons” table is created. The `CHECK` constraint ensures that you can not have any person below 18 years.\n\n    CREATE TABLE Persons (\n        ID int NOT NULL,\n        LastName varchar(255) NOT NULL,\n        FirstName varchar(255),\n        Age int,\n        CHECK (Age>=18)\n    );\n\nTo allow naming of a `CHECK` constraint, and for defining a `CHECK` constraint on multiple columns, use the following SQL syntax:\n\n    CREATE TABLE Persons (\n        ID int NOT NULL,\n        LastName varchar(255) NOT NULL,\n        FirstName varchar(255),\n        Age int,\n        City varchar(255),\n        CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n    );\n\n### GROUP BY\n\n`GROUP BY` allows you to combine rows and aggregate data.\n\nHere is the syntax of `GROUP BY`:\n\n    SELECT column_name, COUNT(*)\n    FROM table_name\n    GROUP BY column_name;\n\n### HAVING\n\n`HAVING` allows you to filter the data aggregated by the `GROUP BY` clause so that the user gets a limited set of records to view.\n\nHere is the syntax of `HAVING`:\n\n    SELECT column_name, COUNT(*)\n    FROM table_name\n    GROUP BY column_name\n    HAVING COUNT(*) > value;\n\n### INNER JOIN\n\n`JOIN`, also called Inner Join, selects records that have matching values in two tables.\n\n    SELECT * FROM A x JOIN B y ON y.aId = x.Id\n\n### LEFT JOIN\n\nA `LEFT JOIN` returns all rows from the left table, and the matched rows from the right table. Rows in the left table will be returned even if there was no match in the right table. The rows from the left table with no match in the right table will have `null` for right table values.\n\n    SELECT * FROM A x LEFT JOIN B y ON y.aId = x.Id\n\n### RIGHT JOIN\n\nA `RIGHT JOIN` returns all rows from the right table, and the matched rows from the left table. Opposite of a left join, this will return all rows from the right table even where there is no match in the left table. Rows in the right table that have no match in the left table will have `null` values for left table columns.\n\n    SELECT * FROM A x RIGHT JOIN B y ON y.aId = x.Id\n\n### FULL OUTER JOIN\n\nA `FULL OUTER JOIN` returns all rows for which there is a match in either of the tables. So if there are rows in the left table that do not have matches in the right table, those will be included. Also, if there are rows in the right table that do not have matches in the left table, those will be included.\n\n    SELECT Customers.CustomerName, Orders.OrderID\n    FROM Customers\n    FULL OUTER JOIN Orders\n    ON Customers.CustomerID=Orders.CustomerID\n    ORDER BY Customers.CustomerName\n"],"6":["Indexing and Optimization","\n# Indexing and Optimization\n\n![](https://blog.devart.com/wp-content/uploads/2021/03/How-to-Connect-to-MySQL-Server.jpg)\n\nTable indexing is a critical aspect of optimizing database performance in MySQL, especially for data-driven websites and applications like WordPress. Proper indexing can significantly improve the speed and efficiency of a website, leading to a better user experience. \n\nIn this lesson, we'll delve into the importance of table indexing in MySQL, and how to determine if indexing is the root cause of slow website or WordPress performance.\n\n## What is Table Indexing?\n\nTable indexing is a database optimization technique that allows for faster retrieval of data from tables. An index is a data structure that maps the values in one or more columns of a table to the corresponding rows. Indexes can be thought of as a reference system, which enables the database management system (DBMS) to quickly locate and retrieve specific rows based on their indexed column values.\n\n### Why is Table Indexing Important in MySQL?\n\n1. **Faster Data Retrieval**: When a query is executed, the DBMS scans through the table to find the relevant rows. Without indexing, this process can be time-consuming, especially for large tables. Indexes allow the DBMS to quickly narrow down the search scope and retrieve the required data more efficiently.\n    \n2. **Improved Query Performance**: Indexing enhances the performance of SQL queries, particularly those with WHERE and JOIN clauses. By utilizing indexes, the DBMS can filter and sort data more efficiently, leading to faster query execution.\n    \n3. **Enhanced Scalability**: As websites and applications grow, the amount of data stored in the database increases. Proper indexing ensures that the performance of the database remains optimal even as data volumes expand.\n    \n\n### Diagnosing Slow Website Performance Due to Indexing Issues\n\nIf your Website is experiencing slow performance, there could be several reasons, including issues with indexing. To determine if indexing is the problem, follow these steps:\n\n**Analyze Slow Queries**: \n- Use tools like the MySQL Slow Query Log or third-party plugins like Query Monitor for WordPress to identify slow-performing queries. \n- Look for queries with long execution times and analyze them for potential indexing improvements.\n    \n**Evaluate Existing Indexes**: \n- Examine the current indexes in your database by using the \"SHOW INDEXES\" command in MySQL. \n- Look for redundant or duplicate indexes, as they can negatively impact performance. \n- Also, check if any crucial indexes are missing that could speed up frequently executed queries.\n    \n**Optimize Queries**: \n- Review your SQL queries and identify any potential optimizations, such as rewriting them to take advantage of existing indexes or eliminating unnecessary JOINs.\n    \n**Test Index Changes**: \n- Implement the suggested index changes on a development or staging environment and monitor the performance improvements. \n- Be cautious when making changes to production databases, as improper indexing can also degrade performance.\n    \n**Monitor Performance**: \n- Regularly monitor your website and database performance to identify any new performance bottlenecks. \n- As data volumes and usage patterns change over time, it's essential to update and optimize indexes accordingly.\n    \n\n### How to Check if a Query is Using an Index\n\nDetermining whether a query is using an index is essential for optimizing database performance. \n\nMySQL offers the `EXPLAIN` statement, which provides information about how the DBMS executes a given query. \n\nBy analyzing the output of the EXPLAIN statement, you can identify whether an index is being used and, if necessary, make adjustments to your queries or indexes to optimize performance.\n\nFollow these steps to check if a query is using an index:\n\n**Execute the EXPLAIN Statement**: To use the EXPLAIN statement, simply prefix your query with the keyword \"EXPLAIN\". \n\nFor example, if your original query is:  \n    \n    SELECT * FROM users WHERE email = 'john@example.com';\n\nYou would execute the following query:      \n    \n    EXPLAIN SELECT * FROM users WHERE email = 'john@example.com';\n\n**Analyze the Output**: The EXPLAIN statement returns a tabular output with information about the query execution plan. \n\nThe columns in the output provide insights into how MySQL processes the query. \n\nThe most relevant columns for our purpose are:\n    * key: The name of the index being used, if any.\n    * type: The join type, which can indicate the type of index access method used.\n    * rows: The estimated number of rows MySQL needs to examine to execute the query.\n\n**Check the 'key' Column**: If the 'key' column displays the name of an index, it means that the query is using that index. \n\nA NULL value in the 'key' column indicates that no index is being used for the query.\n    \n**Evaluate the 'type' Column**: The 'type' column can provide further information about how the index is being utilized. \n\nSome values to look for include:   \n    * 'ref': Indicates that the query is using an index to look up rows based on a single value.\n    * 'range': Suggests that the query is using an index to scan a range of values.\n    * 'index': Implies that the query is scanning the entire index to find matching rows, which may not be very efficient.\n\n**Consider the 'rows' Column**: The 'rows' column shows the estimated number of rows MySQL needs to examine to execute the query. \n\nA high number of rows may indicate that the index is not being used effectively, or the query needs optimization.\n\nBy using the `EXPLAIN` statement and analyzing its output, you can determine if your query is using an index and identify potential areas for optimization. \n\nRemember that not all queries require an index, and in some cases, a full table scan might be more efficient. \n\nThe key is to carefully examine the query execution plan and make adjustments as needed to ensure optimal performance.\n\n### Winding Up\n\nIn conclusion, table indexing plays a crucial role in optimizing database performance, especially for MySQL-powered Websites. \n\nBy understanding the significance of indexing, identifying slow-performing queries, and ensuring that your queries are using indexes effectively, you can deliver a seamless and responsive user experience. \n\nRegular monitoring and optimization of your database, along with adjusting indexes as needed, will help maintain peak performance and accommodate the growth of your website or application. \n\nRemember to use tools like the MySQL Slow Query Log, Query Monitor, and the `EXPLAIN` statement to diagnose potential indexing issues and make data-driven decisions to improve your website's overall performance.\n"],"7":["Stored Procedures and Functions","\n# Stored Procedures and Functions\n\n![](https://www.biltektasarim.com/biltek3/dosyalar/blog_manset/mysql.webp)\n\nBy definition, the stored procedure is a set of declarative SQL statements stored in the MySQL server. It is something like a function in any programming language.\n\nWhen you create a function body in a programming language, you can call that function anywhere just using its name without writing the whole code again. \n\nSimilar to it, a stored procedure is a set of statements that perform a certain task and you can call that stored procedure whenever you want just by using the name.\n\nLet’s take an example again. Suppose you have a complex and long query that you use in your application more than two or three times. \n\nIt is not good practice to write the same long query multiple times. Instead, you can create a stored procedure and inside that procedure, you write those SQL statements. \n\nSo whenever you want to fire that query, you can simply call the stored procedure using its name.\n\nNow, let’s see how we can create the stored procedure.\n\n## Creating the Stored Procedure\n\nWe can create a stored procedure using the CREATE PROCEDURE statement. Following is the complete syntax-\n\n    CREATE PROCEDURE [IF NOT EXISTS] proc_name([parameters])\n    [characteristics]\n    procedure_body\n    \n    parameters:\n    [ IN | OUT | INOUT ] param_name type\n    \n    characteristic: {\n        COMMENT 'string'\n    | LANGUAGE SQL\n    | [NOT] DETERMINISTIC\n    | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n    | SQL SECURITY { DEFINER | INVOKER }\n    }\n    \n    procedure_body:\n        Valid SQL routine statement\n\nWhere,\n\n* CREATE PROCEDURE – It is a statement to create a stored procedure\n* IF NOT EXISTS – It will create a new stored procedure only if the current procedure name doesn’t exist already in the database.\n* proc_name – Any name you can give to the procedure.\n* parameters – There are three types of parameters – IN, OUT, INOUT. The IN parameter specifies the input value that you are passing to the procedure from the procedure call. The OUT parameter is the value that the procedure will return. On the other hand, the INOUT performs combined work of the IN and OUT parameters.\n* Characteristics – You can choose any of the characteristics from the above-mentioned set.\n* procedure_body – In the body, you write valid SQL statements. You can write a simple statement such as SELECT or INSERT, or you can write multiple statements using a BEGIN END block.\n\nThis way you can create a stored procedure. To invoke the stored procedure, the CALL statement is used. Following is the syntax to call the procedure.\n\n```\nCALL proc_name([parameters])\n```\n\nRemember to pass the correct arguments to the procedure call. If you specify the parameters in the procedure definition but don’t mention them in the procedure call then you will get an error.\n\n## Why Should We Use Stored Procedures?\n\nThere are numerous advantages of using stored procedures in your application. Below we have listed some top pros of stored procedure.\n\n* Stored procedures help reduce the network traffic between an application and a MySQL server. \n* It is because the application sends only the procedure name to the MySQL server instead of sending lengthy queries/statements.\n* Instead of writing the same logic multiple times in your application, you can write it in the stored procedure as a centralized function and you can call that procedure again and again without duplication. This makes your database more consistent\n* The stored procedure makes the database more secure by granting only required privileges to the application.\n\n## What is a Stored Function?\n\nA MySQL stored function is a set of SQL instructions/statements that perform a certain task and return a single value. \n\nYou can think of a stored function as any regular function in programming languages such as C, C++ or Java.\n\nStored Functions are somewhat similar to stored functions. Such as both are used to execute a block of code/statements. \n\nHowever, there are multiple differences between them which are as follows-\n\n* Stored functions can return only a single value.\n* We can call a stored function from the SQL statement.\n* Stored functions only have one type of parameter which is the IN. However, it is set to default and you can’t / don’t specify the input type.\n* Stored functions can not produce results set as stored procedures do\n\n### When Do We Need a Stored Function?\n\nStored functions are very useful when you want to write complex business logic and return a single value. You can call the stored function from a SQL statement.\n\nFor example,\n\n    SELECT colName, FunName(Parameter) FROM table_name;\n\n### Syntax of MySQL Stored Function\n\nThe syntax of the MySQL stored function is very identical to the stored procedure. \n\nThere are only a few differences. See below syntax to define a stored function.\n\n    DELIMITER //\n    \n    CREATE FUNCTION function_name(\n    [  param1 type,\n        param2 type,… ]\n    )\n    RETURNS datatype\n    [[NOT] DETERMINISTIC]\n    BEGIN\n    -- statements\n    END $$\n    \n    DELIMITER ;\n\nWhere,\n\n* DELIMITER – It changes the default operator which indicates the end of the statement.\n* CREATE FUNCTION – It creates a stored function.\n* function_name – You can give any name to the stored function which follows the naming rules in MySQL.\n* param1, param2 – The names of parameters along with their datatypes.\n* RETURNS datatype – It specifies the datatype of the return value.\n* [NOT] DETERMINISTIC – You can specify if the function is deterministic or non-deterministic. The deterministic function always returns the same output when the same input is provided. On the other hand, the non-deterministic function always returns a different output when the same input is provided. By default, the non-deterministic is set if nothing is specified.\n* BEGIN…END – You can write one or more valid SQL statements inside the BEGIN…END block. Inside the BEGIN…END block, you must specify at least one RETURN statement that returns a value to the calling program. As soon as the RETURN statement is executed, the function terminates immediately.\n\n### Example of a MySQL Stored Function\n\nNow we will take an example to show how a stored function is created. For that, we will use a “accounts” table of the following description and data.\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/accounts-table-description-1.png)\n\n###### Accounts Table Description\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/accounts-table-data-1.png)\n\n###### Accounts Table Data\n\nNow, we will create a stored function that will return the status of the balance. \n\nSuch as, if the balance is below Rs100 then we should get “too low” status. Let’s do it!\n\n    CREATE FUNCTION getStatus(balance FLOAT) RETURNS VARCHAR(10) DETERMINISTIC BEGIN DECLARE status VARCHAR(10);\n    \n    IF balance < 100 THEN\n    SET status=\"Too Low\";\n    \n    ELSEIF balance < 500 THEN\n    SET status=\"Low\";\n    \n    ELSEIF balance < 1000 THEN\n    SET status=\"Good\";\n    \n    ELSEIF balance > 1000 THEN\n    SET status=\"Ideal\";\n    \n    END IF;\n    RETURN (status);\n\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/create-getStatus-stored-function.png)\n\n###### Create GetStatus Stored Function\n\nHere, we have specified the parameter “balance” which will be sent from the calling program.\n\nThen we have used the IF-THEN-ELSE statement to get the status of the account balance. \n\nWe are storing the status of the balance in a variable called “status”. Finally, we return the value of the status variable.\n\nLet’s now test the stored function by calling it from the SQL statement.\n\n    SELECT *, getStatus(balance) as status FROM accounts;\n\nHere, we display the table data using the SELECT * statement and call the function with the parameter of the balance column value. The output table will create an extra column to show the status of the account balance.\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/call-getStatus-stored-function.png)\n\n###### Call GetStatus Stored Function\n\nAs you can see, we have received the proper output depending on the balance of the user account.\n"],"8":["Triggers in MySQL","\n# Triggers in MySQL\n\n![](https://www.cloudways.com/blog/wp-content/uploads/Main-Image_750x394-57.jpg)\n\nIn MySQL, a trigger is a stored program invoked automatically in response to an events that occurs in the associated table. \n\nFor example, you can define a trigger that is invoked automatically before a new row is inserted into a table.\n\nMySQL supports triggers that are invoked in response to the `INSERT`, `UPDATE` or `DELETE` event.\n\nThe SQL standard defines two types of triggers: row-level triggers and statement-level triggers.\n\n* A row-level trigger is activated for each row that is inserted, updated, or deleted. For example, if a table has 100 rows inserted, updated, or deleted, the trigger is automatically invoked 100 times for the 100 rows affected.\n* A statement-level trigger is executed once for each transaction regardless of how many rows are inserted, updated, or deleted.\n\nMySQL supports only row-level triggers. It doesn’t support statement-level triggers.\n\n![](https://www.mysqltutorial.org/wp-content/uploads/2019/09/MySQL-Triggers.png)\n\n## Advantages of triggers\n\n* Triggers provide another way to check the integrity of data.\n* Triggers handle errors from the database layer.\n* Triggers give an alternative way to run scheduled tasks. By using triggers, you don’t have to wait for the scheduled events to run because the triggers are invoked automatically before or after a change is made to the data in a table.\n* Triggers can be useful for auditing the data changes in tables.\n\n## Disadvantages of triggers\n\n* Triggers can only provide extended validations, not all validations. For simple validations, you can use the `NOT NULL`, `UNIQUE`, `CHECK` and `FOREIGN KEY` constraints.\n* Triggers can be difficult to troubleshoot because they execute automatically in the database, which may not be visible to the client applications.\n* Triggers may increase the overhead of the MySQL server.\n\n## Types of Triggers in MySQL\n\nTriggers respond to the events such as `INSERT`, `DELETE`, and `UPDATE`. \n\nHowever, the response can be either BEFORE or AFTER the event. That’s why there are six types of triggers available in MySQL as follows.\n\n* BEFORE INSERT- This trigger activates before the new row is inserted using INSERT, REPLACE or LOAD DATA statements.\n* AFTER INSERT – This trigger activates after the row is inserted in the table.\n* BEFORE UPDATE – This trigger activates before the data is updated in the table.\n* AFTER UPDATE – This trigger activates after the data is updated in the table.\n* BEFORE DELETE – This trigger activates before the data is deleted from the table.\n* AFTER DELETE – This trigger activates after the data is deleted from the table.\n\nNote that, statements such as `TRUNCATE TABLE` and `DROP TABLE` do not activate the triggers because they do not use the `DELETE` clause.\n\n## Syntax of MySQL Triggers\n\nYou can create triggers in MySQL using `CREATE TRIGGER` statement and it is somewhat similar to creating stored procedures. \n\nFollowing is the syntax to create triggers.\n\n    CREATE\n    TRIGGER [IF NOT EXISTS] trigger_name\n    trigger_time trigger_event\n    ON table_name FOR EACH ROW\n    [trigger_order]\n    trigger_body\n\nWhere,\n\n* **CREATE TRIGGER** – statement to create trigger\n* **IF NOT EXISTS** – This statement prevents an error if the trigger with the same name is already present in same database schema.\n* **trigger_name** – Any trigger name you specify. No two triggers with same name can be created for same database.\n* **trigger_time** – This is the time that specifies when to activate the trigger. It can be BEFORE or AFTER that indicates if the trigger will activate before or after each row to be modified.\n* **trigger_event** – Trigger event indicates what operation will activate the trigger. Following is the list of trigger events that are allowed in the MySQL.\n    * `INSERT` – When insert operation occurs (new row gets inserted), the trigger activates. Note that, triggers can be activated by INSERT, LOAD DATA and REPLACE statements as well.\n    * `UPDATE` – Whenever a row gets updated, the trigger activates.\n    * `DELETE` – Whenever a row is deleted using DELETE or REPLACE statements, the trigger activates. Note that, TRUNCATE TABLE and DROP TABLE statements do not activates the trigger because they do not use DELETE statement.\n* **table_name** – Name of the table you want to create the trigger for.\n* **trigger_order** – You can have multiple triggers on the same table. However, triggers activate in the order they were created. If you want to activate the trigger in particular order, you can specify using the FOLLOWS and PRECEDES statement. To activate the new trigger before exisiting one, use PRECEDES; whereas FOLLOWS clause is used to activate the new trigger after exisiting trigger.\n* **trigger_body** – The set of operations to perform after trigger activates are grouped together in trigger_body. To execute multiple statements, you can use BEGIN and END statements.\n\nThe values of the row data can be accessed by the trigger body. To separate the row values that are and will be updated by BEFORE and AFTER statements, use the NEW and OLD keywords.\n"],"9":["Security and Permissions","\n# Security and Permissions\n\n![](https://1gr.cz/fotky/lidovky/21/092/vidw/MEV49a9a9_shuterstock.jpg)\n\nMySQL provides a comprehensive security and permissions system to ensure that only authorized users can access and manipulate databases, tables, and other objects within the MySQL server. \n\nThis system is crucial for protecting sensitive data and maintaining the integrity of the database. \n\nLet's dive into the components and mechanisms of MySQL's security and permissions system:\n\n## Authentication\nMySQL supports various authentication methods to verify the identity of users attempting to connect to the server. \n\nThese methods include:\n- Native MySQL authentication: Users are authenticated using credentials stored within the MySQL `mysql.user` table.\n- Pluggable Authentication: MySQL allows integrating with external authentication systems like LDAP, PAM (Pluggable Authentication Modules), or Windows Active Directory for user authentication.\n\n## User Accounts\nMySQL uses user accounts to control access to databases and other resources. \n\nEach user account consists of a username and authentication credentials (password or other authentication tokens). \n\nUser accounts are stored in the `mysql.user` table, where each record represents a user account. Key attributes of user accounts include:\n\n- **Username**: A unique identifier for each user account.\n    \n- **Password**: The authentication credential used to verify the user's identity. MySQL stores passwords as hashed values to enhance security.\n\n- **Host**: Specifies the client host from which the user can connect. This allows restricting user access based on the originating host or IP address.\n\n- **Privileges**: Defines the actions the user is allowed to perform within the MySQL server. Privileges are granted at various levels, such as global, database-level, table-level, or even column-level.\n\n\n## Privileges\nPrivileges determine what actions users are allowed to perform on databases, tables, and other objects within the MySQL server. \n\nMySQL provides a granular privilege system, allowing administrators to grant or revoke specific privileges at different levels of granularity. \n\nKey privileges include:\n- Global Privileges: These privileges apply to the entire MySQL server, such as `CREATE USER`, `RELOAD`, `SHUTDOWN`, etc.\n- Database-Level Privileges: These privileges apply to specific databases, such as `CREATE`, `SELECT`, `INSERT`, `UPDATE`, `DELETE`, etc.\n- Table-Level Privileges: These privileges apply to specific tables within a database, such as `SELECT`, `INSERT`, `UPDATE`, `DELETE`, etc.\n- Column-Level Privileges: In some cases, MySQL supports column-level privileges, allowing fine-grained control over access to individual columns within a table.\n\n\n### Granting Privileges\nAdministrators can grant privileges to users using the `GRANT` statement, specifying the privileges and the objects to which they apply. For example:\n\n    GRANT SELECT, INSERT ON database_name.* TO 'username'@'hostname';\n\nThis statement grants the `SELECT` and `INSERT` privileges on all tables within the `database_name` to the user `'username'` when connecting from the specified hostname.\n\n### Revoking Privileges\nSimilarly, administrators can revoke previously granted privileges using the `REVOKE` statement. For example:\n\n    REVOKE INSERT ON database_name.* FROM 'username'@'hostname';\n\nThis statement revokes the `INSERT` privilege on all tables within the `database_name` from the user `'username'` when connecting from the specified hostname.\n\n### Fine-Grained Access Control\nMySQL's privilege system allows for fine-grained access control, enabling administrators to specify precisely which operations users can perform on databases, tables, and even individual columns. \n\nThis level of granularity enhances security by limiting users' access to only the necessary resources.\n\n### Secure Password Management\nMySQL encourages secure password management practices by supporting password policies and providing utilities for password management. \n\nThis includes features like password expiration, password strength validation, and password rotation.\n\n### Account Locking and Expiry\nMySQL allows administrators to lock or expire user accounts, preventing unauthorized access. \n\nThis is particularly useful for temporarily disabling accounts or enforcing periodic password changes as part of security policies.\n\n### Monitoring and Auditing\nRegular monitoring and auditing of user account activity are essential for maintaining database security. \n\nMySQL provides tools and utilities for monitoring user connections, queries, and privilege usage. \n\nAdditionally, MySQL Enterprise Edition offers advanced auditing features, including audit logging and analysis tools, to track and analyze user activity for compliance and security purposes.\n\n### Access Control Lists (ACL)\nMySQL maintains an Access Control List to keep track of which users have been granted which privileges. \n\nThis ACL is consulted every time a user attempts to perform an action on the database server to determine whether the action should be allowed or denied.\n\n### SSL/TLS Support\nMySQL provides support for encrypted connections using SSL/TLS, ensuring that data exchanged between the client and server is encrypted, thereby enhancing security.\n\n### Audit Logging\nMySQL Enterprise Edition offers an Audit Log Plugin that allows administrators to log and monitor user activity, providing an additional layer of security and compliance with regulatory requirements.\n\n### Firewall and IP Whitelisting\nAdministrators can configure firewall rules or IP whitelists to control which clients are allowed to connect to the MySQL server, adding an extra layer of security.\n\nMySQL's security and permissions system offers a robust framework for controlling access to databases and ensuring data integrity. \n\nBy leveraging authentication, user accounts, privileges, and other mechanisms, administrators can enforce security policies tailored to their specific requirements. \n\nRegular monitoring and auditing of user activity can further enhance security and compliance.\n"],"10":["Backup and Recovery","\n# Backup and Recovery\n\n![](https://i.ibb.co/1MNY1S3/backup.webp)\n\nThe backing up of a database is a crucial part of a Database Management System. \n\nAs a database administrator, it is important to learn how to create a backup of databases. \n\nBut the question arises, is why? What is the need for backups? The answer to this is, We need to create a backup of databases for reasons like when we are testing the database or at the time of migrating a database.\n\n### Database Backup using MySQLDumps\n\nIt is believed for this lesson that you already have a database and tables for which you need to create the backup. \n\nIn this lesson, we’ll be using a database named work which consists of two tables(employee and sample).\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/database.png)\n\nTo create a backup of a database using MySQLDump, we must know the path of MySQLDump. \n\nNow, When you installed MySQL, it was installed inside the program files. \n\nYou can go to C drive and you’ll find the program files folder, inside the program file folder, search for MySQL and enter into the MySQL folder.\n\nWhen you’ll enter into the MySQL folder you’ll get three different folders, you need to select MySQL Server 8.0. Remember, that 8.0 is the version and it may vary according to the version you’ve installed. \n\nAfter getting into the MySQL Server folder, you’ll find a Bin folder, and within the bin folder exists the MySQLDump file.\n\nThe path is mentioned, \n\n```\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\n```\n\nCopy the path for the bin folder, or you can directly copy the above path because this is the default path for most of us.\n\nNow, we’ll open a command prompt, when you search for CMD on search are, do select to open cmd as administrator. Make sure to use cmd as an administrator only, as the process needs administrator privileges.\n\nAfter opening the command prompt, write:\n\n```\ncd/\n```\n\nWe need to start from the root directory, now we’ll enter into the bin folder of MySQL:\n\n```\ncd C:Program FilesMySQLMySQL Server 8.0\bin\n```\n\nNow, that we are inside the bin folder, it’s time to log into MySQLDump, to do that follow the below-mentioned command:\n\n```\nmysqldump -u root -p work > workdump.sql\n```\n\n* **-u** is for MySQL username, in this case, our username is root, you write the name of your MySQL username.\n* **-p** is for the password, after writing -p we will write the name of the database we want the backup for, in our case we have the database name as work. \n\nAfter that, we’ll write the location path where we want to save the backup and the name with which it will be saved. \n\nWe’ve written the name of the archive only because we want to store it within the MySQL Server folder.\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/backup-database-using-mysqldump.png)\n\nIf you didn’t receive any error message then it means that the backup was successful. \n\nYou can check for the backup file in the directory or folder which you mentioned in the command.\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/successful-backup.png)\n\nThis is how you create a backup for any database in MySQL using MySQLDump.\n\n## Recovering a database\n\nNow that we have backed up our database, this is the time to drop that database and see if we could recover it back, which we in turn will.\n\nTo drop a database, use the below-mentioned statement:\n\n    DROP DATABASE work;\n\nWe are dropping the work database here as we created the backup of this database only.\n\n![](https://mysqlcode.com/wp-content/uploads/2022/03/database-Drop.png)\n\nNow when you need to restore a database, you must first create a new database, and then only you’ll be able to restore all the tables within the database. \n\nSo we’ll create a new database and it will again be called work.\n\n    CREATE DATABASE work;\n\nNow we’ll open the command prompt as Administrator and get into the bin directory of MySQL Server, the path is mentioned below:  \n\n```\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\n```\n\nNow we will insert the backed up data into the new database which we have created, it’s exactly how we backup the data just one thing will change, the sign between the database name and the dump file will change to less than sign.\n\n```\nmysqldump -u root -p work < workdump.sql\n```\n\nNow that you know how to backup and restore your MySQL database, you can rest assured that your data is safe and can be recovered if necessary. \n\nRemember to always back up your database regularly so that you have a recent copy in case of disaster. \n\nThat’s how we create a backup and restore it using MySQLDump.\n"]},"HTML":{"1":["Introduction to HTML","\n# Introduction to HTML\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191217202846/Programming-for-Beginners-10-Best-HTML-Coding-Practices-You-Must-Know.png)\n\nHTML is an abbreviation for HyperText Markup Language.\n\nThis acronym is composed of two main parts: HyperText and Markup Language.\n\n### What does “HyperText” mean?\n\nHyperText refers to the hyperlinks or simply links that an HTML page may contain. \n\nA HyperText can contain a link to a website, web content, or a web page.\n\n### What is a “Markup language”?\n\nA markup language is a computer language that consists of easily understood keywords, names, or tags that help format the overall view of a page and the data it contains. \n\nIn other words, it refers to the way tags are used to define the page layout and elements within the page.\n\nSince we now know what HyperText and Markup Language mean, we can also understand what these terms mean when put together.\n\n### What is HTML?\n\nHTML or HyperText Markup Language is a markup language used to describe the structure of a web page. \n\nIt uses a special syntax or notation to organize and give information about the page to the browser.\n\nHTML consists of a series of elements that tell the browser how to display the content. These elements label pieces of content such as \"this is a heading\", \"this is a paragraph\", \"this is a link\", and so on. \n\nThey usually have opening and closing tags that surround and give meaning to each piece of content.\n\nThere are different tag options you can use to wrap text to show whether the text is a heading, a paragraph, or a list. \n\nTags look like `<h1>` (opening tag) and `</h1>` (closing tag).\n\nLet's see some other examples:\n  \n    <body>\n        <h1> This is for the top level heading; and in most cases it is a page title</h1> \n\n        <p>\n            A paragraph. This is where the information we would like to communicate to the viewer goes. \n            This can be as long or short as we would like. Note: A paragraph always starts on a new line, \n            and browsers automatically add a single blank space (or line) before and after a paragraph.\n        </p> \n\n        <ol> \n            <li>Here goes the first item</li> \n            <li>Here goes the second item</li> \n            <li>Here goes the third item</li> \n        </ol>  \n    </body>\n\n## A Brief History of HTML\n\nThe first version of HTML was written in 1993; since then, many different versions of HTML have been released, allowing developers to create interactive web pages with animated images, sound, and gimmicks of all kinds.\n\nThe most widely used version throughout the 2000's was HTML 4.01, which became an official standard in December 1999.\n\nAnother version, XHTML, was a rewrite of HTML as an XML language.\n\nIn 2014, HTML5 was released, and it took over from previous versions of HTML. This version includes new elements and capabilities added to the language. \n\nThese new features allow you to create more powerful and complex websites and web apps, while keeping the code easier to read.\n\n## Why Learn HTML?\n\nHTML is the foundation of all web pages. Without HTML, you would not be able to organize text or add images or videos to your web pages. HTML is the root of everything you need to know to create great-looking web pages!\n\nAs the name suggests, hypertext refers to cross-referencing (or linking) between different related sections or webpages on the world-wide-web.\n\nHyperText mark-up language is a standard mark-up language that allows developers to structure, link, and present webpages on the world-wide-web. So it is important to know the structure and layout of the website that you would like to build.\n\n## Prerequisites for Learning HTML\n\nHTML is a relatively easy language and does not require any formal education. So basically, there are no prerequisites for learning it.\n\nHTML is text-based computer coding, and anyone can learn and run it, as long as they understand letters and basic symbols. So, all you need is basic computer knowledge and the ability to work with files.\n\nOf course, any knowledge of other programming languages will enhance your abilities with HTML and web development, but this is not a prerequisite for learning HMTL.\n\n### What a Simple HTML Page Looks Like\n\n    \n    <!DOCTYPE html> \n    <html>\n    <head>\n        <title>Introduction to HTML</title>\n    </head>\n    <body>\n        <h1>This is my First Heading</h1>\n        <p>This is my first paragraph.</p>\n    </body>\n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/p1gzMHr/intro.png)\n\nAlright let's see what's going on here:\n    \nThe `<!DOCTYPE html>` declaration indicates that this document is an HTML5 document.\n\nThe `<html>` element is the root element of an HTML page.\n\nThe `<head>` element contains meta information about the HTML page.\n\nThe `<title>` element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab).\n\nThe `<body>` element defines the document's body and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.\n\nThe `<h1>` element defines a large heading.\n\nThe `<p>` element defines a paragraph. \n\n**Note:** In HTML, an opening tag begins a section of page content, and a closing tag ends it.\n\nFor example, to markup a section of text as a paragraph, you would open the paragraph with an opening paragraph tag, which is \"`<p>`\", and close it with a closing paragraph tag, which is \"`</p>`\".\n\nIn closing tags, the element is always preceded by a forward slash (\"/\").\n"],"2":["Headings and Paragraphs","\n# Headings and Paragraphs\n\n![](https://i.ibb.co/4fhQwMr/heading-and-paragraph.jpg)\n\nHeadings and paragraphs are some common HTML elements that we see on all websites. \n\nIn HTML, `<h1>` to` <h6>` tags represent headings and are used to describe the contents below them. The paragraph or the `<p>` tag in HTML helps users define a paragraph. \n\nThis blog explains HTML heading and paragraph tags and their basic implementation through examples.\n\n## What is an HTML Heading?\n\nAn HTML heading is a title or subheading that we want to display on a webpage. \n\nIn HTML, there are six headings defined using `<h1>` to `<h6>` tags. h1 is the highest level or the main heading, while h6 is the least important.\n\nThe text inside the heading tags `<h1` shows on the browser. The size of the text depends on the heading tag.\n\n**HTML Headings Syntax:**\n\n    <h1>TEXT</h1>\n\n**Output:**\n\n![](https://i.ibb.co/H2XTFng/heading.jpg)\n\n**Explanation:**\n\n* `<h1>`: It is the start tag for the H1 heading.\n* `TEXT`: This text will appear as the main heading on a visitor’s screen.\n*  `</h1>`: This is the closing tag for the H1 heading.\n\n### Why are HTML Headings are Important?\n\nHeadings in HTML are helpful for both search engines and site visitors. Here are the benefits:\n\n* Search Engines: HTML headings help search engines understand and index the structure of a web page. The `<h1>…</h1>` tag is for main headings. It is followed by `<h2>` through `<h6>` tags that denote subheadings.\n* Site Visitors: They also help site visitors quickly scan and understand a page. Proper headings on a web page help visitors determine if the content is relevant to them.\n\n### HTML Heading Tags\n\nThe following are the six HTML tags for different heading sizes.\n\n    <h1>Heading 1</h1> - (Most Important) \n    <h2>Heading 2</h2>\n    <h3>Heading 3</h3>\n    <h4>Heading 4</h4>\n    <h5>Heading 5</h5>\n    <h6>Heading 6</h6> - (Least Important)\n\n**Here is a simple example in HTML to display the H1 through H6 headings on a web page:**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n        <title>Heading in  HTML</title>  \n    </head>  \n    <body>  \n            <h1>This is Heading 1</h1> \n            <h2>This is Heading 2</h2>\n            <h3>This is Heading 3</h3>\n            <h4>This is Heading 4</h4>\n            <h5>This is Heading 5</h5>\n            <h6>This is Heading 6</h6> \n        </body>  \n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/VDZQzd4/headings.jpg)\n\n## What is an HTML Paragraph?\n\nParagraphs tags or `<p>` tags in HTML help us create paragraphs on a web page. On web browsers, paragraphs display as blocks of text separated from adjacent blocks by blank lines, white spaces, or first-line indentation.\n\nYou can use a `<p>` tag followed by the content you want to display in your paragraph and a `</p>`. Whenever the web browser comes across a `<p>` tag, it starts its contents on a new line.\n\n**HTML Paragraph Syntax:**\n\n    <p>Paragraph Content</p>\n\n**Output:**\n\n![](https://i.ibb.co/8cRdVZ5/2022-04-Paragraph-Syntax.jpg)\n\n**Explanation:**\n\n* `<p>`: Start tag for the paragraph.\n* Paragraph Content: The text will appear as a paragraph on a visitor’s screen.\n* `</h1>`: It is the closing tag for the paragraph.\n\n### Why are HTML Paragraph Tags Important?\n\nHTML paragraphs help us in multiple ways, such as:\n\n* They make a web page more readable by giving it a structural view.\n* Paragraphs can consist of different types of related content, such as text, images, forms, and more.\n\n**Here is a simple example in HTML to display different paragraphs on a web page:**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n    <title>Paragraph in  HTML</title>  \n    </head>  \n    <body>  \n        <p>This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1. This is paragraph 1.</p> \n        <p>This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2. This is paragraph 2.</p> \n        <p>This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3. This is paragraph 3.</p> \n    </body>  \n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/r6L4WWC/paragraphs.jpg)\n\n### HTML Paragraph Tag Attributes\n\nThe paragraph tag in HTML supports some attributes, which include:\n\n| Attribute | Value |\n|--|--|\n| align | left, right, center, justify |\n\n**Example:**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n        <title>Paragraph Align Attribute</title>  \n    </head>  \n    <body>  \n        <p style=\"text-align: left;\">This</p>\n        <p style=\"text-align: center;\">Is </p>\n        <p style=\"text-align: right;\">Paragraph Alignment</p>\n    </body>  \n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/Yj7LfQK/paragraph-alignment.jpg)\n\n## HTML Line Break\n\nHTML line break tags help when we don’t want to start a new paragraph but want the sentence to start from a new line. \n\nUsing the `<br>` tag, we can break the sentence continuation and make it begin on a new line.\n\n**Example:**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n        <title>HTML Line Break</title>  \n    </head>  \n    <body>  \n        <p>This is an example to show how the line break tag can break the sentence continuation and make it start from a new line. <br>This helps when we want our content to start on a new line but do not want to start a new paragraph. </p>\n    </body>  \n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/LCBRWww/line-break.jpg)\n"],"3":["Text Formatting","\n# Text Formatting Elements\n\n![](https://kinsta.com/de/wp-content/uploads/sites/5/2020/11/web-design-courses.jpg)\n\nText formatting in HTML refers to the use of markup elements to modify the appearance and style of text content within a webpage. \n\nThese elements allow developers to apply various styles, such as bold, italic, underline, and strikethrough, to text elements to enhance readability and convey emphasis or meaning.\n\nThese tags are divided into two categories:\n- Physical Tags\n- Semantic Tags\n\n### Physical Tags\n\nThese tags are presentational. They don't add extra meaning to the text. For example,\n\n    <p> This text is <i>italic</i>.</p>\n\n**Output:**\n\n![Italic text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-italic.png)\n\nHere, the `<i>` is only for text styling and has no other meaning.\n\n### Semantic Tags\n\nThese tags add some special meaning to the text along with adding style to the text. For example,\n\n    <p> This text is <em>emphasized</em>.</p>\n\n**Output:**\n\n![Italic text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-emphasis.png)\n\nHere, the `<em>` is used to emphasize text. Screen readers also emphasize text inside the `<em>` tag while dictating.\n\n**Note:** The formatting tags are mostly inline tags like `<b>`, `<u>`, `<i>`, etc and are used for styling texts.\n\n## HTML Formatting tags\n\nBelow are listed the formatting tags available in the latest version of HTML.\n\n* `<b>` tag - Bold Text\n* `<i>` tag - Italic Text\n* `<u>` tag - Underlined Text\n* `<strong>` tag - Strong Text\n* `<em>` tag - Emphasized Text\n* `<mark>` tag - Highlighted Text\n* `<sup>` tag - Superscript Text\n* `<sub>` tag - Subscript Text\n* `<del>` tag - Deleted Text\n* `<ins>` tag - Inserted Text\n* `<big>` tag - Big Text\n* `<small>` tag - Small Text\n\n### HTML `<b>` and `<strong>` tag\n\nThe HTML `<b>` is a physical tag used to simply make text bold.\n\n    <p> This text is <b>bold</b>.</p>\n\n**Output:**\n\n![Bold text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-bold.png)\n\nThe HTML `<strong>` tag is a semantic tag that is used to signify that the text inside the tag is of higher importance. This is shown by making the text bold.\n\n    <p> The text is <strong>strong</strong>.</p>\n\n**Output:**\n\n![Bold text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-strong.png)\n\n### HTML `<i>` and `<em>` tag\n\nThe HTML `<i>` tag is a physical tag used to make the text italic. It is used to indicate foreign text, scientific nomenclature, thoughts, etc.\n\n    <p> This text is <i>italic</i>.</p>\n\n**Output:**\n\n![Italic text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-italic.png)\n\nThe HTML `<em>` tag is a semantic tag that is used to signify that the text inside the tag is being emphasized. \n\nIt is a semantic tag as opposed to `<i>`, which doesn't hold any semantic meaning.\n\n    <p> This text is <em>emphasized</em>.</p>\n\n**Output:**\n\n![Italic text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-emphasis.png)\n\n### HTML `<u>` tag\n\nThe HTML `<u>` tag is a physical tag used to make the text underlined.\n\n    <p> This text is <u>underlined</u>.</p>\n\n**Output:**\n\n![Underlined text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-underline.png)\n\n### HTML `<mark>` tag\n\nThe HTML `<mark>` tag is a physical tag that is used to highlight text.\n\n    <p> This text is <mark>marked</mark>.</p>\n\n**Output:**\n\n![Underlined text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-mark.png)\n\n### HTML `<sup>` and `<sub>` tag\n\nThe HTML `<sup>` tag is used to create superscript text. The text is placed half a character height above other text and is a size smaller.\n\n    <p> This text is <sup>superscripted</sup>.<p>\n\n**Output:**\n\n![Superscript text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-superscript.png)\n\nThe HTML `<sub>` tag is used to create subscript text. The text is placed half a character height below other text and is a size smaller.\n\n    <p> This text is <sub>subscripted</sub>.<p>\n\n**Output:**\n\n![Subscript text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-subscript.png)\n\n### HTML `<ins>` and `<del>` tag\n\nThe HTML `<del>` tag is a semantic tag used to represent that the text is deleted or changed.\n\n    <p> This text is <del>deleted</del>.</p>\n\n**Output:**\n\n![Deleted text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-del.png)\n\nThe HTML `<ins>` tag is a semantic tag used to represent that the text has been inserted in the document. The `<ins>` tag generally follows some deleted text.\n\n    <p> This text is <del>deleted</del> <ins>inserted</ins>.</p>\n\n**Output:**\n\n![Inserted text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-ins.png)\n\n### HTML `<big>` and `<small>` tag\n\nThe HTML `<big>` tag is a physical tag used to make text one font size larger than the surrounding text.\n\n    <p> This text is <big>bigger</big>.</p>\n\n**Output:**\n\n![Bigger text with ](https://www.programiz.com/sites/tutorial2program/files/html-formatting-big.png)\n\nThe HTML `<small>` tag is a physical tag used to make text one font size smaller than the surrounding text.\n\n    <p> This text is <small>smaller</small>.</p>\n\n**Output:**\n\n![Small text with ](https://www.programiz.com/sites/tutorial2program/files/Html-formatting-small.png)"],"4":["Unveiling Lists","\n# Unveiling Lists\n\n![](https://www.techfry.com/images/articles/html/html-lists.jpg)\n\nA list refers to any information displayed in a logical or linear form. It is a series of items written together in a meaningful group or sequence and marked by bullet points, numbers, etc. \n\nIn HTML, there are three list types, each with a specific purpose and tag. In this guide, we will **lean what is list in HTML**. We will understand different HTML list tags and how to create **HTML lists**.\n\n## What is an HTML List?\n\nList in HTML helps to display a list of information semantically.\n\n**There are three types of lists in HTML**\n\n* Unordered list or Bulleted list (`<ul>`)\n* Ordered list or Numbered list (`<ol>`)\n* Description list or Definition list (`<dl>`)\n\n### Unordered List\n\nIn HTML unordered list, the list items have no specific order or sequence. An unordered list is also called a Bulleted list, as the items are marked with bullets. \n\nIt begins with the `<ul>` tag and and closes with a `</ul>` tag. The list items begin with the `<li>` tag and end with `</li>` tag.\n\n**Syntax**\n\n    <ul>List of Items</ul>\n\n**Example of HTML Unordered List**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Unordered List</title>\n        </head>    \n        <body>\n        <h2>List of Fruits</h2>\n            <ul>\n                <li>Apple</li>\n                <li>Mango</li>\n                <li>Banana</li>\n                <li>Grapes</li>\n                <li>Orange</li>\n            </ul>\n        </body>  \n    </html>\n**Output**\n\n![](https://i.ibb.co/5s74YVd/list-1.jpg)\n\n### Ordered List\n\nIn HTML, all the list items in an ordered list are marked with numbers by default instead of bullets. \n\nAn HTML ordered list starts with the `<ol>` tag and ends with the `</ol>` tag. The list items start with the `<li>` tag and end with `</li>` tag.\n\n**Syntax**\n\n    <ol>List of Items</ol>\n\n**Example of HTML Ordered List**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Ordered List</title>\n        </head>    \n        <body>\n        <h2>List of Fruits</h2>\n            <ol>\n                <li>Apple</li>\n                <li>Mango</li>\n                <li>Banana</li>\n                <li>Grapes</li>\n                <li>Orange</li>\n            </ol>\n        </body>  \n    </html>\n\n**Output**\n\n![](https://i.ibb.co/vxp2Nfh/list-2.jpg)\n\n### Different Types of Ordered Lists in HTML\n\nInstead of numbers, you can mark your list items with the alphabet: A, B, C or a,b,c, or roman numerals: i, ii, iii, etc. \n\nYou can do this by using the `<ol>` tag type attribute. Let’s explore how to order lists with alphabets and roman numbers.\n\nTo mark the list items with letters A, B, C, etc., you must specify A as the type attribute’s value in the `<ol>` tag.\n\n**Here is an example to show the use of Upper case letters to list the items.**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Ordered List</title>\n        </head>    \n        <body>\n        <h2>List of Fruits</h2>\n            <ol type=\"A\">\n                <li>Apple</li>\n                <li>Mango</li>\n            <li>Banana</li>\n        </ol>\n    </body>  \n    </html>\n\n**Output**\n\n![](https://i.ibb.co/HDMFGyt/list-3.jpg)\n\n**Here is an example to show the use of Lower case letters to list the items.**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Ordered List</title>\n        </head>    \n        <body>\n        <h2>List of Fruits</h2>\n            <ol type=\"a\">\n                <li>Apple</li>\n                <li>Mango</li>\n            <li>Banana</li>\n        </ol>\n    </body>  \n    </html>\n**Output**\n\n![](https://i.ibb.co/D7ZjFg6/list-4.jpg)\n\n**Here is an example to show the use of Roman numerals to list the items.**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Ordered List</title>\n        </head>    \n        <body>\n        <h2>List of Fruits</h2>\n            <ol type=\"i\">\n                <li>Apple</li>\n                <li>Mango</li>\n            <li>Banana</li>\n        </ol>\n    </body>  \n    </html>\n\n**Output**\n\n![](https://i.ibb.co/JHktFPm/list-5.jpg)\n\n### Description List\n\nIn an HTML Description list or Definition List, the list items are listed like a dictionary or encyclopedia. \n\nEach item in the description list has a description. You can use a description list to display items like a glossary. You will need the following HTML tags to create a description list:\n\n* `<dl>` (Definition list) tag – Start tag of the definition list\n* `<dt>` (Definition Term) tag – It specifies a term (name)\n* `<dd>` tag (Definition Description) – Specifies the term definition\n* `</dl>` tag (Definition list) – Closing tag of the definition list\n\n**Example of HTML Description List**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>HTML Description List</title>\n        </head>    \n            <body>\n            <dl>\n                <dt><b>Apple</b></dt>\n                <dd>A red colored fruit</dd>\n                <dt><b>Honda</b></dt>\n                <dd>A brand of a car</dd>\n                <dt><b>Spinach</b></dt>\n                <dd>A green leafy vegetable</dd>\n            </dl>\n        </body>  \n    </html>\n\n**Output**\n\n![](https://i.ibb.co/48RnD9q/list-6.jpg)\n\n### Nested Lists\n\nAn HTML Nested list refers to a list within another list. \n\nWe can create a nested ordered list, a nested unordered list, or a nested ordered list inside an unordered list.\n\nLet us explore some examples of HTML lists within lists:\n\n**Example of an HTML Nested Ordered List**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n        <title>HTML Nested Ordered List</title>  \n    </head>  \n    <body>  \n        <ol>\n            <li>Banana</li>\n            <li> Apple\n                <ol>\n                    <li>Green Apple</li>\n                    <li>Red Apple</li>\n                </ol>\n            </li>\n            <li>Pineapple</li>\n            <li>Orange</li>\n        </ol>\n    </body>\n    </html>\n\n**Output**\n\n![](https://i.ibb.co/yqD9kcB/list-7.jpg)\n\n**Example of an HTML Nested Unordered List**\n\n    <!DOCTYPE html>  \n    <html>  \n    <head>  \n        <title>HTML Nested Unordered List</title>  \n    </head>  \n    <body>    \n        <ul>\n            <li>Fruits</li>\n            <ul>\n                <li>Apple</li>\n                <li>Banana</li>\n                <li>Mango</li>\n                <li>Orange</li>\n            </ul>\n            <li>Vegetables</li>\n            <ul>\n                <li>Spinach</li>\n                <li>Cauliflower</li>\n                <li>Beetroot</li>\n            </ul>\n            <li>Cereals</li>\n            <li>Nuts</li>\n        </ul>\n    </body>\n    </html>\n\n**Output**\n\n![](https://i.ibb.co/xLjqzBS/list-8.jpg)\n\n"],"5":["Hyperlinking Essentials","\n# Hyperlinking Essentials\n\n![](https://kinsta.com/wp-content/uploads/2018/08/anchor-links-wordpress-1024x513.png)\n\nHyperlinking in HTML is don using links, created using the Anchor (`<a>`) tag to enable navigation between web pages.\n\nThey define the destination using the “`href`” attribute, making them vital for connecting and organizing content on websites.\n\nWhile surfing the web or going through a web page, you might have come across underlined blue-lettered words written amongst a section of black text. They are known as links or hyperlinks. \n\nA hyperlink can take you to any part of the web by clicking on it. But what is the use of links and hyperlinks in HTML. Let’s learn about **HTML Links** in this blog.\n\n## What are HTML Links?\n\nHTML links or hyperlinks are words, phrases, or images in online content that, on clicking, take the site visitor to another web page with related content. Links are an integral part of the world wide web.\n\nLinks connect pages both within a website and to other websites. They enable site visitor’s to collect relevant information in less time by clicking their way from one page to another on any server across the world.\n\nThere are two ends of a link: anchor and direction. The link will start at the ‘source’ anchor and point to the ‘destination’ anchor. \n\nThe destination anchor may be an HTML document, image, video, or a section within an HTML document.\n\n### HTML Link Syntax\n\nIn HTML, we specify a link using the `<a>` tag.\n\n    <a href=\"url\">Link text</a>\n\n**Explanation:**\n\n* `<a></a>`: This is the anchor tag that creates a hyperlink. Anything between this tag becomes part of the link. The user can click that part to reach the linked document.\n* **href:** Specifies the destination address of the link used.\n* **Text link:** The visible part of the link.\n\n**Example:**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Example of HTML Link</title>\n        </head>    \n        <body>\n            <p>Click on the below link</p>\n            <a href = \"https://google.com/\">Google</a>\n        </body>\n    </html>\n\n**Output:**\n\n![](https://github.com/0xabdulkhalid/cv-application/assets/121022113/6d4ffb7d-b207-4364-b7ae-51dc8b04ec70)\n\n### target Attribute\n\nThe target attribute helps us define the location where the linked document will open. Some of the target locations include:\n\n| Target | Description |\n|---|---|\n| `_self` | The link opens in the same frame. It is the default value, so you need not specify this value. |\n| `_blank` | The link opens in a new window. |\n| `_parent` | The linked document opens in the parent frameset. |\n| `_top` | It will open the link in the full body of the window. |\n| `framename` | It opens the linked document in the named frame. |\n\n**Syntax:**\n\n    <a href=\"URL\"_blank|_self|_parent|_top|framename\">Link Text</a>\n\n**Example:**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Target Attribute Example</title>\n        </head>    \n        <body>\n            <p>Click any of the following links to Khalid's Github!</p>\n            <a href=\"https://www.github.com/0xabdulkhalid\" target=\"_self\">Link will open in Self</a> |\n            <a href=\"https://www.github.com/0xabdulkhalid\" target=\"_blank\">Link will open in New</a> |\n            <a href=\"https://www.github.com/0xabdulkhalid\" target=\"_parent\">Link will open in Parent</a> |\n            <a href=\"https://www.github.com/0xabdulkhalid\" target=\"_top\">Link will open in Body of the window</a>\n        </body>\n    </html>\n\n**Output:**\n\n![](https://github.com/0xabdulkhalid/cv-application/assets/121022113/252094fd-b88d-4fc5-b1bf-5e0b74c92ffe)\n\n### HTML Link Colors\n\nBy default, in most browsers, links appear in the following colors:\n\n* **Unvisited link:** blue and underlined.\n* **Visited link:** purple and underlined.\n* **Hover link**: when the user hovers mouses over it.\n* **Active link** (the moment a link is clicked): red and underlined.\n\nWe can change the color of the links using the CSS property.\n\n**Syntax to change Link text color with CSS styling:**\n\n    <a href=\"https://www.github.com/0xabdulkhalid\" style=\"color:red\">0xabdulkhalid</a>\n\n**Output:**\n\n![](https://github.com/0xabdulkhalid/cv-application/assets/121022113/abf5fbfe-59f1-4b28-8746-6cd9bf903ed8)\n\n**Syntax to change Link background color with CSS styling:**\n\n    <a href=\" https://www.github.com/0xabdulkhalid\" style=\"background-color:yellow\">0xabdulkhalid</a>\n\n**Output:**\n\n![](https://github.com/0xabdulkhalid/cv-application/assets/121022113/5e5d1da9-12c3-4fa8-b88c-fa43b3c5fab2)\n\nBelow is an example of how we can change the default colors of HTML links on a webpage.\n\n**Example:**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <style>\n                a:link {\n                color: green;\n                }\n                a:visited {\n                color: pink;\n                }\n                a:hover {\n                color: red;\n                }\n                a:active {\n                color: yellow;\n                }\n            </style>\n        </head>\n        <body>\n            <p>Changing HTML Link Colors</p>\n            <a href=\"https://i.ibb.co/QKGX8J5/naruto.gif\">\n                Surprise!\n            </a>\n        </body>\n    </html>    \n    \n\n**Output:**\n\n![](https://i.ibb.co/Q62dCH9/link-states.gif)  \n"],"6":["Images and Multimedia","\n# HTML Multimedia\n\n![](https://img.freepik.com/free-vector/web-page-template-idea-people-work-team-vector-illustration-cartoon-style_272375-2271.jpg)\n\nThe term \"media\" refers to various means of communicating and disseminating information, such as text, images, graphics, audio, video, and animation. \n\nAll these mediums of communication are collectively termed \"multimedia.\"\n\nA combination of video and audio files can also be used in websites to increase viewership or to provide users with information and entertainment.\n\nHTML helps you add multimedia files to your website by providing various multimedia tags. \n\nSo without any further delay, let's start describing the tags used to include multimedia elements in a web page.\n\n## The IMG Tag\n\nThe `<img>` tag in HTML is used to embed images into a webpage. Its primary purpose is to display visual content within the context of a web document. \n\nBy utilizing the `<img>` tag, web developers can enhance the visual appeal of their websites, convey information more effectively, and create engaging user experiences.\n\n### Commonly used Attributes\n\n| Attribute | Description |\n|---|---|\n| src | Specifies the URL of the image. |\n| alt | Specifies an alternate text for the image, displayed if the image cannot be loaded. |\n| width | Specifies the width of the image (in pixels or percentage). |\n| height | Specifies the height of the image (in pixels or percentage). |\n| title | Provides additional information about the image (tooltip). |\n| align | Deprecated. Specifies the alignment of the image (left, right, top, middle, bottom). |\n| border | Deprecated. Specifies the border size around the image. |\n| loading | Specifies how the image should be loaded (lazy, eager). |\n\n### Purpose of using Images\n\n1. **Displaying Images**: The `<img>` tag allows web developers to include images such as photographs, illustrations, icons, logos, charts, and diagrams directly into a webpage.\n\n2. **Enhancing Content**: Images can complement textual content by providing visual aids, explanations, or examples. They can help break up large blocks of text, making the content more visually appealing and easier to understand.\n\n3. **Improving User Experience**: Including relevant images can enhance the overall user experience of a website. Visual elements can capture users' attention, convey emotions, create atmosphere, and guide users through the content.\n\n4. **Supporting Accessibility**: The `alt` attribute of the `<img>` tag allows developers to provide alternative text descriptions for images. This is crucial for users who rely on screen readers or have images disabled, ensuring that they can still understand the content conveyed by the images.\n\n### Practical Usage\n\nLet's start with syntax of adding an image\n\n    <img src=\"url\" alt=\"some_text\" width=\"\" height=\"\">\n\nNow we can see an example webpage with image,\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n        <title>HTML Image</title>\n        </head>\n        <body>\n        <h2>Images in HTML</h2>\n        <p>This is the demo of \"img\" tag.</p>\n        <img src=\"https://i.ibb.co/1RHfMv4/1.webp\" alt=\"HTML Illustration\" />\n        </body>\n    </html>\n\n**Output:**\n\n![](https://i.ibb.co/4pDQTpn/img-example-1.png)\n\n### Utilizing `alt` Attribute\n\nIf the image cannot be displayed then the alt attribute acts as an alternative description for the image. The value of the alt attribute is a user-defined text. \n\nIt generally happens when the user, for some reason, cannot view it due to a slow internet connection or an error in the src attribute, or if the user uses a screen reader.\n\n**Example:**\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n        <title>HTML Image</title>\n        </head>\n        <body>\n        <h2>Images in HTML</h2>\n        <p>This is the demo of \"img\" tag.</p>\n        <img src=\"https://i.ibb.co/1RHfMv4/\" alt=\"HTML Illustration\" />\n        </body>\n    </html>\n\nHere we just added the previous code and modified the source path of image, so that it would display the `alt`.\n\n**Output:**\n\n![](https://i.ibb.co/94KNBpX/img-example-2.png)\n\n### Manual Width & Heights\n\nThe width and height attributes are used to specify the height and width of an image. \n\nThe attribute values are specified in pixels by default. \n\nThe width and height attributes are always declared in pixels, with `px` suffix or without it. Like `100px` or `100` both will work as same.\n\n**Example:**\n\n    <body>\n        <img src=\"https://i.ibb.co/VjwR3LG/html.jpg\" width=100 />\n        <p>100px of Width & Height.</p>\n        \n        <hr>\n        \n        <img src=\"https://i.ibb.co/VjwR3LG/html.jpg\" width=200 />\n        <p>200px of Width & Height.</p>\n    </body>\n\n**Output:**\n\n![](https://i.ibb.co/MVkR8rw/img-example-3.png)\n\n### Image formats\n\nHTML5 supports a variety of image formats for displaying images on webpages. \n\nSome of the commonly supported image formats include:\n\n1. **JPEG (Joint Photographic Experts Group)**: JPEG is a widely used image format for photographs and complex images with smooth variations in color and tone.\n\n2. **PNG (Portable Network Graphics)**: PNG is a popular image format for graphics, logos, and images with transparency. It supports lossless compression and is suitable for images with sharp edges and solid colors.\n\n3. **GIF (Graphics Interchange Format)**: GIF is commonly used for simple animations and images with limited colors. It supports animation and transparency but is not suitable for high-quality photographs.\n\n4. **SVG (Scalable Vector Graphics)**: SVG is an XML-based vector image format used for graphics and illustrations. It is scalable without loss of quality and supports interactivity and animation.\n\n5. **WebP**: WebP is a modern image format developed by Google that provides both lossy and lossless compression. It offers smaller file sizes compared to JPEG and PNG while maintaining high quality, making it suitable for web use.\n\n6. **BMP (Bitmap)**: BMP is a simple uncompressed raster image format commonly used on Windows platforms. It supports lossless compression but tends to produce large file sizes.\n\n7. **ICO (Icon)**: ICO is a file format commonly used for icons in Windows applications and websites. It supports multiple image sizes and color depths for different display contexts.\n\nThe choice of format depends on factors such as image content, quality requirements, transparency needs, and browser compatibility.\n\nFor example we can add GIF Image and let's see how it works!\n\n    <body>      \n    <img src=\"https://i.ibb.co/SdfQWDD/vanakkam.gif\" border=5 />\n    <p>Vanakkam da Mapla</p>\n    </body>\n\n**Output:**\n\n![](https://i.ibb.co/mRGKDrz/img-example-3.gif)\n\nYou can able to see the black border around the image, that's because of using `border` attribute. Like this one you can make as much customizations according to your needs.\n\n## The AUDIO tag\n\nThe AUDIO tag is used to display the audio file on the web page.\n\nAn audio file is a way for devices like computers, MP3 players, and mobile phones to store audio data.\n\nTo store audio data, you need to convert it into a digital format. The process of converting audio data into a digital file is called \"encoding\" of the raw audio data. \n\nIt involves taking samples of audio data and storing them in a compressed format to reduce the file size.\n\nAn audio player decodes these compressed sample files to make the audio waves audible. The process of converting a digital file into audio data is known as \"decoding.\" \n\nA codec performs the encoding and decoding of the raw audio data.\n\nHTML5's AUDIO tag only supports the following three audio file formats:\n\n* **.mp3**: The most popular of the three audio file formats supported by the HTML AUDIO tag is \".mp3.\" All web browsers support this audio file format.\n* **.wav**: IBM and Microsoft created the \".wav\" audio file format. It works well on all platforms, including Windows, Macintosh, and Linux.\n* **.ogg**: The Xiph.Org Foundation created the \".ogg\" audio file format.\n\n### Attributes of the AUDIO tag\n\nThe following table shows the attributes of the audio tag.\n\n| Attribute | Description |\n|---|---|\n| autoplay | plays the audio file as soon as the web page loads. |\n| controls | displays the controls on the web page, such as play and pause buttons. |\n| loop | replays the audio file. |\n| preload | specifies whether the audio file is preloaded on the web page or not. |\n| src | provides the location of the audio file to play. |\n\n### Practical Usage\n\nConsider the following example to learn how to embed audio files into your website.\n\n    <body>\n        <p>Audio Sample</p>\n        \n        <audio controls>\n        <source src=\"song.mp3\" type=\"audio/mpeg\">\n        The AUDIO tag is not supported by your browser.\n        </audio>\n    </body>\n\n**Output:**\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/20231214164546/w21.gif)\n\nWhen the AUDIO tag is not supported by the web browser, the text between the AUDIO tag is displayed. \n\nBecause the text \"The AUDIO tag is not supported by your browser.\" is available between the AUDIO tag in the above code fragment, it will be displayed if the AUDIO tag is not supported by the web browser.\n\nYou can provide multiple audio sources in multiple file formats. For example:\n\n    <audio controls>\n    <source src=\"song.ogg\" type=\"audio/ogg\">\n    <source src=\"song.mp3\" type=\"audio/mpeg\">\n    The AUDIO tag is not supported by your browser.\n    </audio>\n\nIf there are multiple sources available between the AUDIO tag, the first supported source file will be used.\n\nThe \"controls\" attribute adds audio controls like play, pause, and volume.\n\n## The VIDEO tag\n\nThe \"VIDEO\" tag, like \"AUDIO,\" is used to display video files on a web page.\n\nFollowing are the three video file formats supported in HTML:\n\n* **.mp4**: This video file format has been developed by the \"Moving Pictures Expert Group.\" This video file format is recommended by one of the biggest video sharing platforms, YouTube.\n* **.webm**: This video file format has been developed by web giants Mozilla, Opera, Adobe, and Google.\n* **.ogg**: The Xiph.Org Foundation created the \".ogg\" video file format.\n\n### Attributes of the VIDEO tag\n\nThe following table describes the attributes of the Video tag.\n\n| Attribute | Description |\n|---|---|\n| audio | controls the audio channel's default state in the video. |\n| autoplay | plays the audio file as soon as the web page loads. |\n| controls | displays the controls on a web page, such as play and pause buttons. |\n| height | specifies the height of the video tag. |\n| loop | plays the video file again. |\n| preload | specifies whether the video file is preloaded on the web page or not. |\n| poster | provides an image to be displayed when the video file is not available. |\n| src | provides the location of the video file to play. |\n| width | specifies the width of the video tag. |\n\n### Practical Usage\n\nTo provide the source of the video file, you can also use the SOURCE tag within the opening and closing tags of the VIDEO tag.\n\nWhen the location of the video file cannot be determined, the SOURCE tag is used. In this case, the VIDEO tag plays the first video file found in the specified path. The VIDEO tag is demonstrated in the following code snippet:\n\n    <body>\n        <video \n        src=\"https://static.videezy.com/system/resources/previews/000/012/324/original/Venice_10.mp4\" autoplay=\"true\" loop=\"3\" controls \n        >\n        </video>\n    </body>\n\n**Output:**\n\n![](https://i.ibb.co/6bFxQQk/html-video.gif)\n\nIn the src attribute of the preceding code snippet, we defined a video link. \n\nThe video file will be played three times because the loop attribute is set to 3. Furthermore, the controls attribute shows the controls on the video player.\n"],"7":["Forms and Input","\n# Forms and Input\n\n![](https://www.optimizepress.com/wp-content/uploads/2021/07/custom-html-blog.png)\n\nIn HTML, a form is used to create a section of a webpage that contains interactive controls, such as text fields, checkboxes, radio buttons, submit buttons, and more. \n\nThe primary purpose of the form element is to collect and submit user input data to a server for processing.\n\n## Why Form is Used ?\n\n1. **Data Collection**: Forms allow website visitors to input data such as text, numbers, selections, and file uploads. This data could include anything from simple feedback or contact information to complex user-generated content.\n\n2. **User Interaction**: Form elements provide a way for users to interact with a webpage beyond just reading content. Users can input data, make selections, and trigger actions such as submitting the form.\n\n3. **Data Submission**: Once users have entered their data into the form, they can submit it to the server for further processing. This might involve storing the data in a database, sending it via email, processing it with server-side scripts, or any other backend operation.\n\n4. **Validation**: Form elements often support validation to ensure that users enter data in the correct format or within certain constraints. For example, email addresses should be in a valid format, and required fields should not be left blank.\n\n5. **User Feedback**: Forms can provide feedback to users about the status of their submissions, such as success messages after successful form submission or error messages if there are validation issues.\n\n6. **Customization and Styling**: Form elements can be styled and customized using CSS to match the overall design and branding of a website. This allows developers to create visually appealing and user-friendly forms.\n\n### Commonly used Form Attributes\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*cp7Vtfd2XTlV2HaSCZq_Bw.png)\n\nLet's start exploring commonly used Form elements,\n\n### Text input\n\nA form to request the user to enter some text is shown below. A simple text window which consists of a single line of 20 characters is introduced by the `<input>` tag as illustrated below:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*5QuZu94szBQ3Pwh-9YGfUA.png)\n\nThe data in the input field can be initialized to a particular value using the `value` attribute:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*Ge-2bvO3qsv2PPNJidLstg.png)\n\nThe input data is sent in the form: name=Your+name\n\nIt is also possible to specify the maximum length for a text to be entered:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*eahrqBJ7xM-VU51TS1ePJQ.png)\n\nThe attributes of the `<input>` tag include:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*D3IYPD382vs-N0xS8C0tNQ.png)\n\nIn sending the data there are various character mappings of the input data to ease later processing. For example:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*lQfE_1ozKcHfn8HIVVEKGg.png)\n\nPlease note: How some input characters are represented by their hexadecimal representation. Which is indicated by the sequence %HH, where H is a hexadecimal digit.\n\n### Labels\n\nThe `<label>` element represents a caption for the form element it is associated with. The `<label>` can also add as an accessibility aid to forms:\n\n* They can widen the element clickable area\n* They help screen readers identify fields on a web page\n\n### Implicit Labels\n\nImplicit labels are wrapped around a form control. \n\nImplicit labels are not well suported in older screen readers, and are harder to style with CSS\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*IVcJt1HhYatHWHewq7xj_A.png)\n\n### Explicit Labels\n\nExplicit labels are separate from the form control, and linked to their form control via the `for` attribute. \n\nThe `for`attribute of the label has to match the `id` attribute of the form control it is linked to. \n\nExplicit labels are well supported by screen readers and are easy to style using CSS.\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*9o5KY_uu7omBQXn12ky3uQ.png)\n\n### Password\n\nA form to request a password or any secret text to be entered is:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*omYO4IjQo0ADPTlPDj138g.png)\n\n**Warning:** This is not secure, and mainly used only to prevent passwords to be read over users’ shoulders, unless the data is encrypted before being sent over the Internet. Even if it is encrypted, the encryption may still be broken.\n\n### Radio buttons\n\nA form to request the user to select from one of a series of radio buttons uses the `<input>` tag with an attribute of `type=\"radio\"`. \n\nOnly one radio button per group of radio buttons with the same name can be checked. \n\nAn example of a radio button input form to select the delivery time is shown below:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*IypbJYvMgxxQ_DREGMMf7A.png)\n\n### Checkboxes\n\nA form to request the user to select from one one or more check boxes uses the `<input>` tag with an attribute of `type=\"checkbox\"`. \n\nAn example of a checkbox form is shown below:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*bHhEchV5FiZAQiJkmns0ow.png)\n\n### Multiple lines of text input — Textarea\n\nA form to request the user to input multiple lines of input uses the `<textarea>` and its corresponding `</textarea>`tag. So that the user can enter multiple lines the `<input type=\"submit\">` tag is used to signal when the form has been completed. For example:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*CWOHR6g29gOQwnm7aVLVew.png)\n\nThe attributes of the `<textarea>` tag include:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*kuHrpnJCbXBf9Q1UDDdC6Q.png)\n\n### Pop up List\n\nA form to allow the user to select an item from a pop-up list uses the `<select>` tag. An example of a pop-up list is shown below:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*-9vq-ToGbNMRFpdTBDkXyQ.png)\n\nThe `<select>` tag encloses the tag with `<option></option>`Which names a value in the pop-up list.\n\nThe `<option>` tag may have an attribute of `selected` to define the initial value of the pop-up list.\n\n### Scrolling List\n\nA form to allow the user to select one or more item from a list uses the `<select>` tag with the `multiple` attribute. An example of a scrolling list is shown below:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*OfcCDIeyrRvUvTpbp97dhg.png)\n\nThe optional `size` attribute defines the size of the displayed list. \n\nIf the specified `size` is smaller than the number of `option` items, a vertical scroll bar will automatically be displayed, to allow the user to view all the different items. \n\nIf `multiple` is used and no `size` is specified, the default size is usually 4 (or will automatically fit the number of items in the option list).\n\n### Date\n\ndate is an HTML5 input type. This input type is designed to let the user enter a date. \n\nBrowsers that support this input type will automatically check the validity of the format of the data entered and alert the user if the format is invalid. \n\nThe browser may also display a date picker. If the browser doesn’t support this input type, it will automatically fall back to the `type=\"text\"`. \n\nYou can provide a default value in the format `yyyy-mm-dd`, and you may use `min` and `max`date values if you want to restrict the valid date.\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*JrG5OnshGe0WI_bktSbdNA.png)\n\n### Range input field\n\nrange is an HTML5 input type. This input type is designed to let the user enter a numerical value. Browsers that support this input type may style it differently from the text input and offer a slider. If the browser doesn’t support this input type, it will automatically fall back to the `type=\"text\"`\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*kEb139hhJ3YV5PZNddrMWw.png)\n\nYou can use the `min`, `max` and `step` attributes to specify authorised values and define the granularity of the slider:\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*VltbdHFt5VnedQGmUwu2kw.png)\n\n### Color input field\n\ncolor is an HTML5 input type. This input type is designed to let the user enter a color in hexadecimal format. \n\nBrowsers that support this input type may style it differently from the text input and may automatically present a colour picker. \n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*iun7ufQRd8hGSKgWwHimYA.png)\n\nIf no default value is specified, the default `#000000` is used.\n\n### Buttons\n\nThere are several ways to create a button on a form, and there are several types of buttons available. \n\nYou can create a button by adding the `type=\"button\"` attribute to the `input` element, or by using the `button` element. \n\nThese two types of button will have no default behaviour, other than being a clickable button, and you will need to add some JavaScript to add event listeners to these buttons and add behaviour (for example calculating the total price of an order).\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*ZV2FaLH_T0AY94Yx2C0a_g.png)\n\n### Fieldset and Legend\n\nThe `fieldset` element together with its corresponding `legend` are used to group several form controls and `labels`together.\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*kjAxp1pfFphriT_ODpMXig.png)\n\nThe examples we've seen till far uses a custom css, without css the output will look like the below one.\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*k2OdTEbCiNg-Q3SNFlpTCQ.png)\n"],"8":["Tables in HTML","\n# Tables in HTML\n\n![](https://miro.medium.com/v2/resize:fit:1200/1*3UoyFow1idzHL0HBBEeulg.png)\n\nThe `<table>` tag in HTML is designed to create organized grids of rows and columns, known as tables. \n\nIts primary function is to structure and display tabular data effectively on webpages. By using rows and columns, it facilitates the presentation of information in a clear and systematic manner, making it easier for users to comprehend and analyze data.\n\nTables are particularly useful for organizing data sets, enabling users to compare and contrast different elements within the data. \n\nAdditionally, tables offer various features such as cell merging, column resizing, and the ability to add headers and footers, allowing developers to customize the appearance and functionality of tables according to their needs.\n\nFor example,\n\n    <table border=\"1\" >\n    <tr>\n        <th>Name</th>\n        <th>Age</th>  \n        <th>Country</th>\n    </tr>\n    <tr>\n        <td>Harry Depp</td>\n        <td>28</td>\n        <td>Britain</td>\n    </tr>\n    <tr>\n        <td>John Smith</td>\n        <td>35</td>\n        <td>USA</td>\n    </tr>\n    <tr>\n        <td>Ram Krishna</td>\n        <td>19</td>\n        <td>Nepal</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![HTML table with multiple rows of data.](https://www.programiz.com/sites/tutorial2program/files/html-table.png \"HTML Table Example\")\n\nIn the above example, you can see we have used multiple tags to create a table in HTML.\n\n* `<table>`\n* `<tr>`\n* `<td>`\n* `<th>`\n\n## Table tag - `<table>`\n\nThe `<table>` tag is used to define a table. For example,\n\n    <table>\n    ….\n    <table>\n\n## Table Row - `<tr>`\n\nThe `<tr>` tag is used to define a row in a table. For example,\n\n    <table>\n    <tr>\n    ...\n    </tr>\n    </table>\n\nThe table row can include either table heading, `<th>` or table data, `<td>`.\n\n    <tr>\n    <th>Name</th>\n    <th>Country</th>\n    </tr>\n    <tr>\n    <td>Prasanna</td>\n    <td>Nepal</td>\n    </tr>\n    <tr>\n    <td>Simon</td>\n    <td>USA</td>\n    </tr>\n\nIn a table, there can be any number of rows.\n\n## Table Heading - `<th>`\n\nThe `<th>` tag is used to define a table header. It is generally the top row of the table. For example,\n\n    <table>\n    <tr>\n        <th>Item</th>\n        <th>Count</th>\n    </tr>\n    <tr>\n        <td>Mango</td>\n        <td>125</td>\n    </tr>\n    <tr>\n        <td>Orange</td>\n        <td>75</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![HTML table with Table Headers](https://www.programiz.com/sites/tutorial2program/files/html-table-heading.png \"HTML Table Heading\")\n\nIn the above example, Item and Count are table headers and they are used to represent the category of data in a particular row.\n\nHere, the styling of the table headers is bold and center-aligned. This is because the `<th>` tag has some default styling.\n\n## Table Cell - `<td>`\n\nThe `<td>` tag is used to define table cells (data). The table cells store data to be displayed in the table. For example,\n\n    <tr>\n    <td>Apple</td>\n    <td>Mango</td>\n    <td>Orange</td>\n    </tr>\n\nIn the above example, `<td>Apple</td>`, `<td>Mango</td>` and `<td>Orange</td>` are table cells.\n\nTable cells are generally inside the table row or table headers.\n\n## Table Border\n\nRemember we have used the border attribute in our first example.\n\n    <table border=\"1\">\n    ...\n    </table>\n\nIn HTML, the **border** attribute is used to add a border to a table and all the cells.\n\n![HTML table with borders](https://www.programiz.com/sites/tutorial2program/files/html-table-border.png \"HTML Table with Borders\")\n\n**Note:** We can have borders of various styles in tables, however for more specific borders, we need to use CSS.\n\nTo prevent double borders like the one in the example above, we can set the border-collapse property of the table. For example,\n\n    <table border=\"1\" style=\"border-collapse: collapse;\">\n    ...\n    </table>\n\n![HTML Table with collapsed border](https://www.programiz.com/sites/tutorial2program/files/html-table-collapse-border.png \"HTML Table with collapsed border\")\n\n## Table Head, Body, and Footer\n\nThe HTML table can be divided into three parts: a header, a body, and a footer.\n\n### 1. Table Header\n\nWe use the `<thead>` tag to add a table head. The `<thead>` tag must come before any other tags inside a table. For example,\n\n    <table>\n    <thead>\n        <tr>\n            <th>Head1</th>\n            <th>Head2</th>\n        </tr>\n    </thead>\n    \n    ...\n    ...\n    </table>\n\nThe content of `<thead>` is placed on the top part of the table and we usually place the rows with table headers inside the `<thead>` tag.\n\n### 2. Table Body\n\nWe use the `<tbody>` tag to add a table body. The `<tbody>` tag must come after `<thead>` and before any other tags inside a table. For example,\n\n    <table>\n    <thead>\n        ...\n    </thead>\n    <tbody>\n        <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n        </tr>\n    </tbody>\n    \n    ...\n    ...\n    </table>\n\nThe content of `<tbody>` is placed on the center part of the table and we usually place the rows with the content we want to represent in the `<tbody>`.\n\n### 3. Table Footer\n\nWe use the `<tfoot>` tag to add a table footer. The `<tfoot>` tag must come after `<tbody>` and before any other tags inside a table. For example,\n\n    <table>\n    <thead>\n        ...\n    </thead>\n    <tbody>\n        ,,,,\n    </tbody>\n    <tfoot>\n        <tr>\n        <td>foot 1</td>\n        <td>foot 2</td>\n        </tr>\n    </tfoot>\n    </table>\n\nThe content of `<tbody>` is placed on the bottom part of the table and we usually place the rows with the footer in the `<tfoot>`.\n\nAll these tags must be placed inside a `<table>` tag and must contain at least one `<tr>`. For example,\n\nExample:\n\n###### HTML Table Head, Body, and Footer\n\n    <table>\n    <thead>\n        <tr>\n        <th>S.N</th>\n        <th>Item</th>\n        <th>Quantity</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n        <td>1</td>\n        <td>Apple</td>\n        <td>2</td>\n        </tr>\n        <tr>\n        <td>2</td>\n        <td>Mango</td>\n        <td>2</td>\n        </tr>\n        <tr>\n        <td>3</td>\n        <td>Orange</td>\n        <td>1</td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n        <td></td>\n        <td>Total</td>\n        <td>5</td>\n        </tr>\n    </tfoot>\n    </table>\n\n**Output:**\n\n![An HTML Table with a ](https://www.programiz.com/sites/tutorial2program/files/html-table-head-body-footer.png)\n\n## Colspan and Rowspan\n\nThe rowspan and colspan are the attributes of `<td>` tag. \n\nThese are used to specify the number of rows or columns a cell should merge. \n\nThe rowspan attribute is for merging rows and the colspan attribute is for merging columns of the table in HTML\n\n### Colspan\n\nThe colspan attribute merges cells across multiple columns. For example,\n\n    <table>\n    <tr>\n        <th>S.N</th>\n        <th>Item</th>\n        <th>Quantity</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Apple</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Mango</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>Orange</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">Total</td>\n        <td>5</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![An HTML Table showcasing colspan](https://www.programiz.com/sites/tutorial2program/files/html-table-colspan.png)\n\nIn the above example, you can see that the last row only has 2 cells with one cell occupying 2 columns.\n\nThe value of the colspan attribute determines how many columns the cell occupies.\n\n### Rowspan\n\nThe rowspan attribute merges cells across multiple rows. For example,\n\n    <table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Marks</th>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">Mark Smith</td>\n        <td>English</td>\n        <td>67</td>\n    </tr>\n    <tr>\n        <td>Maths</td>\n        <td>82</td>\n    </tr>\n    <tr>\n        <td>Science</td>\n        <td>91</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![An HTML Table showcasing rowspan](https://www.programiz.com/sites/tutorial2program/files/html-table-rowspan.png)\n\nIn the above example, you can see that the first column only has **2** cells with one cell occupying **2** rows.\n\nThe value of the rowspan attribute determines how many rows the cell occupies.\n\n## Things to know about HTML Table\n\nCan we use both colspan and rowspan together?\n\nYes, we can use both colspan and rowspan to create cells that occupy multiple rows and columns. Here is an example:\n\n![An HTML table showcasing rowspan and colspan](https://www.programiz.com/sites/tutorial2program/files/html-table-rowspan-and-colspan.png)\n\nVertical Headers\n\nIn this tutorial we have seen table headers, `<th>`, used in the top row multiple times. But we can also add the `<th>` tags across columns to create a vertical header. For example,\n\n    <table>\n    <tr>\n        <th>Name</th>\n        <td>Sam</td>\n        <td>Steve</td>\n        <td>Peggy</td>\n    </tr>\n    <tr>\n        <th>Age</th>\n        <td>31</td>\n        <td>42</td>\n        <td>29</td>\n    </tr>\n    <tr>\n        <th>Gender</th>\n        <td>M</td>\n        <td>M</td>\n        <td>F</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![An HTML table with <th> elements on first cell of each row](https://www.programiz.com/sites/tutorial2program/files/html-table-vertical-headers.png)\n\n## Caption in HTML TABLE\n\nThe `<caption>` element acts as the title of the table. It is used to give a short description of the table. It shows up on top of the table.\n\nThe `<caption>` tag must be the first child of the `<table>` element.\n\n    <table>\n    <caption>Employee Details</caption>\n    <tr>\n        <th>Name</th>\n        <td>Sam</td>\n        <td>Steve</td>\n        <td>Peggy</td>\n    </tr>\n    <tr>\n        <th>Age</th>\n        <td>31</td>\n        <td>42</td>\n        <td>29</td>\n    </tr>\n    <tr>\n        <th>Gender</th>\n        <td>M</td>\n        <td>M</td>\n        <td>F</td>\n    </tr>\n    </table>\n\n**Output:**\n\n![An HTML table with a table caption](https://www.programiz.com/sites/tutorial2program/files/html-table-caption.png) \n"],"9":["Semantic HTML","\n# Semantic HTML\n\n![](https://cyber.olympiadsuccess.com/assets/images/cyber_square/cyber_topic_46.jpg)\n\nSemantic HTML, also known as semantic markup, refers to the use of HTML tags that convey the meaning—or semantics—of the content contained within them.\n\nBy adding semantic HTML tags to your pages, you provide additional information that helps define the roles and relative importance of the different parts of your page. (As opposed to non-semantic HTML, which uses tags that don’t directly convey meaning.)\n\n## What Are Semantic HTML Tags?\n\nSemantic HTML tags are tags that define the meaning of the content they contain.\n\nFor example, tags like `<header>`, `<article>`, and `<footer>` are semantic HTML tags. \n\nThey clearly indicate the role of the content they contain.\n\n![](https://i.ibb.co/C08Jnyy/semantic-vs-non-semantic.png)\n\nOn the other hand, tags like `<div>` and `<span>` are typical examples of non-semantic HTML elements. They serve only as content holders but give no indication as to what type of content they contain or what role that content plays on the page.\n\n### Why Do I Need to Use Semantic HTML Tags?\n\nBesides the obvious reason that semantic HTML tags are easier to read and understand—for example, by web developers reviewing the code—there are two more specific reasons why you should always use semantic tags.\n\n### Accessibility\n\nFor sighted users, it’s easy to identify the various parts of a webpage. Headers, footers, and the main content are all immediately visually apparent.\n\nHowever, it is not that easy for users who are **blind or visually impaired** and rely on screen readers.\n\nThe proper use of HTML semantic tags will allow these readers to understand your content better because their screen readers will communicate your content more accurately.\n\n### SEO\n\nSemantic HTML tags are important for SEO because they indicate the role of the content within the tags.\n\nThat information gives search engine crawlers, like Googlebot, a better understanding of your content. \n\nThis increases the chances that your content will be selected as a candidate for ranking on the search engine results page (SERP) for relevant keywords.\n\nGo to the “**Issues**” tab.\n\n![\"Issues\" tab in the Site Audit tool](https://i.ibb.co/0CXDYSr/seo-1.png)\n\nAnd search “**tag**” in the “Search by check” box.\n\n![search “tag” in the “Search by check” box in the Site Audit tool](https://i.ibb.co/LQdDnHR/seo-2.png)\n\nClick on “**Why and how to fix it**” to learn more about each site issue.\n\n![an example of “Why and how to fix it” section in the Site Audit tool](https://i.ibb.co/pJpkZz6/seo-3.png)\n\n## Types of HTML Semantic Tags\n\nSemantic tags can define different parts of a webpage.\n\nLet's take a look at the most common semantic HTML elements, divided into two categories based on their usage:\n\n* HTML semantic tags for structure\n* HTML semantic tags for text\n\n### HTML Semantic Tags for Structure\n\nMany semantic HTML tags communicate the layout of a page.\n\nThese “structural” tags were introduced when HTML4 got upgraded to HTML5. That's why they're also commonly known as semantic HTML5 tags or semantic HTML5 elements.\n\n![](https://i.ibb.co/Pc05TsZ/semantics.png)\n\nHere’s a full list:\n\n* `<header>`: The header tag defines content that should be considered the introductory information of a page or section\n* `<nav>`: The navigation tag is used for navigation links. It can be nested within the `<header>` tag, but secondary navigation `<nav>` tags are also commonly used elsewhere on the page.\n* `<main>`: This tag contains the main content (also called the body) of a page. There should be only one tag per page.\n* `<article>`: The article tag defines content that could stand independently of the page or site it’s on. It does not necessarily mean a “blog post.” Think of it more as “an article of clothing”—a self-contained item that can be used in various contexts.\n* `<section>`: Using `<section>` is a way of grouping nearby content of a similar theme. A section tag differs from an article tag. It isn’t necessarily self-contained, but it forms part of something else.\n* `<aside>`: An aside element defines content that’s less important. It’s often used for sidebars—areas that add complementary but nonessential information.\n* `<footer>`: You use `<footer>` at the bottom of a page. It usually includes contact information, copyright information, and some site navigation.\n\n### HTML Semantic Tags for Text\n\nThe semantic HTML tags for text are HTML tags that—besides the formatting—also convey the semantic function of the text they contain.\n\nHere are some of the most common examples:\n\n* `<h1>` (heading): The H1 marks the top level heading. There’s usually only one H1 heading per page.\n* `<h2>` to `<h6>` (subheadings): The subheadings of various levels of importance. There can be multiple headings of the same level on a single page.\n* `<p>` (paragraph): A standalone paragraph of text.\n* `<a>` (anchor): Used to mark up a hyperlink from one page to another.\n* `<ol>` (ordered list): A list of items that are displayed in a particular order, starting with bullet points. One `<li>` (list item) tag contains a single item in the list.\n* `<ul>` (unordered list): A list of items that do not need to be displayed in a particular order, starting with ordinal numbers. One `<li>` (list item) tag contains a single item of the list.\n* `<q>` / `<blockquote>`: A quotation of the text. Use `<blockquote>` for long, multi-line quotations and `<q>` for shorter, inline quotations.\n* `<em>` (emphasis): Used for text that should be emphasized.\n* `<strong>` (strong emphasis): Used for text that should be strongly emphasized.\n* `<code>`: A block of computer code.\n\n**Note:** We’ve only listed some of the most common semantic HTML tags. You can use many others—like `<summary>`, `<time>`, `<address>`, etc, to make the content of your website easier to understand.\n\n### Don't Use Semantic HTML Tags for Styling\n\nAlthough web browsers apply styling to many semantic tags (e.g., the text within an `<a>` tag is usually blue and underlined), it doesn’t mean HTML tags are supposed to be used to style your text.\n\nIn other words, just as you wouldn’t use an `<a>` tag for a “non-link” text just to make it blue and underlined, you should not use other semantic tags for purely stylistic purposes.\n\nHere are some typical examples of using semantic tags incorrectly:\n\n* Using an `<h1>` to `<h6>` tag for text that is not a heading with the purpose of changing its font size\n* Using `<blockquote>` just to indent text that is not a quotation\n* Using `<strong>` or `<em>` just to add bold or italics to text that doesn't need emphasis.\n\nFor styling purposes, always use CSS.\n\n### Nest the Heading Tags with Semantics in Mind\n\nAlways order header elements by importance.\n\nFor example, all the H3 headings that follow a certain H2 heading should be subtopics of that H2.\n\n![](https://i.ibb.co/qyMGb3g/semantic-headings.png)\n\nThis way, the structure of headings creates a logical hierarchy of the topics within your piece of content and helps both readers and search engines better understand and navigate the text.\n"],"10":["Conclusion","\n# Conclusion\n\n![](https://www.hostinger.com/tutorials/wp-content/uploads/sites/2/2018/11/what-is-html-3.webp)\n\nCongratulations! You've reached the conclusion of our HTML syllabus journey. \n\nBy now, you should feel confident in your ability to create structured and meaningful content for the web using HTML. \n\nYou've learned how to craft headings and paragraphs, format text, create lists, incorporate hyperlinks, embed multimedia, build forms, design tables, and understand the importance of semantic HTML. \n\nYou've laid a strong foundation upon which to build your web development skills further. But remember, this is just the beginning of your journey into the vast world of web development. \n\n### Things you need to learn next\n\nHTML is the backbone of every web page, but it's only one piece of the puzzle.\n\nTo truly bring your websites to life and make them visually stunning and interactive, you'll need to delve into other technologies like CSS and JavaScript.\n\n![](https://thumbs.dreamstime.com/b/html-css-javascript-suit-as-explained-coding-layers-outline-diagram-website-project-development-stages-basic-skeletal-233593998.jpg)\n\n### CSS\n\nCSS (Cascading Style Sheets) allows you to style your HTML content, giving it the look and feel you desire. \n\nWith CSS, you can control everything from fonts and colors to layout and spacing, transforming your basic HTML structure into a beautifully designed web page. \n\nSo after mastering HTML, your next step should be to dive into the world of CSS.\n\n### JavaScript\n\nAfter you've grasped the fundamentals of CSS and can confidently style your web pages, it's time to level up even further with JavaScript. \n\nJavaScript is a powerful scripting language that adds interactivity and dynamic behavior to your websites. \n\nWith JavaScript, you can create animations, handle user input, manipulate the DOM (Document Object Model), and much more. It's what makes the web come alive.\n\n### Wrapping Up!\n\nSo, as you wrap up this HTML course, I encourage you to continue your learning journey. Explore CSS and JavaScript, experiment with different techniques and libraries, and never stop expanding your skills. \n\nThe world of web development is constantly evolving, and there's always something new to learn and discover.\n\nRemember, Rome wasn't built in a day, and neither will your web development skills. Stay curious, stay passionate, and keep pushing yourself to learn and grow. \n\nThe web is your canvas, and with HTML, CSS, and JavaScript as your tools, the possibilities are endless. Good luck on your journey, and happy coding!\n"]},"CSS":{"1":["Introduction to CSS","\n# Introduction to CSS\n\n![](https://open.zeba.academy/wp-content/uploads/2020/01/web-CSS-1024x511.png)\n\nWelcome to your next adventure in web development: Cascading Style Sheets, commonly known as CSS. \n\nIn this course, we'll dive into the world of CSS and learn how it can transform the look and feel of your HTML documents.\n\nBefore proceeding to CSS, a minimal knowledge of HTML is required hope you get it.\n\n## What is CSS?\n\nCSS is a style sheet language used to describe the presentation of a document written in HTML. \n\n![](https://pbs.twimg.com/media/CdX_Tu-W0AASJ8v.jpg)\n\nWhile HTML provides the structure and content of a web page, CSS controls the visual styling and layout. With CSS, you can change the colors, fonts, spacing, positioning, and more, giving your web pages a unique and polished appearance.\n\nYou can see how CSS affects a website in terms of visuals on the below comparison screenshots of Amazon's E-Commerce Website.\n\n![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/04/s_601945040BCA3610D759145A4442799C97B904D9A9F8326DD30FDF0CF48A96B7_1555165941350_amazon-compare.jpg)\n\n## Why Use CSS?\n\nCSS offers several advantages over inline styling or using HTML alone for styling purposes:\n\n1. **Separation of Concerns**: CSS allows you to separate the structure (HTML) from the presentation (CSS) of your web pages. This makes your code cleaner, more organized, and easier to maintain.\n\n2. **Consistency**: By defining styles in a single CSS file, you can ensure consistency across your entire website. This means that changes to styling can be applied universally with minimal effort.\n\n3. **Flexibility**: CSS gives you fine-grained control over the appearance of your elements. You can target specific elements or groups of elements and apply styles accordingly, allowing for highly customized designs.\n\n4. **Efficiency**: With CSS, you can apply styles to multiple elements at once using classes, IDs, or element selectors. This reduces redundancy in your code and makes it more efficient.\n\n## Basic Syntax\n\nThe basic syntax of CSS consists of a selector and one or more declarations enclosed in curly braces. Here's a simple example:\n\n    selector {\n        property: value;\n    }\n\n- **Selector**: Specifies which HTML elements the styles should be applied to. Selectors can target elements by their tag name, class, ID, or other attributes.\n- **Property**: Defines the aspect of the element you want to style, such as color, font-size, margin, etc.\n- **Value**: Specifies the value of the property, such as a color name, font size in pixels, or a measurement in percentages.\n\n**Example:**\n\n    h1 {\n      color: red;\n    }\n    p {\n      color: blue;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/9bWCTgq/css-syntax.png)\n\n## Getting Started\n\nTo start using CSS, you can include your styles directly in an HTML document using the `<style>` tag, or you can create an external CSS file and link it to your HTML document using the `<link>` tag. The latter method is preferred for larger projects as it promotes better organization and reusability.\n\n```xml\n<!-- Inline CSS -->\n<style>\n    selector {\n        property: value;\n    }\n</style>\n\n<!-- External CSS -->\n<link rel=\"stylesheet\" href=\"styles.css\">\n```\n\n## Practical Examples\n\nWe now gonna just create a simple website in two variants, Markup will be same for both but one won't have CSS.\n\nFirst we can see example with only Markup\n\n**Example: HTML ONLY**\n\n```xml\n<!DOCTYPE html> \n<html> \n    <head> \n      <title>Simple Web Page</title> \n    </head> \n    <body> \n      <h1>HTML Page</h1> \n      <p>This is a basic web page.</p> \n    </body> \n</html>\n```\n\n**Output:**\n\n![](https://i.ibb.co/JxzgyqS/css-example-1.png)\n\nNow we can see another variant which will have CSS,\n\n**Example: HTML + CSS**\n\n```xml\n<!DOCTYPE html> \n<html> \n    <head> \n      <title>Simple Web Page</title> \n      <style> \n            body { \n                padding: 10px; \n                background: beige; \n            } \n            h1 { \n                color: olivedrab; \n                border-bottom: 1px dotted darkgreen; \n            }  \n            p { \n                font-family: sans-serif; \n                color: orange; \n            } \n        </style> \n    </head> \n    <body> \n      <h1>HTML Page</h1> \n      <p>This is a basic web page.</p> \n    </body> \n</html>\n```\n\n**Output:**\n\n![](https://i.ibb.co/rp4MRmB/css-example.png)  \n "],"2":["Essential CSS Selectors","\n# Essential CSS Selectors\n\n![](https://www.admecindia.co.in/wp-content/uploads/2014/08/admec-internal-what-are-css3-selectors.jpg)\n\nCSS selectors are used to select the HTML elements that are to be styled by CSS. \n\nIn this lesson we're gonna cover most essential CSS Selectors which are commonly used by developers.\n\nFor example,\n\n    h1 {\n        color: red;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-selectors-introduction-example.png)\n\nHere, the `h1` is the selector that selects all the `h1` elements of our document and changes their `color` to `red`.\n\n## Syntax of CSS rule\n\nTo understand how selectors work and their role in CSS, it's important to know the parts of a CSS rule. \n\nA CSS rule is a block of code, containing one or more selectors and one or more declarations.\n\n![](https://i.ibb.co/BLVqT9p/syntax.png)\n\nIn this CSS rule, the selector is `.my-css-rule` which finds all elements with a class of my-css-rule on the page. \n\nThere are three declarations within the curly brackets. A declaration is a property and value pair which applies styles to the elements matched by the selectors. \n\nA CSS rule can have as many declarations and selectors as we wish.\n\n## Types of Selector\n\nThere are the following different types of selectors in CSS.\n\n* Element selector\n* Id selector\n* Class selector\n* Universal selector\n* Group selector\n* Attribute selector\n\nNow, let's learn about them in detail.\n\n### Element Selector\n\nThe element selector selects HTML elements (`p`, `div`, `h1`, etc) and applies CSS to them. For example,\n\nLet's see an example,\n\n```xml\n<body>\n    <h1>Heading</h1>\n    <p>This is a paragraph.</p>\n</body>\n```\n\n    h1 {\n        color: red;\n    }\n    \n    p {\n        color: orange;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-element-selector-example.png)\n\nIn the above example, the element selector\n\n* `h1` selects all `h1` elements and styles their `color` to `red`\n* `p` selects all `p` elements and styles their `color` to `orange`\n\n**Note**: The element selector is also referred to as a tag selector because it selects HTML elements based on their tag names.\n\n### ID Selector\n\nThe id selector selects the HTML element with a unique identifier (id) and adds CSS to it.\n\nThe id selector is specified using the hash (`#`) character, followed by the id of the element.\n\nLet's see an example,\n\n```xml\n<body>\n    <p>First Paragraph</p>\n    <p id=\"second-paragraph\">Second Paragraph</p>\n    <p>Third Paragraph</p>\n</body>\n```\n\n    #second-paragraph {\n        color: red;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-id-selector-example.png)\n\nHere,\n\n* `#`- id selector\n* `second-paragraph`- the name of the id\n\nThe id selector `#second-paragraph` selects the second paragraph and styles the text color to `red`.\n\n**Note**: The id selector is unique and selects one unique element.\n\n### Class Selector\n\nThe class selector selects the HTML element using the `class` attribute and applies CSS to it.\n\nThe class selector is specified using the period (`.`) character, followed by the class name.\n\nLet's see an example,\n\n```xml\n<body>\n    <h2>Section First</h2>\n    <p class=\"first-paragraph\">This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n    <h2>Section Second</h2>\n    <p class=\"first-paragraph\">This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>\n```\n\n    .first-paragraph {\n        background-color: orange;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-class-selector-example.png)\n\nHere,\n\n* `.`- class selector\n* `first-paragraph`-name of the class\n\nThe class selector `.first-paragraph` selects all the paragraphs having the `first-paragraph` class name and styles `background-color` to `orange`.\n\n### Universal Selector\n\nThe universal selector selects every single HTML element on the page. It is written using the asterisk ( `*` ) character.\n\nLet's see an example,\n\n```xml\n<body>\n    <h1>Heading</h1>\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n</body>\n```\n\n    * {\n        color: red;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-universal-selector-example.png)\n\nIn the above example, the universal selector `*` selects all the HTML elements and applies the `red` color.\n\n**Note**: The universal selector is also referred to as the wildcard selector.\n\n### Group Selector\n\nThe group selector allows you to select multiple elements and apply the same style to all of them.\n\nLet's see an example,\n\n```xml\n<body>\n    <h1>Heading</h1>\n    <p>This is a paragraph.</p>\n</body>\n```\n\n    h1, p {\n        color: blue;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-group-selector-example.png)\n\nHere, the code applies CSS styling to all `<h1>` and `<p>` elements. Notice that we have used `,` to separate the HTML elements..\n\n### Attribute Selector\n\nThe attribute selector selects elements based on specific attribute values.\n\nThe syntax for the attribute selector is:\n\n```\nElement[attribute]\n```\n\nLet's see an example,\n\n```xml\n<body>\n    <p class=\"first\">This is a first paragraph.</p>\n    <p>This paragraph doesn't have a class attribute.</p>\n    <p class=\"third\">This is a third paragraph.</p>\n    <p class=\"fourth\">This is a fourth paragraph.</p>\n</body>\n```\n\n    p[class] {\n        background-color: orange;\n    }\n    \n    p[class=\"third\"] {\n        color: blue;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-attribute-selector-example.png)\n\nIn the above example, the attribute selector\n\n* `p[class]` selects all `p` elements having the `class` attribute and styles their background color to `red`.\n* `p[class=\"third\"]` selects all `p` elements with the `.third` class name and styles their color to `blue`.\n\n**Note**: This selector only selects an element if a specified given attribute exists.\n\n## Pseudo-classes (Additional)\n\nA **pseudo-class** is a keyword added to selectors that specifies a special state of the selected element(s). \n\nFor example, it can be used to style an element when a user hovers over it, or when a user clicks it. \n\nCSS pseudo-classes can also be used to allow styling based on elements that are in a certain state, such as being disabled or having been visited before.\n\nIn general, what makes a pseudo-class different from a regular class is that classes are used to target specific elements on the page, while pseudo-classes are used to target elements based on their state or position.\n\n**Syntax:**\n\nA pseudo-class starts with a colon (:) followed by the keyword.\n\n```\nselector:pseudo-class {\n  /* your style here */\n}\n```\n\nSome of the most commonly used pseudo-classes are:\n\n| Pseudo-class | Description |\n|---|---|\n| :hover | Used when a user hovers over an element with the mouse pointer. |\n| :active | Used to style an element when it is clicked. |\n| :focus | Used to highlight elements when they are selected or focused on by the user. |\n| :visited | Used to style elements that have been previously visited. |\n| :first-child | Used to style an element that is the first child of its parent element. |\n| :last-child | Used to style an element that is the last child of its parent element. |\n| :not | Used to target elements that do not match a given selector. |\n| :enabled | Used to style an element when it is enabled. |\n| :disabled | Used to style an element when it is disabled. |\n\n\n**Example:**\n\nThe following example makes use of the `:hover` pseudo-class to change an element from purple with a dotted underline to yellow with a regular underline when a user hovers over it:\n\n    a {\n      color: purple;\n      text-decoration: underline dotted;\n    }\n    a:hover {\n      color: yellow;\n      text-decoration: underline;\n    }\n\nWhen applied on an element, it will look like the following:\n\n![](https://i.ibb.co/t2vqBD4/zenith-anchor.gif)\n\nAnother example would be to styling the button with smooth clicking effect by using the `:active` pseudo-class.\n\n    button {\n      all: unset;\n      background: lightgreen;\n      padding: 10px 20px;\n      border-radius: 5px;\n      transition: .4s ease;\n    }\n    button:active {\n      filter: brightness(1.1);\n      transform: scale(.87)\n    }\n\n**Output:**\n\n![](https://i.ibb.co/hm0xyMm/active-state.gif)\n\nYou can see the smooth pinch-in effect applied to button element during clicking (triggering `:active` pseudo class).\n"],"3":["Demystifying CSS Typography","\n# Demystifying CSS Typography\n\n![](https://www.hostinger.com/tutorials/wp-content/uploads/sites/2/2021/09/best-html-web-fonts-2.webp)\n\nTypography in CSS refers to the art and technique of styling text to enhance readability, legibility, and visual appeal on webpages. \n\nIt involves controlling various aspects of text, such as font family, size, weight, spacing, and decoration, to create a cohesive and aesthetically pleasing design.\n\nIf you have ever asked yourself “how do you change text in CSS?”, this is the right post for you. In the following, we will go over the many ways you can customize text on a website using CSS rules.\n\nThankfully, CSS offers a lot of styling options to help with that. In this post, we will cover all the most important ones and some lesser known.\n\n## Commonly used Text Properties\n- `font-family`\n- `font-size`\n- `font-weight`\n- `font-variant`\n- `font`\n- `color`\n- `text-transform`\n- `text-decoration`\n- `text-shadow`\n- `text-align`\n- `line-height`\n- `word-spacing`\n- `letter-spacing`\n\n### 1. font-family\n\nThe first thing we want to talk about is the `font-family` property. This one determines which font your text will use.\n\n![font family customize text css](https://torquemag.io/wp-content/uploads/2022/04/font-family-customize-text-css.jpg)\n\n\nIt’s pretty easy to use. Below is the accompanying code for the example above.\n\n    #div-one {\n      font-family: Arial;\n    }\n    \n    #div-two {\n      font-family: Courier;\n    }\n    \n    #div-three {\n      font-family: Impact;\n    }\n\nYou simply determine the element that you want to change the font of with a CSS selector, add the `font-family` property, and include the name of the font as the value.\n\nValues can either be font family names like `Arial` and `\"Open Sans\"` or generic font declarations such as `serif` or `monospace`. If you use the latter, the browser will use the closest approximation it has.\n\nIf the value contains whitespace, such as “`Times New Roman\"`, you need to use double quotation marks, if it doesn’t, like `Tahoma` or `sans-serif`, you can omit them.\n\n#### Creating Font Stacks\n\nIn web design, you usually include fallback fonts by giving a list of fonts (a so-called font stack) divided by commas.\n\n    #div {\n      font-family: \"Open Sans\", Arial, sans-serif;\n    }\n\nThese are in case the browser does not have the original font available (e.g. because it’s not installed on the user computer or missing on the website). It then moves on to the second in the list, and so forth until it finds one that it can work with.\n\nThis way, you can make sure that your website still looks most like what you originally had in mind even if a visitor can’t make use of the font you had intended.\n\n### 2. font-size\n\nAs is probably obvious, with this CSS property you can customize the size of text.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/font-size-customize-text-css.jpg)\n\nYou have two choices: set absolute sizes (e.g. in `px`) or relative (in `em`, `rem`, or similar).\n\n    #div-one {\n      font-size: 20px;\n    }\n    \n    #div-two {\n      font-size: 8em;\n    }\n    \n    #div-three {\n      font-size: 5rem;\n    }\n\nThe latter is more common these days as it’s more useful for responsive design and accessibility.\n\nWhen using `em`, `1em` equals `16px` (that’s the browser default font size) you can calculate other font sizes from there, just divide the pixel value you want by 16 to arrive at the `em` value. \n\nFor example, these two font-size declarations will come out the same size:\n\n    #div-one {\n      font-size: 32px;\n    }\n    \n    #div-two {\n      font-size: 2em;\n    }\n\n### 3. font-weight\n\nUse `font-weight` to control the thickness of your fonts.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/font-weight-customize-text-css.jpg)\n\nThere are several ways to do this. Either use one of the pre-existing font weight designations (`thin`, `light`, `normal`, `bold`, `extra-bold`, etc. or input a bold value number (between `1` and `1000` for variable fonts, in steps of one hundred between `100` and `900` for non-variable fonts).\n\n    #div-one {\n      font-weight: light;\n    }\n    \n    #div-two {\n      font-weight: 800;\n    }\n    \n    #div-three {\n      font-weight: bolder;\n    }\n\nYou can also use `lighter` and `bolder` to state that you want to increase/decrease the weight by one step in comparison to the parent element. However, this is very rare.\n\nBe aware that, in order to use a particular font weight, it needs to be present on your site or user’s machine (and available in the chosen font to begin with). \n\nThat’s why, when installing custom fonts, you can choose which font weights to include.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/custom-font-available-font-weights-1024x964.jpg)\n\nIf a weight is not loaded, the browser can not use it.\n\n### 4. font-style\n\nIn almost all cases this CSS property is used to make a font italic. It only takes three values: `normal` (default), `italic`, and `oblique`.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/font-style-customize-text-css.jpg)\n\n`oblique` is almost the same as `italic` but simulates italicized fonts by slanting the original font. Also, browser support is worse. Here’s how to use `font-style`:\n\n    #div-one {\n      font-style: normal;\n    }\n    \n    #div-two {\n      font-style: italic;\n    }\n    \n    #div-three {\n      font-style: oblique;\n    }\n\n### 5. font-variant\n\n`font-variant` only has one use: to make fonts appear in small caps, which means lowercase letters transformed into smaller uppercase. Sounds unclear? Here’s what I mean:\n\n![](https://torquemag.io/wp-content/uploads/2022/04/font-variant-customize-text-css.jpg)\n\nDon’t ask me for a use case for this, that’s probably from the ancient times of the Internet. \n\nIf you want to give it a try, here’s how to do it:\n\n    #div {\n      font-variant: small-caps;\n    }\n\n### 6. font\n\n![](https://torquemag.io/wp-content/uploads/2022/04/font-property-customize-text-css.jpg)\n\nThis is a shorthand property that you can use to declare `font-style`, `font-variant`, `font-weight`, `font-size`, `line-height`, and `font-family` all in one declaration.\n\n    #div {\n      font: italic small-caps 300 40px/200px Impact;\n    }\n\nHere’s the syntax for how to use it (note the slash between `font-size` and `line-height`, this is mandatory if you want to declare both):\n\n    font: font-style font-variant font-weight font-size/line-height font-family;\n\nOnly `font-size` and `font-family` are required, the rest will fall back to the default if it’s not declared.\n\n### 7. color\n\nThe `color` property determines, you guessed it, the font color and only the font color (including any `text-decoration` elements). \n\nMany beginners might think that it should also determine the color of the entire elements but for that you have to look into `background-color` (because, technically, `color` colors the foreground).\n\n![](https://torquemag.io/wp-content/uploads/2022/04/color-customize-text-css.jpg)\n\nUsing `color` is simple enough:\n\n    #div-one {\n      color: #f2db3f;\n    }\n    #div-two {\n      color: #1bf20f;\n    }\n    #div-three {\n      color: #412535;\n    }\n\nYou can define the color of text in several different ways:\n\n* Using a color name like `red`, `pink`, `blue` but also `papayawhip` or `navajowhite` are also available.\n* As a hex value, e.g. `#ff0000`.\n* An RGB color value such as `rgb(255, 0, 0);`.\n\n### 9. text-transform\n\nAnother way to customize text on your website via CSS is to use `text-transform`. \n\nIt has only three use cases: make text all uppercase, all lowercase, or capitalize the first letter of every word.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/text-transform-customize-text-css.jpg)\n\nIt’s also very simple to use:\n\n    #div-one {\n      text-transform: uppercase;\n    }\n    #div-two {\n      text-transform: lowercase;\n    }\n    #div-three {\n      text-transform: capitalize;\n    }\n\nThere is another value for `text-transform`, which is `full-width`. \n\nIt transforms all letters to be placed inside a fixed-width square. This is usually only relevant when using glyphs of Asian languages like Japanese or Korean, especially in combination with the Latin alphabet.\n\n### 10. text-decoration\n\nThis is actually a shorthand for four different properties: `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and `text-decoration-thickness`.\n\n![](https://torquemag.io/wp-content/uploads/2022/04/text-decoration-customize-text-css.jpg)\n\nHowever, in most cases, you simply use `text-decoration` on its own. What kind of values do the different properties take and what do they do?\n\n* `text-decoration-line` — You can use `overline`, `line-through`, `underline`, and `none` to create lines above, below, or through text. `none` is most often used to remove the standard underlining of links. You can also use more than one value in combination.\n* `text-decoration-color` — Controls the color of the line. It takes the usual CSS color declarations.\n* `text-decoration-style` — Change the style of the decoration. It can be `solid`, `double`, `dotted`, `dashed`, `wavy`, and `none`.\n* `text-decoration-thickness` — Set how thick the line appears via the usual values, like `px`, `%`, and `em`. It also takes `auto` and `from-font`, which uses any value that might be included in the chosen font.\n\n#### How to Use text-decoration\n\nYou can use these on their own but, as mentioned, it’s more common to use the shorthand instead. Here’s the syntax for that:\n\n    text-decoration: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness;\n\nOnly the value for `text-decoration-line` is required, the rest is optional. To achieve the effects seen in the example image above, you can use the code below.\n\n    #div-one {\n      text-decoration: overline;\n    }\n    #div-two {\n      text-decoration: line-through;\n    }\n    #div-three {\n      text-decoration: underline dotted;\n    }\n    #div-four {\n      text-decoration: line-through black 10px;\n    }\n    #div-five {\n      text-decoration: underline wavy 0.1em;\n    }\n    #div-six {\n      text-decoration: none;\n    }\n\nQuick tip: \n\n- A common alternative to using `text-decoration` for underlining text such as links, is to use the `border` property instead. \n- It offers the benefit that you can control the distance between the line and the text and can also make the line extend beyond the text. Both are not possible with `text-decoration`.\n\n### 11. text-shadow\n\n![text shadow](https://torquemag.io/wp-content/uploads/2022/04/text-shadow-customize-text-css.jpg)\n\n\n    #div-one {\n      text-shadow: -5px 4px black;\n    }\n    \n    #div-two {\n      text-shadow: 0 0 20px #fff;\n    }\n    \n    #div-three {\n      text-shadow:\n      -10px -10px rgba(0, 0, 0, 0.4),\n      -20px -20px rgba(0, 0, 0, 0.3),\n      -30px -30px rgba(0, 0, 0, 0.2),\n      -40px -40px rgba(0, 0, 0, 0.1),\n      -50px -50px rgba(0, 0, 0, 0.05);\n    }\n\n`text-shadow` takes up to four values: horizontal offset, vertical offset, `blur`, and `color`.\n\n    text-shadow: offset-x offset-y blur-radius color;\n\nThe first two are mandatory when using `text-shadow`, the others are optional. Note that the offsets take negative values to move the shadow left and up, positive values for right and down.\n\nYou can define both offsets, `blur`, and `color` in the usual ways for determining dimensions and colors in CSS. Except for `color`, they most commonly use `px`.\n\n### 12. text-align\n\nWith the CSS property `text-align`, you can customize the horizontal alignment of text on your website. \n\nIt can either be `left`, `right`, `center`, or `justify` (meaning the spaces between words stretch to make the text fit the available space).\n\n![text align customize text css](https://torquemag.io/wp-content/uploads/2022/04/text-align-customize-text-css.jpg)\n\nHere’s the accompanying code to the image above:\n\n    #div-one {\n      text-align: left;\n    }\n    \n    #div-two {\n      text-align: right;\n    }\n    \n    #div-three {\n      text-align: center;\n    }\n    \n    #div-four {\n      text-align: justify;\n    }\n\nNote that, depending on the text direction (left to right or right to left), the default alignment is either left or right and there is no need specifically define it via CSS as it happens automatically.\n\nRelated properties to `text-align` are:\n\n* `text-align-last` — Works the same as text-align but only affects the last line of text in an element.\n* `direction`/`unicode-bidi` — Allow you to change the direction of text (e.g. right-to-left).\n\n### 13. line-height\n\n![line height](https://torquemag.io/wp-content/uploads/2022/04/line-height-customize-text-css.jpg)\n\nThis can make a difference in the spacing between lines of text. \n\nIt takes the usual CSS size and length units but is most commonly simply defined as a multiplier without a unit.\n\n    div {\n      line-height: 2;\n    }\n\nWhen you do that, the line height will simply be a product of the font size and the value in `line-height`.\n\n### 14. word-spacing\n\nThis property gives you control over the distance between individual words (you would have never guessed that, I am sure).\n\n![word spacing](https://torquemag.io/wp-content/uploads/2022/04/word-spacing-customize-text-css.jpg)\n\nAs you can see from the image above, it also takes negative values to make the distance smaller. \n\nAside from that, you can use it with most length and size unit declarations available in CSS.\n\n    div {\n      word-spacing: 10px;\n    }\n\n### 15. letter-spacing\n\nThe name also already gives it away, you can use this to increase or decrease the space between letters.\n\n![letter spacing](https://torquemag.io/wp-content/uploads/2022/04/letter-spacing-customize-text-css.jpg)\n\nThe latter happens, of course, via negative values and `letter-spacing`, too, takes the usual units for declaring sizes.\n\n    div {\n      letter-spacing: 12px;\n    }\n\nThere are also more CSS properties that let you work with text and really get into the nitty gritty. \n\nYou may want to look into things like `word-break`, `hyphen`, or `font-kerning` if you want to get really nerdy.\n"],"4":["Styling Images and Backgrounds","\n# Styling Images and Backgrounds\n\n![](https://kinsta.com/wp-content/uploads/2023/06/css-image-styling-1024x512.jpg)\n\nAn image is visual content that is displayed on a web page using specified URL (whether it's relative URL or absolute URL).\n\nImages are crucial in enhancing the visual appeal of a website, conveying information, and engaging users.\n\nCSS offers properties for styling and manipulating images, including image resizing, alignment, and filtering effects. \n\nBy leveraging these properties effectively, developers can create engaging and dynamic backgrounds and images that complement the overall design aesthetic of the webpage, enhancing the user experience and visual impact.\n\n### Add Image in HTML\n\nAn image is added in HTML using `<img>` element.\n\n    <img src=\"house.png\" alt=\"A building\" />\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-adding-image-in-html.png)\n\nThe above example shows the default image in HTML without any CSS styles. \n\nBy default, images take their default width and height we don't want to apply any CSS rules for that.\n\n## Common Ways of Styling Images\n\nWe can use CSS to style our image in the following ways,\n\n* Changing the image size\n* Adding a rounded corner to the image\n* Centering image\n* Creating thumbnail image\n* Creating transparent image\n* Creating image card\n* Creating image text overlay\n* Object-fit property\n* Applying image filters\n* Adding hover to the image\n* Adding a flipping effect to the image\n\nLet's look at each of them in detail.\n\n### Changing the Image Size\n\nThe `width` and `height` properties are used to resize the image. For example,\n\n```xml\n<body>\n    <h2>Original Image</h2>\n    <img src=\"https://i.ibb.co/VD8qc5L/pokemon.jpg\" alt=\"Pokemons playing in fields\" />\n    \n    <div class=\"styled-image\">\n        <h2>After setting up width and height properties</h2>\n        <img src=\"https://i.ibb.co/VD8qc5L/pokemon.jpg\" alt=\"Pokemons playing in fields\" />\n    </div>\n</body>\n```\n\n    .styled-image img {\n        width: 280px;\n        height: 200px;\n    }\n\n**Browser Output**\n\n![](https://i.ibb.co/ZXSV8G7/pokes.png)\n\nThe above example shows the default image and the image with a fixed width and height of `280px` and `200px`, respectively.\n\n**Note**: Adjusting the `width` and `height` properties of an image can change the proportion of its width to height. This is known as distorting the aspect ratio.\n\nTo maintain the original proportions of an image, use the max-width property to set an upper limit on width while allowing the height to adjust automatically.\n\n### Adding Rounded Corner to Image\n\nThe `border-radius` property is used to add the rounded corners around the image. For example,\n\n```xml\n<body>\n    <img src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n</body>\n```\n\n    img {\n        width: 200px;\n        height: 200px;\n        border-radius: 10px;\n    }\n\n**Browser Output**\n\n![CSS Image Rounded Corners Example](https://www.programiz.com/sites/tutorial2program/files/css-image-rounded-corners-example.png \"CSS Image Rounded Corners Example\")\n\nIn the above example, the `border-radius` property rounds the corners of the image with a `10px` of border-radius.\n\nWe can make a circular image by adding:\n\n    border-radius: 50%;\n\n**Browser Output**\n\n![CSS Circular Image Example](https://www.programiz.com/sites/tutorial2program/files/css-circular-image-example.png \"CSS Circular Image Example\")\n\n### Centering Image\n\nWe can center an image in a container with the help of `display` and `margin` properties. For example,\n\n    img {\n        width: 150px;\n        display: block;\n        margin-left: auto;\n        margin-right: auto;\n    }\n\n**Browser Output**\n\n![CSS Center Image Example](https://www.programiz.com/sites/tutorial2program/files/css-center-image-example.png \"CSS Center Image Example \")\n\nIn the above example,\n\n* `display: block` converts the image into a block-level element\n* `margin-left: auto` and `margin-right: auto` center an image horizontally by creating an equal space around it\n\n**Note**: Block-level elements begin on a new line and take the full available width of the parent element.\n\n### Creating Thumbnail Image\n\nThe `border` property is used to create a thumbnail image. For example,\n\n    img {\n        max-width: 150px;\n        border: 1px solid black;\n        padding: 10px;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-thumbnail-image-example.png)\n\nHere, the `border` property adds a `solid` `black` border of `1px` around the image, creating an appearance like a thumbnail.\n\n### Creating Transparent Image\n\nThe `opacity` property adds transparency to an image.\n\nThe value of the `opacity` property ranges from `0.0` to `1.0`. The lower value represents the more transparent image.\n\nLet's see an example,\n\n```xml\n<body>\n    <div>\n      <p>Opacity-0.1</p>\n      <img\n          class=\"first-image\"\n          src=\"https://i.ibb.co/41ZyXkF/building.jpg\"\n          alt=\"Building\" \n        />\n    </div>\n    <div>\n      <p>Opacity-0.5</p>\n      <img\n          class=\"second-image\"\n          src=\"https://i.ibb.co/41ZyXkF/building.jpg\"\n          alt=\"Building\" \n        />\n    </div>\n    <div>\n      <p>Opacity-1</p>\n      <img\n          class=\"third-image\"\n          src=\"https://i.ibb.co/41ZyXkF/building.jpg\"\n          alt=\"Building\" \n        />\n    </div>\n</body>\n```\n\n    img {\n        max-width: 150px;\n    }\n    \n    .first-image {\n        opacity: 0.1;\n    }\n    \n    .second-image {\n        opacity: 0.5;\n    }\n    \n    .third-image {\n        opacity: 1;\n    }\n    \n    div {\n      display: inline-block;\n      margin-right: 20px;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-tranparent-image-example.png)\n\nThe above example shows images with different opacity values.\n\n### Creating Image Card\n\nLet's create an image card using different CSS properties.\n\n```xml\n<body>\n    <div class=\"image-card\">\n      <img\n          src=\"https://i.ibb.co/41ZyXkF/building.jpg\"\n          alt=\"Building\" \n        />\n      <div class=\"card-content\">\n          <p>Image Card</p>\n      </div>\n    </div>\n</body>\n```\n\n    .image-card {\n        max-width: 200px;\n        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.3);\n        border-radius: 8px;\n        overflow: hidden;\n    }\n    \n    .image-card img {\n        width: 100%;\n        height: auto;\n    }\n    \n    .card-content {\n        text-align: center;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-image-card-example.png)\n\nThe above example creates a simple image card.\n\n## Creating Image Text Overlay\n\nWe can place and position text in an image using different CSS properties. For example,\n\n```xml\n<body>\n    <div class=\"container\">\n        <img \n            src=\"https://i.ibb.co/SBDHq94/sky.jpg\"\n            alt=\"Building\" \n            />\n        <p class=\"top-left\">Top Left</p>\n        <p class=\"top-right\">Top Right</p>\n        <p class=\"bottom-left\">Bottom Left</p>\n        <p class=\"bottom-right\">Bottom Right</p>\n        <p class=\"center\">Center</p>\n    </div>\n</body>\n```\n\n    .container {\n        position: relative;\n    }\n    \n    .top-left {\n        position: absolute;\n        top: 5px;\n        left: 10px;\n        color: white;\n    }\n    \n    .top-right {\n        position: absolute;\n        top: 5px;\n        right: 10px;\n        color: white;\n    }\n    \n    .bottom-left {\n        position: absolute;\n        bottom: 5px;\n        left: 10px;\n        color: white;\n    }\n    \n    .bottom-right {\n        position: absolute;\n        bottom: 5px;\n        right: 10px;\n        color: white;\n    }\n    \n    .center {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: white;\n    }\n    \n    img {\n        width: 100%;\n        height: 200px;\n    }\n\n**Browser Output**\n\n![CSS Image Text Example](https://www.programiz.com/sites/tutorial2program/files/css-image-text-example.png \"CSS Image Text Example\")\n\nThe above example shows different positions of the text on the image.\n\n**Note**: To absolutely position any inner child element within a container, it is important to set the position of the container to relative.\n\nThis is because absolutely positioned elements are positioned relative to their nearest positioned ancestor.\n\n### Object Fit\n\nThe `object-fit` property specifies how an image should fit inside the container without affecting its aspect ratio.\n\nThe `object-fit` property can take several values as:\n\n* `fill`: stretches the image to fill the entire container\n* `contain`: scales image to fit within the container maintaining its aspect ratio\n* `cover`: scales image to cover the entire container\n* `scale-down`: scales down the image to its smallest version\n* `none`: does not resize the image\n\nLet's see an example,\n\n```xml\n<body>\n    <div>\n      <h2>Object-Fit: Fill</h2>\n      <img class=\"fill\" src=\"https://i.ibb.co/SBDHq94/sky.jpg\" alt=\"Image\" />\n    </div>\n    <div>\n      <h2>Object-Fit: Cover</h2>\n      <img class=\"cover\" src=\"https://i.ibb.co/SBDHq94/sky.jpg\" alt=\"Image\" />\n    </div>\n    <div>\n      <h2>Object-Fit: Scale Down</h2>\n      <img class=\"scale-down\" src=\"https://i.ibb.co/SBDHq94/sky.jpg\" alt=\"Image\" />\n    </div>\n    <div>\n      <h2>Object-Fit: Contain</h2>\n      <img class=\"contain\" src=\"https://i.ibb.co/SBDHq94/sky.jpg\" alt=\"Image\" />\n    </div>\n  </body>\n```\n\n    img {\n        width: 200px;\n        height: 200px;\n        border: 2px solid #333;\n        margin: 10px;\n    }\n    \n    img.fill {\n        object-fit: fill;\n    }\n    \n    img.cover {\n        object-fit: cover;\n    }\n    \n    img.scale-down {\n        object-fit: scale-down;\n    }\n    \n    img.contain {\n        object-fit: contain;\n    }\n\n**Browser Output**\n\n![](https://i.ibb.co/gmfQK0N/object-fit.png)\n\n### Image Filters\n\nThe `filter` property is used to create various visual effects on an element. For example,\n\n\n```xml\n<body>\n  <div>\n    <p>filter: blur(3px);</p>\n    <img class=\"blur\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n  </div>\n  \n  <div>\n    <p>filter: brightness(150%);</p>\n    <img class=\"brightness\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: contrast(200%);</p>\n    <img class=\"contrast\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: sepia(100%)</p>\n    <img class=\"sepia\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: greyscale(100%)</p>\n    <img class=\"grayscale\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: hue-rotate(90deg)</p>\n    <img class=\"huerotate\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: invert(150%)</p>\n    <img class=\"invert\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n  \n  <div>\n    <p>filter: saturate(5)</p>\n    <img class=\"saturate\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"building\" />\n  </div>\n</body>\n```\n\n    div {\n        display: inline-block;\n        margin: 12px;\n    }\n    \n    img {\n        max-width: 200px;\n    }\n    \n    .blur {\n        filter: blur(3px);\n    }\n    \n    .brightness {\n        filter: brightness(150%);\n    }\n    \n    .contrast {\n        filter: contrast(200%);\n    }\n    \n    .sepia {\n        filter: sepia(100%);\n    }\n    \n    .greyscale {\n        filter: greyscale(100%);\n    }\n    \n    .huerotate {\n        filter: hue-rotate(90deg);\n    }\n    \n    .invert {\n        filter: invert(150%);\n    }\n    \n    img.saturate {\n        filter: saturate(5);\n    }\n\n**Browser Output**\n\n![](https://i.ibb.co/jvGL80L/filters.jpg)\n\n### Image Hover Overlay\n\nThe :`hover` pseudo class selector is used to change the overlay effect on hovering the image. For example,\n\n```xml\n<body>\n    <div class=\"container\">\n      <img src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n      <div class=\"overlay overlay-left\">\n          <p class=\"overlay-text\">Slide in (left)</p>\n      </div>\n    </div>\n    <div class=\"container\">\n      <img src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n      <div class=\"overlay overlay-right\">\n          <p class=\"overlay-text\">Slide in (right)</p>\n      </div>\n    </div>\n    <div class=\"container\">\n      <img src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n      <div class=\"overlay overlay-top\">\n          <p class=\"overlay-text\">Slide in (top)</p>\n      </div>\n    </div>\n    <div class=\"container\">\n      <img src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n      <div class=\"overlay overlay-bottom\">\n          <p class=\"overlay-text\">Slide in (bottom)</p>\n      </div>\n    </div>\n</body>\n```\n\n    .container {\n        max-width: 200px;\n        border: 1px solid black;\n        position: relative;\n        overflow: hidden;\n        margin-bottom: 12px;\n    }\n    \n    .overlay {\n        width: 100%;\n        height: 100%;\n        background-color: purple;\n        position: absolute;\n        transition: all 0.7s ease;\n    }\n    \n    .overlay-text {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        color: white;\n        font-weight: bold;\n    }\n    \n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n    \n    /* creating the left overlay */\n    .overlay-left {\n        left: -100%;\n        top: 0;\n    }\n    \n    .container:hover .overlay-left {\n        left: 0;\n    }\n    \n    /* creating the right overlay */\n    .overlay-right {\n        right: -100%;\n        top: 0;\n    }\n    \n    .container:hover .overlay-right {\n        right: 0;\n    }\n    \n    /* creating the bottom overlay */\n    .overlay-bottom {\n        bottom: -100%;\n        left: 0;\n    }\n    \n    .container:hover .overlay-bottom {\n        bottom: 0;\n    }\n    \n    /* creating the top overlay */\n    .overlay-top {\n        top: -100%;\n        left: 0;\n    }\n    \n    .container:hover .overlay-top {\n        top: 0;\n    }\n\n**Browser Output**\n\n![](https://i.ibb.co/nj7RKvw/hover-overlays.gif)\n\n### Flip an Image\n\nLet's see how we can flip an image.\n\n```xml\n<body>\n    <div>\n      <p>Horizontal Flip</p>\n      <img class=\"horizontal-flip\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n    </div>\n    \n    <div>\n      <p>Vertical Flip</p>\n      <img class=\"vertical-flip\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n    </div>\n    \n    <div>\n      <p>Diagonal Flip</p>\n      <img class=\"diagonal-flip\" src=\"https://i.ibb.co/41ZyXkF/building.jpg\" alt=\"Building\" />\n    </div>\n</body>\n```\n\n    div {\n        display: inline-block;\n        margin: 12px;\n        text-align: center;\n    }\n    \n    img {\n        width: 200px;\n    }\n    \n    .horizontal-flip {\n        transform: scaleX(-1);\n    }\n    \n    .vertical-flip{\n        transform: scaleY(-1);\n    }\n    \n    .diagonal-flip {\n        transform: scaleX(-1) scaleY(-1);\n    }\n\n**Browser Output**\n\n![](https://i.ibb.co/M2BRYLM/image-flips.jpg)\n\n## Background\n\nCSS `background` property is used to add a color or an image to the background of an element. For example,\n\n    h1 {\n        background: orange;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-background-property.png)\n\nHere, the `background` property adds `orange` color as a background to the `h1` element.\n\n### Background as Shorthand Property\n\nThere are various CSS background properties that can be specified into a single `background` property as a shorthand. The syntax of the `background` shorthand property is,\n\n    background: background-image background-position / background-size background-repeat background-attachment background-origin background-clip background-color;\n\nHere,\n\n* `background-image`: allows to add an image as a background of an element\n* `background-position`: specifies the position of the background image within the element\n* `background-size`: specifies the size of the background image\n* `background-repeat`: controls the repeating behavior of a background image\n* `background-attachment`: controls whether the background image scrolls or remains fixed with the page's content\n* `background-origin`: specifies the starting position of the background area within the element\n* `background-clip`: defines the background area for an element to clip\n* `background-color`: sets the background color in an element\n\n**Note**: The order of the values of the shorthand `background` property is recommended as syntax. If any of the values are skipped, then it takes the default value of that property value.\n\nLet's see an example for shorthand `background` property,\n\n```xml\n<body>\n    <!-- Adding a background image -->\n</body>\n```\n    body {\n        /* background shorthand property */\n        background: url(\"avatar.png\") top center no-repeat lightgray;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-background-shorthand-property-example.png)\n\nIn the above example,\n\n    background: url(\"avatar.png\") top center no-repeat lightgray;\n\nIs equivalent to,\n\n    body {\n        background-image: url(\"avatar.png\");\n        background-position: top center;\n        background-repeat: no-repeat;\n        background-color: lightgray;\n    }\n\nHere's the results, which are achieved by using `background` property.\n\n![](https://assets.digitalocean.com/articles/67917/1.jpg)\n\nWe would greatly encourage to get your hands dirty by practicing on styling images, it will enhance your designing capabilities!.  \n"],"5":["Introduction to Box Model","\n# Introduction to Box Model\n\n![](https://cdn.sanity.io/images/tlr8oxjg/production/acaceb27f1c52bce9db7527d89fbd95299df7421-1456x816.png?w=1000&q=80&fit=clip&auto=format)\n\nThe CSS's box model is a fundamental concept that defines how the element's dimensions and spacing are calculated.\n\nThe box model treats every HTML element as a rectangular box consisting of content, padding, border, and margin.\n\nUnderstanding and manipulating the CSS box model is essential for accurately controlling the layout and spacing of elements in web design.\n\n## Components of the box model\n\nThe box model defines the layout of an HTML element in the following way:\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-box-sizing-layout.png)\n\n* `content`: actual text or image that is displayed in the element\n* `padding`: transparent space between the content and the border of an element\n* `border`: line that surrounds the padding and content within the element\n* `margin`: transparent area added outside the border\n\nThe primary purpose of the box model is to explain how the dimensions and spacing of elements are calculated and how they relate to each other.\n\n## Width and Height with Box Model\n\nThe box model is important for understanding how the `width` and `height` of an element are calculated.\n\nThe `width` and `height` of the element are applied only to the `content` of the element by default. \n\nHence, the actual size of the element is calculated by adding the `padding` and `border` along with the specified `width` and `height` of the element.\n\n```\nActual width: border-left + padding-left + width + padding-right + border-right\n```\n    \n```\nActual height: border-top + padding-top + height + padding-bottom + border-bottom\n```\n\nLet's see an example,\n\n```xml\n<body>\n    <div>\n        The CSS box model is a way of describing the layout of an HTML\n        element.\n    </div>\n</body>\n```\n\n    div {\n        width: 400px;\n        height: 80px;\n        border: 10px solid black;\n        padding: 15px;\n        background-color: greenyellow;\n        /* clips the background color to content only */\n        background-clip: content-box;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-box-model-example.png)\n\nIn the above example, we have specified\n\n    div {\n        width: 400px;\n        height: 80px;\n        border: 10px solid black;\n        padding: 15px;\n    }\n\nThe `width` and `height` of the `div` are applied only to the `content` of the element. The actual `width` and `height` of the element are:\n\n    width = 10px + 15px + 400px + 15px + 10px = 450px\n    height = 10px + 15px + 80px + 15px + 10px = 130px\n\nHence, the actual `width` becomes `450px`, and the `height` becomes `130px`.\n\n**Note**: The `margin` is not added to calculate the actual size of the box, even though it affects the total space the box takes on the page. The `border` marks the boundary of the box area, and it does not extend into the `margin`.\n\n## Box Model With Inline Elements\n\nThe box model is applied differently to inline elements. \n\nThis is because inline elements don't have a default `width` or `height` and occupy space based on the size of their content.\n\nLet's see an example,\n\n```xml\n<body>\n    <p>\n        The box model works differently for inline elements. For example,\n        this <span>span</span> element does not work as expected.\n    </p>\n</body>\n```\n\n    p {\n        width: 350px;\n        border: 1px solid black;\n    }\n    \n    span {\n        width: 100px;\n        height: 40px;\n        border: 5px solid black;\n        padding: 10px;\n        margin: 10px;\n        background-color: greenyellow;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-box-model-inline-example-one.png)\n\nIn the above example,\n\n* The `height` and `width` are ignored.\n* The `top` and `bottom` margins are also ignored, and only the `left` and `right` margins work.\n* The `padding` works for all four sides of the elements.\n\nHence, we cannot calculate the actual dimensions of the inline element.\n\nIn order to apply the box model in the inline elements, the `display` property should be changed to either `inline-block` or `block`.\n\nLet's see an example with `inline-block`,\n\n```xml\n<body>\n    <p>\n        The box model works differently for inline elements. For example,\n        this <span>span</span> element does not work as expected.\n    </p>\n</body>\n```\n\n    p {\n        width: 350px;\n        border: 1px solid black;\n    }\n    \n    span {\n        display: inline-block;\n        width: 100px;\n        height: 40px;\n        border: 5px solid black;\n        padding: 10px;\n        margin: 10px;\n        background-color: greenyellow;\n    }\n\n**Browser Output**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-box-model-inline-example-two.png)\n\nIn the above example, the box model works as expected. The actual `width` and `height` of the `span` element are calculated as:\n\n    width = 5px + 10px + 100px + 10px + 5px = 130px\n    height = 5px + 10px + 40px + 10px + 5px = 70px\n\nHence, the actual `width` and `height` become `130px` and `70px` respectively.\n\n**Note:** The default behavior of the box model can be changed by the `box-sizing` property allowing developers to set the `width` and `height` intuitively.\n  "],"6":["CSS Flexbox","\n# CSS Flexbox\n\n![](https://miro.medium.com/v2/resize:fit:1200/1*PVCtYNqc35kGYGBJwJa7Wg.png)\n\nFlexbox is a one-dimensional layout method for arranging items in rows or columns\n\nThis lesson will teach you everything about flexbox, focusing on all the different possible properties for the parent element (the flex container) and the child elements (the flex items).\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. \n\nSome of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).\n\nIf “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. \n\nPlease have a look at this figure from the specification, explaining the main idea behind the flex layout.\n\n![](https://i.ibb.co/smT41MF/00-basic-terminology.webp)\n\nItems will be laid out following either the `main axis` (from `main-start` to `main-end`) or the cross axis (from `cross-start` to `cross-end`).\n\n* **main axis** – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the `flex-direction` property (see below).\n* **main-start | main-end** – The flex items are placed within the container starting from main-start and going to main-end.\n* **main size** – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n* **cross axis** – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n* **cross-start | cross-end** – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n* **cross size** – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\n### Flexbox properties\n\n![](https://i.ibb.co/0BNNYKW/01-container.webp)\n\n## Properties for Parent (flex container)\n\n### display\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.\n\n    .container {\n        display: flex; /* or inline-flex */\n    }\n\nNote that CSS columns have no effect on a flex container.\n\n### flex-direction\n\n![](https://i.ibb.co/gRNDXb7/flex-direction.webp)\n\n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n\n    .container {\n        flex-direction: row | row-reverse | column | column-reverse;\n    }\n\n* `row` (default): left to right in `ltr`; right to left in `rtl`\n* `row-reverse`: right to left in `ltr`; left to right in `rtl`\n* `column`: same as `row` but top to bottom\n* `column-reverse`: same as `row-reverse` but bottom to top\n\n### flex-wrap\n\n![](https://i.ibb.co/sC29ntB/flex-wrap.webp)\n\nBy default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n\n    .container {\n        flex-wrap: nowrap | wrap | wrap-reverse;\n    }\n\n* `nowrap` (default): all flex items will be on one line\n* `wrap`: flex items will wrap onto multiple lines, from top to bottom.\n* `wrap-reverse`: flex items will wrap onto multiple lines from bottom to top.\n\n### flex-flow\n\nThis is a shorthand for the `flex-direction` and `flex-wrap` properties, which together define the flex container’s main and cross axes. \n\nThe default value is `row nowrap`.\n\n    .container {\n        flex-flow: column wrap;\n    }\n\n### justify-content\n\n![](https://i.ibb.co/wgCsbV8/justify-content.webp)\n\n\nThis defines the alignment along the main axis.\n\nIt helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. \n\nIt also exerts some control over the alignment of items when they overflow the line.\n\n    .container {\n        justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;\n    }\n\n* `flex-start` (default): items are packed toward the start of the flex-direction.\n* `flex-end`: items are packed toward the end of the flex-direction.\n* `start`: items are packed toward the start of the `writing-mode` direction.\n* `end`: items are packed toward the end of the `writing-mode` direction.\n* `left`: items are packed toward left edge of the container, unless that doesn’t make sense with the `flex-direction`, then it behaves like `start`.\n* `right`: items are packed toward right edge of the container, unless that doesn’t make sense with the `flex-direction`, then it behaves like `end`.\n* `center`: items are centered along the line\n* `space-between`: items are evenly distributed in the line; first item is on the start line, last item on the end line\n* `space-around`: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n* `space-evenly`: items are distributed so that the spacing between any two items (and the space to the edges) is equal.\n\n### align-items\n\n![](https://i.ibb.co/k9rT4Dw/align-items.webp)\n\nThis defines the default behavior for how flex items are laid out along the **cross axis** on the current line. \n\nThink of it as the `justify-content` version for the cross-axis (perpendicular to the main-axis).\n\n    .container {\n        align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;\n    }\n\n* `stretch` (default): stretch to fill the container (still respect min-width/max-width)\n* `flex-start` / `start` / `self-start`: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the `flex-direction` rules or the `writing-mode` rules.\n* `flex-end` / `end` / `self-end`: items are placed at the end of the cross axis. The difference again is subtle and is about respecting `flex-direction` rules vs. `writing-mode` rules.\n* `center`: items are centered in the cross-axis\n* `baseline`: items are aligned such as their baselines align\n\n### align-content\n\n![](https://i.ibb.co/X2T8GWV/align-content.webp)\n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how `justify-content` aligns individual items within the main-axis.\n\n**Note:** \n- This property only takes effect on multi-line flexible containers, where `flex-wrap` is set to either `wrap` or `wrap-reverse`. \n- A single-line flexible container (i.e. where `flex-wrap` is set to its default value, `no-wrap`) will not reflect `align-content`.\n\n    .container {\n        align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;\n    }\n\n* `normal` (default): items are packed in their default position as if no value was set.\n* `flex-start` / `start`: items packed to the start of the container. The (more supported) `flex-start` honors the `flex-direction` while `start` honors the `writing-mode` direction.\n* `flex-end` / `end`: items packed to the end of the container. The (more support) `flex-end` honors the `flex-direction` while end honors the `writing-mode` direction.\n* `center`: items centered in the container\n* `space-between`: items evenly distributed; the first line is at the start of the container while the last one is at the end\n* `space-around`: items evenly distributed with equal space around each line\n* `space-evenly`: items are evenly distributed with equal space around them\n* `stretch`: lines stretch to take up the remaining space\n\n### gap, row-gap, column-gap\n\n![](https://i.ibb.co/tC8Nffm/gap-1.webp)\n\nThe `gap` property explicitly controls the space between flex items. \n\nIt applies that spacing **only between items** not on the outer edges.\n\n    .container {\n        display: flex;\n        ...\n        gap: 10px;\n        gap: 10px 20px; /* row-gap column gap */\n        row-gap: 10px;\n        column-gap: 20px;\n    }\n\nThe behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like `justify-content: space-between;`) then the gap will only take effect if that space would end up smaller.\n\nIt is not exclusively for flexbox, `gap` works in grid and multi-column layout as well.\n\n![](https://i.ibb.co/gZbjVYC/02-items.webp)\n\n## Properties for Children (flex items)\n\n### order\n\n![](https://i.ibb.co/TBtnpwR/order.webp)\n\n\nBy default, flex items are laid out in the source order. \n\nHowever, the `order` property controls the order in which they appear in the flex container.\n\n    .item {\n        order: 5; /* default is 0 */\n    }\n\nItems with the same `order` revert to source order.\n\n### flex-grow\n\n![](https://i.ibb.co/SVHnDhf/flex-grow.webp)\n\n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. \n\nIt dictates what amount of the available space inside the flex container the item should take up.\n\nIf all items have `flex-grow` set to `1`, the remaining space in the container will be distributed equally to all children. \n\nIf one of the children has a value of `2`, that child would take up twice as much of the space either one of the others (or it will try, at least).\n\n    .item {\n        flex-grow: 4; /* default 0 */\n    }\n\nNegative numbers are invalid.\n\n### flex-shrink\n\nThis defines the ability for a flex item to shrink if necessary.\n\n    .item {\n        flex-shrink: 3; /* default 1 */\n    }\n\nNegative numbers are invalid.\n\n### flex-basis\n\nThis defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. \nThe `auto` keyword means “look at my width or height property” (which was temporarily done by the `main-size` keyword until deprecated). \n\nThe `content` keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren `max-content`, `min-content`, and `fit-content` do.\n\n    .item {\n        flex-basis:  | auto; /* default auto */\n    }\n\nIf set to `0`, the extra space around content isn’t factored in. If set to `auto`, the extra space is distributed based on its `flex-grow` value. You can see that in below diagram,\n\n![](https://i.ibb.co/YX9HbgN/rel-vs-abs-flex.webp)\n\n### flex\n\nThis is the shorthand for `flex-grow,` `flex-shrink` and `flex-basis` combined. \n\nThe second and third parameters (`flex-shrink` and `flex-basis`) are optional. \n\nThe default is `0 1 auto`, but if you set it with a single number value, like `flex: 5;`, that changes the `flex-basis` to 0%, so it’s like setting `flex-grow: 5; flex-shrink: 1; flex-basis: 0%;`.\n\n    .item {\n        flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n    }\n\nIt is recommended that you use this **shorthand property** rather than set the individual properties. The shorthand sets the other values intelligently.\n\n### align-self\n\n![](https://i.ibb.co/tbpnmTM/align-self.webp)\n\nThis allows the default alignment (or the one specified by `align-items`) to be overridden for individual flex items.\n\nPlease see the `align-items` explanation to understand the available values.\n\n    .item {\n        align-self: auto | flex-start | flex-end | center | baseline | stretch;\n    }\n\nNote that `float`, `clear` and `vertical-align` have no effect on a flex item.\n"],"7":["CSS Grid","\n# CSS Grid\n\n![](https://i.ibb.co/9rgGGz6/ezgif-2-ee06f29d5f.webp)\n\nCSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. \n\nCSS has always been used to layout our web pages, but it’s never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). \n\nFlexbox is also a very great layout tool, but its one-directional flow has different use cases — and they actually work together quite well!\n\nGrid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites.\n\n## CSS Grid basics\n\nTo get started you have to define a container element as a grid with `display: grid`, set the column and row sizes with `grid-template-columns` and `grid-template-rows`, and then place its child elements into the grid with `grid-column` and `grid-row`.\n\nSimilarly to flexbox, the source order of the grid items doesn’t matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. \n\nImagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. \n\nGrid is one of the most powerful CSS modules ever introduced.\n\n## Important CSS Grid terminology\n\nBefore diving into the concepts of Grid it’s important to understand the terminology. \n\nSince the terms involved here are all kinda conceptually similar, it’s easy to confuse them with one another if you don’t first memorize their meanings defined by the Grid specification. \n\nBut don’t worry, there aren’t many of them.\n\n### Grid Container\n\nThe element on which `display: grid` is applied. It’s the direct parent of all the grid items. In this example `container` is the grid container.\n\n    <div class=\"container\">\n\t\t<div class=\"item item-1\"> </div>\n\t\t<div class=\"item item-2\"> </div>\n\t\t<div class=\"item item-3\"> </div>\n    </div>\n\n### Grid Line\n\nThe dividing lines that make up the structure of the grid. \n\nThey can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. \n\nHere the yellow line is an example of a column grid line.\n\n![](https://i.ibb.co/sWxPWZC/terms-grid-line.webp)\n\n### Grid Track\n\nThe space between two adjacent grid lines. You can think of them as the columns or rows of the grid. \n\nHere’s the grid track between the second and third-row grid lines.\n\n![](https://i.ibb.co/k4K8h1C/terms-grid-track.webp)\n\n### Grid Area\n\nThe total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. \n\nHere’s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3.\n\n![](https://i.ibb.co/RyBdR5y/terms-grid-area.webp)\n\n### Grid Item\n\nThe children (i.e. direct descendants) of the grid container. \n\nHere the `item` elements are grid items, but `sub-item` isn’t.\n\n    <div class=\"container\">\n\t\t<div class=\"item\"> </div>\n\t\t<div class=\"item\">\n\t\t\t<p class=\"sub-item\"> </p>\n\t\t</div>\n\t\t<div class=\"item\"> </div>\n    </div>\n\n### Grid Cell\n\nThe space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. \n\nHere’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3.\n\n![](https://i.ibb.co/ZmT2f7c/terms-grid-cell.webp)\n\n## CSS Grid properties\n\n### Properties for Parent (Grid Container)\n\n* `display`\n* `grid-template-columns`\n* `grid-template-rows`\n* `grid-template-areas`\n* `grid-template`\n* `grid-column-gap`\n* `grid-row-gap`\n* `grid-gap`\n* `justify-items`\n* `align-items`\n* `place-items`\n* `justify-content`\n* `align-content`\n* `place-content`\n* `grid-auto-columns`\n* `grid-auto-rows`\n* `grid-auto-flow`\n* `grid`\n\n### display\n\nDefines the element as a grid container and establishes a new grid formatting context for its contents.\n\nValues:\n\n* `grid` – generates a block-level grid\n* `inline-grid` – generates an inline-level grid\n\n\n    .container {\n      display: grid | inline-grid;\n    }\n\n### grid-template-columns & grid-template-rows\n\nDefines the columns and rows of the grid with a space-separated list of values. \n\nThe values represent the track size, and the space between them represents the grid line.\n\nValues:\n\n* `<track-size>` – can be a length, a percentage, or a fraction of the free space in the grid using the `fr` unit\n\n* `<line-name>` – an arbitrary name of your choosing\n\n\n    .container {\n        grid-template-columns: ...  ...;\n        /* e.g. \n            1fr 1fr\n            minmax(10px, 1fr) 3fr\n            repeat(5, 1fr)\n            50px auto 100px 1fr\n        */\n        grid-template-rows: ... ...;\n        /* e.g. \n            min-content 1fr min-content\n            100px 1fr max-content\n        */\n    }\n\nGrid lines are automatically assigned positive numbers from these assignments (-1 being an alternate for the very last row).\n\n![](https://i.ibb.co/ZXwHzg3/template-columns-rows-01.webp)\n\nBut you can choose to explicitly name the lines. Note the bracket syntax for the line names:\n\n    .container {\n        grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n        grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n    }\n\n![](https://i.ibb.co/qg890P8/template-column-rows-02.webp)\n\nNote that a line can have more than one name. For example, here the second line will have two names: row1-end and row2-start:\n\n    .container {\n        grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n    }\n\nIf your definition contains repeating parts, you can use the `repeat()` notation to streamline things:\n\n    .container {\n        grid-template-columns: repeat(3, 20px [col-start]);\n    }\n\nWhich is equivalent to this:\n\n    .container {\n        grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];\n    }\n\nIf multiple lines share the same name, they can be referenced by their line name and count.\n\n    .item {\n        grid-column-start: col-start 2;\n    }\n\nThe `fr` unit allows you to set the size of a track as a fraction of the free space of the grid container. For example, this will set each item to one third the width of the grid container:\n\n    .container {\n        grid-template-columns: 1fr 1fr 1fr;\n    }\n\nThe free space is calculated _after_ any non-flexible items. In this example the total amount of free space available to the `fr` units doesn’t include the 50px:\n\n    .container {\n        grid-template-columns: 1fr 50px 1fr 1fr;\n    }\n\n### grid-template-areas\n\nDefines a grid template by referencing the names of the grid areas which are specified with the `grid-area` property. Repeating the name of a grid area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.\n\nValues:\n\n* `<grid-area-name>` – the name of a grid area specified with `grid-area`\n* `.` – a period signifies an empty grid cell\n* `none` – no grid areas are defined\n\n\n    .container {\n        grid-template-areas: \n            \"<grid-area-name> | . | none | ...\"\n            \"...\";\n    }\n\nExample:\n\n    .item-a {\n        grid-area: header;\n    }\n    .item-b {\n        grid-area: main;\n    }\n    .item-c {\n        grid-area: sidebar;\n    }\n    .item-d {\n        grid-area: footer;\n    }\n    \n    .container {\n        display: grid;\n        grid-template-columns: 50px 50px 50px 50px;\n        grid-template-rows: auto;\n        grid-template-areas: \n            \"header header header header\"\n            \"main main . sidebar\"\n            \"footer footer footer footer\";\n    }\n\nThat’ll create a grid that’s four columns wide by three rows tall. The entire top row will be composed of the **header** area. The middle row will be composed of two **main** areas, one empty cell, and one **sidebar** area. The last row is all **footer**.\n\n![](https://i.ibb.co/cgdxymw/dddgrid-template-areas.webp)\n\nEach row in your declaration needs to have the same number of cells.\n\nYou can use any number of adjacent periods to declare a single empty cell. As long as the periods have no spaces between them they represent a single cell.\n\nNotice that you’re not naming lines with this syntax, just areas. \n\nWhen you use this syntax the lines on either end of the areas are actually getting named automatically. If the name of your grid area is **foo**, the name of the area’s starting row line and starting column line will be **foo-start**, and the name of its last row line and last column line will be **foo-end**. This means that some lines might have multiple names, such as the far left line in the above example, which will have three names: header-start, main-start, and footer-start.\n\n### grid-template\n\nA shorthand for setting `grid-template-rows`, `grid-template-columns`, and `grid-template-areas` in a single declaration.\n\nValues:\n\n* `none` – sets all three properties to their initial values\n* `<grid-template-rows>` / `<grid-template-columns`>** – sets `grid-template-columns` and `grid-template-rows` to the specified values, respectively, and sets `grid-template-areas` to `none`\n\n\n    .container {\n        grid-template: none | <grid-template-rows> / <grid-template-columns>;\n    }\n\nIt also accepts a more complex but quite handy syntax for specifying all three. Here’s an example:\n\n    .container {\n        grid-template:\n            [row1-start] \"header header header\" 25px [row1-end]\n            [row2-start] \"footer footer footer\" 25px [row2-end]\n            / auto 50px auto;\n    }\n\nThat’s equivalent to this:\n\n    .container {\n        grid-template-rows: [row1-start] 25px [row1-end row2-start] 25px [row2-end];\n        grid-template-columns: auto 50px auto;\n        grid-template-areas: \n            \"header header header\" \n            \"footer footer footer\";\n    }\n\nSince `grid-template` doesn’t reset the _implicit_ grid properties (`grid-auto-columns`, `grid-auto-rows`, and `grid-auto-flow`), which is probably what you want to do in most cases, it’s recommended to use the `grid` property instead of `grid-template`.\n\n### specifying individual gaps\n\nIncludes - column-gap, row-gap, grid-column-gap, grid-row-gap.\n\nSpecifies the size of the grid lines. You can think of it like setting the width of the gutters between the columns/rows.\n\nValues:\n\n* `<line-size>` – a length value\n\n\n    .container {\n        /* standard */\n        column-gap: <line-size>;\n        row-gap: <line-size>;\n        \n        /* old */\n        grid-column-gap: <line-size>;\n        grid-row-gap: <line-size>;\n    }\n\nExample:\n\n    .container {\n        grid-template-columns: 100px 50px 100px;\n        grid-template-rows: 80px auto 80px; \n        column-gap: 10px;\n        row-gap: 15px;\n    }\n\n![](https://i.ibb.co/nPz9WSJ/dddgrid-gap.webp)\n\nThe gutters are only created between the columns/rows, not on the outer edges.\n\nNote: The `grid-` prefix will be removed and `grid-column-gap` and `grid-row-gap` renamed to `column-gap` and `row-gap`.\n\n### gap & grid-gap\n\nA shorthand for `row-gap` and `column-gap`\n\nValues:\n\n* `<grid-row-gap>` `<grid-column-gap>` – length values\n\n    .container {\n        /* standard */\n        gap: <grid-row-gap> <grid-column-gap>;\n        \n        /* old */\n        grid-gap: <grid-row-gap> <grid-column-gap>;\n    }\n\nExample:\n\n    .container {\n        grid-template-columns: 100px 50px 100px;\n        grid-template-rows: 80px auto 80px; \n        gap: 15px 10px;\n    }\n\nIf no `row-gap` is specified, it’s set to the same value as `column-gap`\n\n### justify-items\n\nAligns grid items along the inline (row) axis (as opposed to `align-items` which aligns along the block (column) axis). \n\nThis value applies to all grid items inside the container.\n\nValues:\n\n* `start` – aligns items to be flush with the start edge of their cell\n* `end` – aligns items to be flush with the end edge of their cell\n* `center` – aligns items in the center of their cell\n* `stretch` – fills the whole width of the cell (this is the default)\n\n\n    .container {\n        justify-items: start | end | center | stretch;\n    }\n\nExamples:\n\n    .container {\n        justify-items: start;\n    }\n\n![](https://i.ibb.co/Ks3WKhh/justify-items-start.webp)\n\n    .container {\n        justify-items: end;\n    }\n\n![](https://i.ibb.co/nfsgHJq/justify-items-end.webp)\n\n    .container {\n        justify-items: center;\n    }\n\n![](https://i.ibb.co/MkD8bGx/justify-items-center.webp)\n\n    .container {\n        justify-items: stretch;\n    }\n\n![](https://i.ibb.co/p19BHQz/justify-items-stretch.webp)\n\nThis behavior can also be set on individual grid items via the `justify-self` property.\n\n### align-items\n\nAligns grid items along the block (column) axis (as opposed to `justify-items` which aligns along the inline (row) axis). \n\nThis value applies to all grid items inside the container.\n\nValues:\n\n* `stretch` – fills the whole height of the cell (this is the default)\n* `start` – aligns items to be flush with the start edge of their cell\n* `end` – aligns items to be flush with the end edge of their cell\n* `center` – aligns items in the center of their cell\n* `baseline` – align items along text baseline. There are modifiers to `baseline` — `first baseline` and `last baseline` which will use the baseline from the first or last line in the case of multi-line text.\n\n    .container {\n        align-items: start | end | center | stretch;\n    }\n\nExamples:\n\n    .container {\n        align-items: start;\n    }\n\n![](https://i.ibb.co/jkfkTWN/align-items-start.webp)\n\n    .container {\n        align-items: end;\n    }\n\n![](https://i.ibb.co/mtYYqN6/align-items-end.webp)\n\n    .container {\n        align-items: center;\n    }\n\n![](https://i.ibb.co/CWwBGY5/align-items-center.webp)\n\n    .container {\n        align-items: stretch;\n    }\n\n![](https://i.ibb.co/MP1Xpwj/align-items-stretch.webp)\n\nThis behavior can also be set on individual grid items via the `align-self` property.\n\n### place-items\n\n`place-items` sets both the `align-items` and `justify-items` properties in a single declaration.\n\nValues:\n\n* `<align-items>` / `<justify-items>` – The first value sets `align-items`, the second value `justify-items`. If the second value is omitted, the first value is assigned to both properties.\n\nThis can be very useful for super quick multi-directional centering:\n\n    .center {\n        display: grid;\n        place-items: center;\n    }\n\n### justify-content\n\nSometimes the total size of your grid might be less than the size of its grid container. \n\nThis could happen if all of your grid items are sized with non-flexible units like `px`. \n\nIn this case you can set the alignment of the grid within the grid container. \n\nThis property aligns the grid along the inline (row) axis (as opposed to `align-content` which aligns the grid along the block (column) axis).\n\nValues:\n\n* `start` – aligns the grid to be flush with the start edge of the grid container\n* `end` – aligns the grid to be flush with the end edge of the grid container\n* `center` – aligns the grid in the center of the grid container\n* `stretch` – resizes the grid items to allow the grid to fill the full width of the grid container\n* `space-around` – places an even amount of space between each grid item, with half-sized spaces on the far ends\n* `space-between` – places an even amount of space between each grid item, with no space at the far ends\n* `space-evenly` – places an even amount of space between each grid item, including the far ends\n\n\n    .container {\n        justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n    }\n\nExamples:\n\n    .container {\n        justify-content: start;\n    }\n\n![](https://i.ibb.co/cCCBLsR/justify-content-start.webp)\n\n    .container {\n        justify-content: end;    \n    }\n\n![](https://i.ibb.co/pjk7Xbv/justify-content-end.webp)\n\n    .container {\n        justify-content: center;    \n    }\n\n![](https://i.ibb.co/FXbf0Tm/justify-content-center.webp)\n\n    .container {\n        justify-content: stretch;    \n    }\n\n![](https://i.ibb.co/Fnm6ffS/justify-content-stretch.webp)\n\n    .container {\n        justify-content: space-around;    \n    }\n\n![](https://i.ibb.co/CKxGb0c/justify-content-space-around.webp)\n\n    .container {\n        justify-content: space-between;    \n    }\n\n![](https://i.ibb.co/dJcs6f7/justify-content-space-between.webp)\n\n    .container {\n        justify-content: space-evenly;    \n    }\n\n![](https://i.ibb.co/QDKQd5b/justify-content-space-evenly.webp)\n\n### align-content\n\nSometimes the total size of your grid might be less than the size of its grid container. \n\nThis could happen if all of your grid items are sized with non-flexible units like `px`. \n\nIn this case you can set the alignment of the grid within the grid container. \n\nThis property aligns the grid along the block (column) axis (as opposed to `justify-content` which aligns the grid along the inline (row) axis).\n\nValues:\n\n* `start` – aligns the grid to be flush with the start edge of the grid container\n* `end` – aligns the grid to be flush with the end edge of the grid container\n* `center` – aligns the grid in the center of the grid container\n* `stretch` – resizes the grid items to allow the grid to fill the full height of the grid container\n* `space-around` – places an even amount of space between each grid item, with half-sized spaces on the far ends\n* `space-between` – places an even amount of space between each grid item, with no space at the far ends\n* `space-evenly` – places an even amount of space between each grid item, including the far ends\n\n\n    .container {\n        align-content: start | end | center | stretch | space-around | space-between | space-evenly;    \n    }\n\nExamples:\n\n    .container {\n        align-content: start;    \n    }\n\n![](https://i.ibb.co/X38cLXY/align-content-start.webp)\n\n    .container {\n        align-content: end;    \n    }\n\n![](https://i.ibb.co/9Gj3v85/align-content-end.webp)\n\n    .container {\n        align-content: center;    \n    }\n\n![](https://i.ibb.co/J7Qntd8/align-content-center.webp)\n\n    .container {\n        align-content: stretch;    \n    }\n\n![](https://i.ibb.co/Zhx0j9p/align-content-stretch.webp)\n\n    .container {\n        align-content: space-around;    \n    }\n\n![](https://i.ibb.co/GcdMNqM/align-content-space-around.webp)\n\n    .container {\n        align-content: space-between;    \n    }\n\n![](https://i.ibb.co/j666rRv/align-content-space-between.webp)\n\n    .container {\n        align-content: space-evenly;    \n    }\n\n![](https://i.ibb.co/crpD1L3/align-content-space-evenly.webp)\n\n### place-content\n\n`place-content` sets both the `align-content` and `justify-content` properties in a single declaration.\n\nValues:\n\n* `<align-content>` / `<justify-content>` – The first value sets `align-content`, the second value `justify-content`. If the second value is omitted, the first value is assigned to both properties.\n\nAll major browsers except Edge support the `place-content` shorthand property.\n\n### grid-auto-columns & grid-auto-rows\n\nSpecifies the size of any auto-generated grid tracks (aka implicit grid tracks). \n\nImplicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid.\n\nValues:\n\n* `<track-size>` – can be a length, a percentage, or a fraction of the free space in the grid (using the `fr` unit)\n\n\n    .container {\n        grid-auto-columns: <track-size> ...;\n        grid-auto-rows: <track-size> ...;\n    }\n\nTo illustrate how implicit grid tracks get created, think about this:\n\n    .container {\n        grid-template-columns: 60px 60px;\n        grid-template-rows: 90px 90px;\n    }\n\n![](https://i.ibb.co/28m331h/grid-auto-columns-rows-01.webp)\n\nThis creates a 2 x 2 grid.\n\nBut now imagine you use `grid-column` and `grid-row` to position your grid items like this:\n\n    .item-a {\n        grid-column: 1 / 2;\n        grid-row: 2 / 3;\n    }\n    .item-b {\n        grid-column: 5 / 6;\n        grid-row: 2 / 3;\n    }\n\n![](https://i.ibb.co/RSyx50W/grid-auto-columns-rows-02.webp)\n\nWe told .item-b to start on column line 5 and end at column line 6, but we never defined a column line 5 or 6. \n\nBecause we referenced lines that don’t exist, implicit tracks with widths of 0 are created to fill in the gaps. \n\nWe can use `grid-auto-columns)` and `grid-auto-rows` to specify the widths of these implicit tracks:\n\n    .container {\n        grid-auto-columns: 60px;\n    }\n\n![](https://i.ibb.co/xDHfR1g/grid-auto-columns-rows-03.webp)\n\n### grid-auto-flow\n\nIf you have grid items that you don’t explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items. \n\nThis property controls how the auto-placement algorithm works.\n\nValues:\n\n* `row` – tells the auto-placement algorithm to fill in each row in turn, adding new rows as necessary (default)\n* `column` – tells the auto-placement algorithm to fill in each column in turn, adding new columns as necessary\n* `dense` – tells the auto-placement algorithm to attempt to fill in holes earlier in the grid if smaller items come up later\n\n\n    .container {\n        grid-auto-flow: row | column | row dense | column dense;\n    }\n\nNote that **dense** only changes the visual order of your items and might cause them to appear out of order, which is bad for accessibility.\n\nExamples:\n\nConsider this HTML:\n\n    <section class=\"container\">\n        <div class=\"item-a\">item-a</div>\n        <div class=\"item-b\">item-b</div>\n        <div class=\"item-c\">item-c</div>\n        <div class=\"item-d\">item-d</div>\n        <div class=\"item-e\">item-e</div>\n    </section>\n\nYou define a grid with five columns and two rows, and set `grid-auto-flow` to `row` (which is also the default):\n\n    .container {\n        display: grid;\n        grid-template-columns: 60px 60px 60px 60px 60px;\n        grid-template-rows: 30px 30px;\n        grid-auto-flow: row;\n    }\n\nWhen placing the items on the grid, you only specify spots for two of them:\n\n    .item-a {\n        grid-column: 1;\n        grid-row: 1 / 3;\n    }\n    .item-e {\n        grid-column: 5;\n        grid-row: 1 / 3;\n    }\n\nBecause we set `grid-auto-flow` to `row`, our grid will look like this. \n\nNotice how the three items we didn’t place (**item-b**, **item-c** and **item-d**) flow across the available rows:\n\n![](https://i.ibb.co/kyzK58z/grid-auto-flow-01.webp)\n\nIf we instead set `grid-auto-flow` to `column`, **item-b**, **item-c** and **item-d** flow down the columns:\n\n    .container {\n        display: grid;\n        grid-template-columns: 60px 60px 60px 60px 60px;\n        grid-template-rows: 30px 30px;\n        grid-auto-flow: column;\n    }\n\n![](https://i.ibb.co/PtsmsDB/grid-auto-flow-02.webp)\n\n### grid\n\nA shorthand for setting all of the following properties in a single declaration: `grid-template-rows`, `grid-template-columns`, `grid-template-areas`, `grid-auto-rows`, `grid-auto-columns`, and `grid-auto-flow` \n\nNote: You can only specify the explicit or the implicit grid properties in a single grid declaration.\n\nValues:\n\n* `none` – sets all sub-properties to their initial values.\n* `<grid-template>` – works the same as the `grid-template` shorthand.\n* `<grid-template-rows> / [ auto-flow && dense? ] <grid-auto-columns>?` – sets `grid-template-rows` to the specified value. If the `auto-flow` keyword is to the right of the slash, it sets `grid-auto-flow` to `column`. If the `dense` keyword is specified additionally, the auto-placement algorithm uses a “dense” packing algorithm. If `grid-auto-columns` is omitted, it is set to `auto`.\n* ` auto-flow && dense? ] <grid-auto-rows>? / <grid-template-columns>` – sets `grid-template-columns` to the specified value. If the `auto-flow` keyword is to the left of the slash, it sets `grid-auto-flow` to `row`. If the `dense` keyword is specified additionally, the auto-placement algorithm uses a “dense” packing algorithm. If `grid-auto-rows` is omitted, it is set to `auto`.\n\nExamples:\n\nThe following two code blocks are equivalent:\n\n    .container {\n        grid: 100px 300px / 3fr 1fr;\n    }\n    \n    .container {\n        grid-template-rows: 100px 300px;\n        grid-template-columns: 3fr 1fr;\n    }\n\nThe following two code blocks are equivalent:\n\n    .container {\n        grid: auto-flow / 200px 1fr;\n    }\n    \n    .container {\n        grid-auto-flow: row;\n        grid-template-columns: 200px 1fr;\n    }\n\nThe following two code blocks are equivalent:\n\n    .container {\n        grid: auto-flow dense 100px / 1fr 2fr;\n    }\n    \n    .container {\n        grid-auto-flow: row dense;\n        grid-auto-rows: 100px;\n        grid-template-columns: 1fr 2fr;\n    }\n\nAnd the following two code blocks are equivalent:\n\n    .container {\n        grid: 100px 300px / auto-flow 200px;\n    }\n    \n    .container {\n        grid-template-rows: 100px 300px;\n        grid-auto-flow: column;\n        grid-auto-columns: 200px;\n    }\n\nIt also accepts a more complex but quite handy syntax for setting everything at once. You specify `grid-template-areas`, `grid-template-rows` and `grid-template-columns`, and all the other sub-properties are set to their initial values. \n\nWhat you’re doing is specifying the line names and track sizes inline with their respective grid areas. This is easiest to describe with an example:\n\n    .container {\n        grid: [row1-start] \"header header header\" 1fr [row1-end]\n                [row2-start] \"footer footer footer\" 25px [row2-end]\n                / auto 50px auto;\n    }\n\nThat’s equivalent to this:\n\n    .container {\n        grid-template-areas: \n            \"header header header\"\n            \"footer footer footer\";\n        grid-template-rows: [row1-start] 1fr [row1-end row2-start] 25px [row2-end];\n        grid-template-columns: auto 50px auto;    \n    }\n\n### Properties for the Children - (Grid Items)\n\n* grid-column-start\n* grid-column-end\n* grid-row-start\n* grid-row-end\n* grid-column\n* grid-row\n* grid-area\n* justify-self\n* align-self\n* place-self\n\nImportant thing to note is that these properties - `float`, `display: inline-block`, `display: table-cell`, `vertical-align` and `column-*` will have no effect on a grid items.\n\n### Start & End in Rows & Columns\n\nThis includes - grid-column-start, grid-column-end, grid-row-start & grid-row-end.\n\nDetermines a grid item’s location within the grid by referring to specific grid lines. `grid-column-start`/`grid-row-start` is the line where the item begins, and `grid-column-end`/`grid-row-end` is the line where the item ends.\n\nValues:\n\n* `<line>` – can be a number to refer to a numbered grid line, or a name to refer to a named grid line\n* `span <number>` – the item will span across the provided number of grid tracks\n* `span <name>` – the item will span across until it hits the next line with the provided name\n* `auto` – indicates auto-placement, an automatic span, or a default span of one\n\n\n    .item {\n        grid-column-start: <number> | <name> | span <number> | span <name> | auto;\n        grid-column-end: <number> | <name> | span <number> | span <name> | auto;\n        grid-row-start: <number> | <name> | span <number> | span <name> | auto;\n        grid-row-end: <number> | <name> | span <number> | span <name> | auto;\n    }\n\nExamples:\n\n    .item-a {\n        grid-column-start: 2;\n        grid-column-end: five;\n        grid-row-start: row1-start;\n        grid-row-end: 3;\n    }\n\n![](https://i.ibb.co/cr5fxnN/grid-column-row-start-end-01.webp)\n\n    .item-b {\n        grid-column-start: 1;\n        grid-column-end: span col4-start;\n        grid-row-start: 2;\n        grid-row-end: span 2;\n    }\n\n![](https://i.ibb.co/GQN1ZtL/grid-column-row-start-end-02.webp)\n\nIf no `grid-column-end`/`grid-row-end` is declared, the item will span 1 track by default.\n\nItems can overlap each other. You can use `z-index` to control their stacking order.\n\n### grid-column & grid-row\n\nShorthand for `grid-column-start` + `grid-column-end`, and `grid-row-start` + `grid-row-end`, respectively.\n\nValues:\n\n* `<start-line>` / `<end-line>` – each one accepts all the same values as the longhand version, including span\n\n    .item {\n        grid-column: <start-line> / <end-line> | <start-line> / span <value>;\n        grid-row: <start-line> / <end-line> | <start-line> / span <value>;\n    }\n\nExample:\n\n    .item-c {\n        grid-column: 3 / span 2;\n        grid-row: third-line / 4;\n    }\n\n![](https://i.ibb.co/Rc9ffMJ/grid-column-row.webp)\n\nIf no end line value is declared, the item will span 1 track by default.\n\n### grid-area\n\nGives an item a name so that it can be referenced by a template created with the `grid-template-areas` property. Alternatively, this property can be used as an even shorter shorthand for `grid-row-start` + `grid-column-start)` + `grid-row-end` + `grid-column-end`.\n\nValues:\n\n* `<name>` – a name of your choosing\n* `<row-start>` / `<column-start>` / `<row-end>` / `<column-end>` – can be numbers or named lines\n\n    .item {\n        grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\n    }\n\nExamples:\n\nAs a way to assign a name to the item:\n\n    .item-d {\n        grid-area: header;\n    }\n\nAs the short-shorthand for `grid-row-start` + `grid-column-start` + `grid-row-end` + `grid-column-end`:\n\n    .item-d {\n        grid-area: 1 / col4-start / last-line / 6;\n    }\n\n![](https://i.ibb.co/QH4WTFH/grid-area.webp)\n\n### justify-self\n\nAligns a grid item inside a cell along the inline (row) axis (as opposed to `align-self` which aligns along the block (column) axis). This value applies to a grid item inside a single cell.\n\nValues:\n\n* `start` – aligns the grid item to be flush with the start edge of the cell\n* `end` – aligns the grid item to be flush with the end edge of the cell\n* `center` – aligns the grid item in the center of the cell\n* `stretch` – fills the whole width of the cell (this is the default)\n\n    .item {\n        justify-self: start | end | center | stretch;\n    }\n\nExamples:\n\n    .item-a {\n        justify-self: start;\n    }\n\n![](https://i.ibb.co/XzQ3Txg/justify-self-start.webp)\n\n    .item-a {\n        justify-self: end;\n    }\n\n![](https://i.ibb.co/z6pVwmP/justify-self-end.webp)\n\n    .item-a {\n        justify-self: center;\n    }\n\n![](https://i.ibb.co/mFSGGRp/justify-self-center.webp)\n\n    .item-a {\n        justify-self: stretch;\n    }\n\n![](https://i.ibb.co/zhvmcGG/justify-self-stretch.webp)\n\nTo set alignment for all the items in a grid, this behavior can also be set on the grid container via the `justify-items` property.\n\n### align-self\n\nAligns a grid item inside a cell along the block (column) axis (as opposed to `justify-self` which aligns along the inline (row) axis). \n\nThis value applies to the content inside a single grid item.\n\nValues:\n\n* `start` – aligns the grid item to be flush with the start edge of the cell\n* `end` – aligns the grid item to be flush with the end edge of the cell\n* `center` – aligns the grid item in the center of the cell\n* `stretch` – fills the whole height of the cell (this is the default)\n\n    .item {\n        align-self: start | end | center | stretch;\n    }\n\nExamples:\n\n    .item-a {\n        align-self: start;\n    }\n\n![](https://i.ibb.co/sVRXkdP/align-self-start.webp)\n\n    .item-a {\n        align-self: end;\n    }\n\n![](https://i.ibb.co/CmCpLSG/align-self-end.webp)\n\n    .item-a {\n        align-self: center;\n    }\n\n![](https://i.ibb.co/njJx9ZM/align-self-center.webp)\n\n    .item-a {\n        align-self: stretch;\n    }\n\n![](https://i.ibb.co/gjZJZdg/align-self-stretch.webp)\n\nTo align all the items in a grid, this behavior can also be set on the grid container via the `align-items` property.\n\n### place-self\n\n`place-self` sets both the `align-self` and `justify-self` properties in a single declaration.\n\nValues:\n\n* `auto` – The “default” alignment for the layout mode.\n* `<align-self>` / `<justify-self>` – The first value sets `align-self`, the second value `justify-self`. If the second value is omitted, the first value is assigned to both properties.\n\nExamples:\n\n    .item-a {\n        place-self: center;\n    }\n\n![](https://i.ibb.co/r49FJjs/place-self-center.webp)\n\n    .item-a {\n        place-self: center stretch;\n    }\n\n![](https://i.ibb.co/0c4WxQ3/place-self-center-stretch.webp)\n\nAll major browsers except Edge support the `place-self` shorthand property.\n"],"8":["Responsive Design with Media Queries","\n# Responsive Web Design\n\n![](https://www.hostinger.com/tutorials/wp-content/uploads/sites/2/2023/02/css-breakpoints.webp)\n\nResponsive web design is an approach to web development aimed at creating websites that adapt and respond to different screen sizes and devices.\n\nThe primary goal of responsive design is to provide an optimal and consistent user experience across a wide range of platforms, including desktop computers, laptops, tablets, and smartphones.\n\nThe following diagram shows how responsive web design allows the layout to adapt to various user devices without compromising user experience.\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-layout-in-various-devices.png)\n\n## CSS Media Queries\n\nMedia queries are CSS rules that apply specific styles and layout adjustments based on various conditions, such as screen size, resolution, orientation, or other device characteristics.\n\nMedia queries are essential for creating responsive and adaptive web designs that look and function optimally across different devices and screen dimensions.\n\nLet's look at an example.\n\n    @media (min-width: 768px) {\n    /* This style rule will only apply when the width\n        of the viewport is at least 768px */\n    .container {\n        width: 50%;\n    }\n    }\n\nHere, the CSS enclosed in a media query will be applied only when the minimum width of the device is 768px.\n\n## Responsive Column Layout\n\nColumn layout refers to the arrangement of content on a webpage in multiple columns. This allows us to organize and present information in a structured and visually appealing manner.\n\nThere are several column layout configurations: 3-column, 2-column, and 1-column layouts.\n\nLet's see how we can make responsive column layouts.\n\n```xml\n<body>\n    <header>HEADER</header>\n    <main>\n        <div class=\"column column1\">COLUMN 1</div>\n        <div class=\"column column2\">COLUMN 2</div>\n        <div class=\"column column3\">COLUMN 3</div>\n    </main>\n    <footer>FOOTER</footer>\n</body>\n```\n\n    /* making a three column layout */\n    main {\n        display: flex;\n        flex-wrap: wrap;\n        height: 100px;\n        text-align: center;\n    }\n    \n    .column1 {\n        /* width takes 20% of the flex container */\n        width: 20%;\n        background-color: orange;\n    }\n    \n    .column2 {\n        /* width takes 60% of the flex container */\n        width: 60%;\n        background-color: yellow;\n    }\n    \n    .column3 {\n        /* width takes 20% of the flex container */\n        width: 20%;\n        background-color: greenyellow;\n    }\n    \n    header,\n    footer {\n        text-align: center;\n        background-color: pink;\n    }\n\n**Output:**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-responsive-three-column-layout.png)\n\nIn the above example, the `flex` property allows us to create three column layouts.\n\nThis type of layout is generally used for desktops and laptops to arrange different types of content in different columns.\n\nFor example, a three-column layout might be used in a news website to display headlines in one column, featured articles in another, and advertisements in the third.\n\nNow, using flex properties and media queries, we can change the above three-column layout to a two-column layout.\n\n    @media screen and (max-width: 768px) {\n    /* set column1 and column2 to 50% width each */\n        .column1,\n        .column2 {\n            width: 50%;\n        }\n    \n    /* set column3 to 100% width */\n        .column3 {\n            width: 100%;\n        }\n    }\n\n**Output:**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-responsive-two-column-layout.png)\n\nThe above CSS styles change the three-column layout to a two-column layout for tablets and smaller devices.\n\nFinally, for mobile devices with smaller widths, we can set the following styles to achieve a single-column layout.\n\n    @media screen and (max-width: 800px) {\n        .column1,\n        .column2,\n        .column3 {\n            width: 100%;\n        }\n    }\n\n**Output:**\n\n![](https://www.programiz.com/sites/tutorial2program/files/css-responsive-single-column-layout.png)\n\nIn this way, media queries are used to create a responsive web layout for the various devices.\n\n## CSS Media Query\n\nCSS media query is a CSS rule that allows us to apply different styles to the webpage depending on the user's device or screen size.\n\nThe following diagram shows how the layout is changed for various user devices.\n\n![](https://www.bitdegree.org/learn/storage/media/images/3a40a9ef-ab2c-4c9d-89e8-b5c50315042d.png)\n\nThe styles are applied based on the characteristics of the user's device or viewport. These characteristics can include the screen width, height, orientation, and more. \n\nThe CSS `@media` rule enables the creation of responsive web designs.\n\n## CSS Media Query Syntax\n\nHere is the syntax of the media query.\n\n    @media media-type and (media-feature-rule) {\n    /* CSS rules go here */\n    }\n\nHere,\n\n* `media`: keyword that specifies the beginning of a media query block\n* `media-type`: specifies the type of media for applying the styles; common media types include `all`, `screen`, `print`, and `speech`\n* `media-feature-rule`: defines the specific conditions to apply underlying CSS styles such as width, height, or screen orientation\n\nLet's look at an example.\n\n    @media screen and (min-width: 768px) {\n    /* CSS styles for screens with a width of 768px or more go here */\n    }\n\nHere, the media query targets a `media_type` of the `screen` and checks the condition `min-width: 768px`.\n\nIf the screen width is `768` pixels or more, the enclosed CSS styles will be applied.\n\nThe value `768px` is also referred to as a breakpoint.\n\n**Note:** The breakpoint in a media query refers to the specific width or height at which a website's layout changes by applying the specified styles.\n\n## Breakpoints\n\n![](https://i.ibb.co/GCrxx9G/breakpoints.gif)\n\nCSS media query breakpoints are predefined points in the width of a viewport where the layout of a webpage changes to accommodate different screen sizes or device orientations. \n\nThese breakpoints are specified using CSS media queries and typically correspond to common device sizes, such as mobile phones, tablets, and desktop computers. \n\nBy defining breakpoints, developers can create responsive designs that adapt seamlessly to various screen sizes and provide optimal user experiences across different devices and viewing contexts\n\n\n    // X-Small devices (portrait phones, less than 576px)\n    // No media query for `xs since this is the default in Bootstrap\n    \n    // Small devices (landscape phones, 576px and up)\n    @media (min-width: 576px) { ... }\n    \n    // Medium devices (tablets, 768px and up)\n    @media (min-width: 768px) {\n    }\n    \n    // Large devices (desktops, 992px and up)\n    @media (min-width: 992px) { ... }\n    \n    // X-Large devices (large desktops, 1200px and up) @media (min-width: 1200px) { ... }\n    \n    // XX-Large devices (larger desktops, 1400px and up)\n    @media (min-width: 1400px) { ... }\n\n**Example:**\n\n###### Navigation Menu Using CSS Media Query\n\nLet's first create a navigation menu for the desktop and laptop layout.\n\n```xml\n<body>\n    <header>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Gallery</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n</body>\n```\n\n    * {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n    \n    header {\n        height: 80px;\n        background-color: pink;\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n    }\n    \n    ul {\n        list-style-type: none;\n        display: flex;\n        margin-right: 20px;\n    }\n    \n    li {\n        margin: 0px 6px;\n    }\n    \n    a {\n        display: block;\n        text-decoration: none;\n        text-align: center;\n        font-weight: bold;\n        background-color: deeppink;\n        color: black;\n        border: 1px solid;\n        padding: 12px 20px;\n        border-radius: 4px;\n        font-family: \"Courier New\", Courier, monospace;\n        transition: all 0.5s ease;\n    }\n    \n    a:hover {\n        background-color: orange;\n        color: blue;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/Gcy5Tm6/nav-1.gif)\n\nIn the above example, the navigation menu looks good on desktops and laptops.\n\nNow, to change the layout for mobile devices, we can use the media query. For example,\n\n    @media screen and (max-width: 576px) {\n        header {\n            height: auto;\n            display: block;\n            padding: 20px 0px;\n        }\n    \n        ul {\n            display: block;\n            margin-right: 0;\n        }\n    \n        ul li {\n            margin: 6px;\n        }\n    }\n\n**Output:**\n\n![](https://i.ibb.co/Tvsc5mP/nav.gif)\n\nIn the example above, once the device width reaches a breakpoint of 576px, the specified styles are applied, and the horizontal navigation menu transitions into a vertical menu.\n\nIn this way, media queries allow our website to appear elegant on a wide range of screen sizes.   \n"],"9":["Unveiling Transitions","\n# Unveiling Transitions\n\n![](https://i.ibb.co/ySHDfwX/transitions-cover.png)\n\nCSS transitions allow to smoothly go from one element’s state to another. How it works is that individual properties are animated from an initial to a final state.\n\nThey enable smooth animations between different states, such as hover or focus, adding a dynamic and polished look to web interfaces. \n\nBy applying transitions, developers can enhance user interaction and engagement by providing visual feedback to actions like mouseovers or clicks. \n\nYou can define:\n\n* `transition-property`: which properties to animate\n* `transition-duration`: how long the animation lasts\n* `transition-timing-function`: how the intermediate states are calculated\n* `transition-delay`: to start the animation after a certain amount of time\n\nYou can set each CSS property individually, or use the shorthand version: `transition`. In that case, only the duration is mandatory.\n\nKeep in mind that a transition is a specific kind of animation, where there’s only a start and an end state.\n\n## Quick example\n\nTransitions are often used on hover states.\n\n    a {\n        background: lightgrey;\n        color: grey;\n    }\n    a:hover {\n        background: yellow;\n        color: red;\n    }\n    a.with-transition {\n        transition: 1s;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/9h1xf1K/transition-1.gif)\n\nInstead of the hover CSS rules being instantaneous, both the background and the text colors are slowly animated.\n\n## transition-duration\n\nA transition’s duration is the only CSS property needed to create a transition. It can either be set in seconds `2s` or milliseconds `100ms`.\n\nIf you want your transition to last half a second, you can either write `0.5s` or `500ms`. Depending on how fast you want your transitions to be, one unit might be easier and/or quicker to write.\n\n    a {\n        background: lightgrey;\n        color: grey;\n    }\n    a:hover {\n        background: yellow;\n        color: green;\n    }\n    a.with-fast-transition {\n        transition-duration: 0.5s;\n    }\n    a.with-slow-transition {\n        transition: 3s;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/ydnChGS/transition-2.gif)\n\n## transition-property\n\nBy default, the `transition-property` property has a value of `all`, which simply means it will animate all possible properties.\n\nYou can decide to only animate 1 or several properties.\n\n    a {\n        background: lightgrey;\n        color: grey;\n    }\n    a:hover {\n        background: yellow;\n        border: 5px solid blue;\n        color: green;\n    }\n    a.with-background-transition {\n        transition-duration: 2s;\n        transition-property: background;\n    }\n    a.with-all-transition {\n        transition-duration: 2s;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/Yj1fHqB/transition-3.gif)\n\nThe `border` property is fully animatable and allows to easily visualize the slow (2 seconds) transition.\n\n## transition-timing-function\n\nThe timing function determines how each property’s value is calculated during the transition.\n\nBy default, the transition is eased: it accelerates at the start and slows down at the end.\n\nYou can ensure that the transition will happen at a constant speed. Timing functions can make the transition **accelerate** and/or **slow down**.\n\nThe easiest way to visualize timing functions is by altering position properties, like `left`.\n\n```xml\n<main>\n    <p><strong>Ease</strong>: slow start, fast middle, slow end</p>\n    <div class=\"ease\"></div>\n    \n    <p><strong>Linear</strong>: constant speed</p>\n    <div class=\"linear\"></div>\n    \n    <p><strong>Ease In</strong>: slow start, fast end</p>\n    <div class=\"ease-in\"></div>\n    \n    <p><strong>Ease Out</strong>: fast start, slow end</p>\n    <div class=\"ease-out\"></div>\n    \n    <p><strong>Ease In Out</strong>: like ease, but with more pronounced acceleration/deceleration curves</p>\n    <div class=\"ease-in-out\"></div>\n</main>\n```\n\n    div {\n            left: 0;\n            position: relative;\n            transition: 1s;\n    }\n    main:hover div {\n        left: 200px;\n    }\n    .ease {\n        transition-timing-function: ease;\n    }\n    /* Default behavior */\n    .linear {\n        transition-timing-function: linear;\n    }\n    /* Constant speed */\n    .ease-in {\n        transition-timing-function: ease-in;\n    }\n    .ease-out {\n        transition-timing-function: ease-out;\n    }\n    .ease-in-out {\n        transition-timing-function: ease-out;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/TWvTXg8/transition-4.gif)\n\nKeep in mind that all transitions take the same amount of time (1 second).\n\n## transition-delay\n\nA delay will define how long the transitions has to wait before actually starting.\n\nLike `transition-duration`, you can either use seconds `s` or milliseconds `ms`.\n\n```xml\n<div>\n    <p>Hover the grey area</p>\n    <a>Without any delay</a>\n    <a class=\"with-delay\">With a second delay</a>\n</div>\n```\n\n    a {\n        background: blue;\n        color: white;\n        transition: all 1s;\n    }\n    div:hover a {\n        background: red;\n    }\n    a.with-delay {\n        transition-delay: 1s;\n    }\n\n**Output:**\n\n![](https://i.ibb.co/yN3xKqJ/transition-5.gif)\n"],"10":["Introduction to Animations","\n# Introduction to Animations\n\n![](https://miro.medium.com/v2/resize:fit:1100/0*b4xMB22W7SjAVIMd.jpg)\n\nCSS animations, utilizing transition, keyframes, and animation properties, provide dynamic visual effects on webpages, enhancing user engagement and interactivity. \n\nBy smoothly transitioning between different states, transitions improve user experience, while keyframes enable complex animations with multiple stages. \n\nThese techniques enrich website design, attracting attention, and conveying information in an engaging and memorable manner.\n\nWe want to use `keyframe` css property in order to create an animation but moving to that part we want to have a basic understanding of `transform` property and it's use cases. \n\n## What is Transform ?\n\nTransform helps to change your web elements in all kinds of ways, from moving the element to re-sizing it, from rotating the element to tilting it.\n\nThe flow of an element will not be affected during transforms.\n\nThere are four significant aspects of transforms:\n\n- Translate\n- Scale\n- Rotate\n- Skew\n\nLet’s undertand each one of them.\n\n### Translate\n\n![](https://miro.medium.com/v2/resize:fit:400/1*_PkMpalFQd1a66dRWLU1vw.gif)\n\nTranslate changes the coordinates of the element. It is used to change the appearance of the component on a 2D plane.\n\nTranslate means to simply move the element from one position to another on the webpage. You can translate an object on X-axis, Y-axis or both.\n\n    transform: translateX(100px);      \n    // Moves the element on the X-axis\n    \n    transform: translateY(100px);      \n    // Moves the element on the Y-axis\n    \n    transform: translate(100px, 100px);    \n    // Moves the element on the X-axis and Y-axis respectively\n    \n    transform: translate(100px);   \n    // Moves the element on the X-axis ONLY\n\n### Scale\n\n![](https://miro.medium.com/v2/resize:fit:700/1*Do3L2ZAlkI3IMoV5iCb12Q.gif)\n\nScale can change the size of the image, along with both the X-axis and Y-axis. Scaling distorts the shape of the element and can degrade the quality of the element. A number greater than 1 will increase the size and a decimal less than 1 will decrease the size.\n\n    transform: scaleX(3);   \n    // Scaling along the X-axis\n    \n    transform: scaleY(0.5);   \n    // Scaling along the Y-axis\n\n    transform: scale(3);  \n    // Scaling along both the X-axis and Y-axis\n\n### Rotate\n\n![](https://miro.medium.com/v2/resize:fit:368/1*3Qe1969dFsKux-m8ZRibVA.gif)\n\nYou can rotate the element either clockwise or counter-clockwise. The unit of measurement used is **degrees**. A positive value will rotate the element clockwise, and vice versa for the negative element. This rotation would also happen along X, Y and Z axis.\n\n    transform: rotateX(45deg);\n    // The elements will be rotating into the page along X-axis.\n    \n    transform: rotateY(45deg);  \n    // The elements will be rotating into the page along Y-axis.\n    \n    transform: rotateZ(45deg)  \n    // The elements will be rotating into the page along Z-axis.\n\n### Skew\n\n![](https://miro.medium.com/v2/resize:fit:700/1*dBPwXPqexJY2_3bNYqDiBg.gif)\n\nSkewing an element means tilting the component. It has both positive and negative values, and like rotation, it is measured in degrees (deg) too.\n\nPositive X value bends the element to the left, and vice versa for the negative X. Likewise, a positive Y value dips the element downwards, and vice versa. By default, if X or Y aren’t stated in the transform, it will shift the element with respect to the X-axis.\n\n    transform: skewX(45deg);  \n    // Along X-axis transform: skewY(80deg);  \n    // Along Y-axis\n\n### Combining transforms\n\nYou can also apply multiple transforms into a single transform statement. The order does matter as the second transform will apply on the first transform and the third will apply on the result of the first two transforms.\n\n```\ntransform: translateX(100px) rotateX(45deg) scaleY(1.5) skewX(45deg)\n```\n\n### Adding transforms to events\n\nAll of these transforms can take effect on some user event like hover, click, focus, active, etc.\n\n    .element-to-animate:hover {  \n        transform: translateX(100px) rotateX(45deg) scaleY(1.5);  \n    }\n\n## Revealing Keyframe\n\nThe CSS `@keyframe` rule defines the element style at various points in time during the animation.\n\nThe keyframes are defined using percentages. The `0%` keyframe is the starting point of the animation, and the `100%` keyframe is the endpoint.\n\nThe percentages in between define the intermediate steps of the animation. For example,\n\n    @keyframes animate-background {\n    0% {\n        background-color: orange;\n    }\n    100% {\n        background-color: red;\n    }\n    }\n\nHere, the background color of the element gradually changes from `orange` to `red` during the animation.\n\nAnd `animate-background` is the animation name that associates the keyframe styles with the HTML element.\n\nThe `animation-name` and `animation-duration` properties are required for creating a simple animation, along with the `@keyframe` rule.\n\nLet's see an example,\n\n```xml\n<div></div>\n```\n\n    div {\n        width: 100px;\n        height: 100px;\n        background-color: purple;\n        \n        /* Specifies the animation name */\n        animation-name: animate-background;\n    \n        /* Specifies the animation duration */\n        animation-duration: 5s;\n    }\n    \n    @keyframes animate-background {\n        0% {\n            background-color: orange;\n        }\n    \n        100% {\n            background-color: green;\n        }\n    }\n\n**Output:**\n\n![](https://i.ibb.co/hLCvV6R/animation-1.gif)\n\nIn the above example,\n\n* `animation-name: animate-background` specifies the animation name\n* `animation-duration: 5s` specifies the animation duration\n\nThe `@keyframe` rule binds keyframe styles to the `div` element using the `animate-background` animation name.\n\n### Practical Implementation\n\nWe can combine to use Transform and Keyframe in-order to create an moving box animation.\n\nHere's the code,\n\n```xml\n<div class=\"container\">\n    <div class=\"inner-div\"></div>\n</div>\n```\n\n    .container {\n        width: 700px;\n        padding: 20px;\n        background-color: pink;\n    }\n    \n    .inner-div {\n        width: 100px;\n        height: 100px;\n        background-color: purple;\n        animation: 1s ease move-to-right alternate infinite;\n    }\n    \n    @keyframes move-to-right {\n        100% {\n            translate: 600px 0;\n        }\n    }\n\n**Output:**\n\n![](https://i.ibb.co/mC1thSY/animation-4.gif)\n\nIn the above css code,\n\n- The shorthand `animation` property within the `.inner-div` class applies an animation called `move-to-right`. \n- It specifies that the animation should last for 1 second (`1s`), use an easing timing function (`ease`), move the element to the right by 600 pixels, then back to its original position, and repeat infinitely (`alternate infinite`).\n- The `@keyframes` rule defines the `move-to-right` animation, specifying that at the end of the animation (`100%`), the element should be translated horizontally by 600 pixels (`translate: 600px 0;`)\n\nLike this we can create any type of animation as per our need without hassle, instead of creating everything from scratch we can find free hand crafted animations online at **Animista** like sites.\n"]}}